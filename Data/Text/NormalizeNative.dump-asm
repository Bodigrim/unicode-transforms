
==================== Asm code ====================
2016-06-25 18:54:13.242389 UTC

.data
	.align 8
.align 1
.globl __stginit_main@main:Data.Text.NormalizeNative
.type __stginit_main@main:Data.Text.NormalizeNative, @object
__stginit_main@main:Data.Text.NormalizeNative:


==================== Asm code ====================
2016-06-25 18:54:13.25759 UTC

.data
	.align 8
.align 1
lvl_r3LM_closure:
	.quad	lvl_r3LM_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2016-06-25 18:54:13.25884 UTC

.section .rodata
	.align 8
.align 1
c46r_str:
	.byte	46
	.byte	46
	.byte	47
	.byte	68
	.byte	97
	.byte	116
	.byte	97
	.byte	47
	.byte	84
	.byte	101
	.byte	120
	.byte	116
	.byte	47
	.byte	78
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	105
	.byte	122
	.byte	101
	.byte	78
	.byte	97
	.byte	116
	.byte	105
	.byte	118
	.byte	101
	.byte	46
	.byte	104
	.byte	115
	.byte	58
	.byte	40
	.byte	50
	.byte	57
	.byte	44
	.byte	53
	.byte	41
	.byte	45
	.byte	40
	.byte	51
	.byte	48
	.byte	44
	.byte	51
	.byte	53
	.byte	41
	.byte	124
	.byte	99
	.byte	97
	.byte	115
	.byte	101
	.byte	0


==================== Asm code ====================
2016-06-25 18:54:13.260473 UTC

.text
	.align 8
	.long	S46v_srt-(lvl_r3LM_info)+0
	.long	0
	.quad	0
	.quad	4294967318
lvl_r3LM_info:
_c46s:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c46t
_c46u:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c46q
_c46p:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $c46r_str,%r14d
	addq $-16,%rbp
	jmp patError_info
_c46q:
	jmp *(%rbx)
_c46t:
	jmp *-16(%r13)
	.size lvl_r3LM_info, .-lvl_r3LM_info


==================== Asm code ====================
2016-06-25 18:54:13.279644 UTC

.data
	.align 8
.align 1
poly_a_r3Yq_closure:
	.quad	poly_a_r3Yq_info


==================== Asm code ====================
2016-06-25 18:54:13.281101 UTC

.text
	.align 8
	.quad	8589934597
	.quad	0
	.quad	15
poly_a_r3Yq_info:
_c46P:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c46Q
_c46R:
	movq $block_c46F_info,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _c46F
_c46G:
	jmp *(%rbx)
.text
	.align 8
	.quad	0
	.quad	32
block_c46F_info:
_c46F:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $2,%rax
	jae _c46N
_c46O:
	movl $()_closure+1,%ebx
	addq $8,%rbp
	jmp *(%rbp)
_c46N:
	movq $block_c46X_info,-8(%rbp)
	movq 14(%rbx),%rax
	movq 6(%rbx),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	jmp stg_ap_v_fast
_c46Q:
	movl $poly_a_r3Yq_closure,%ebx
	jmp *-8(%r13)
.text
	.align 8
	.quad	1
	.quad	32
block_c46X_info:
_c46X:
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp poly_a_r3Yq_info
	.size poly_a_r3Yq_info, .-poly_a_r3Yq_info


==================== Asm code ====================
2016-06-25 18:54:13.295724 UTC

.data
	.align 8
.align 1
lvl1_r3Yr_closure:
	.quad	lvl1_r3Yr_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2016-06-25 18:54:13.296553 UTC

.section .rodata
	.align 8
.align 1
c47d_str:
	.byte	68
	.byte	97
	.byte	116
	.byte	97
	.byte	47
	.byte	85
	.byte	110
	.byte	105
	.byte	99
	.byte	111
	.byte	100
	.byte	101
	.byte	47
	.byte	73
	.byte	110
	.byte	116
	.byte	101
	.byte	114
	.byte	110
	.byte	97
	.byte	108
	.byte	47
	.byte	78
	.byte	111
	.byte	114
	.byte	109
	.byte	97
	.byte	108
	.byte	105
	.byte	122
	.byte	101
	.byte	83
	.byte	116
	.byte	114
	.byte	101
	.byte	97
	.byte	109
	.byte	46
	.byte	104
	.byte	115
	.byte	58
	.byte	40
	.byte	49
	.byte	48
	.byte	50
	.byte	44
	.byte	57
	.byte	41
	.byte	45
	.byte	40
	.byte	49
	.byte	50
	.byte	57
	.byte	44
	.byte	51
	.byte	56
	.byte	41
	.byte	124
	.byte	102
	.byte	117
	.byte	110
	.byte	99
	.byte	116
	.byte	105
	.byte	111
	.byte	110
	.byte	32
	.byte	114
	.byte	101
	.byte	111
	.byte	114
	.byte	100
	.byte	101
	.byte	114
	.byte	0


==================== Asm code ====================
2016-06-25 18:54:13.297796 UTC

.text
	.align 8
	.long	S46v_srt-(lvl1_r3Yr_info)+0
	.long	0
	.quad	0
	.quad	4294967318
lvl1_r3Yr_info:
_c47e:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c47f
_c47g:
	movq %r13,%rdi
	movq %rbx,%rsi
	subq $8,%rsp
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _c47c
_c47b:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movl $c47d_str,%r14d
	addq $-16,%rbp
	jmp patError_info
_c47c:
	jmp *(%rbx)
_c47f:
	jmp *-16(%r13)
	.size lvl1_r3Yr_info, .-lvl1_r3Yr_info


==================== Asm code ====================
2016-06-25 18:54:13.403438 UTC

.data
	.align 8
.align 1
.globl $wnormalize_closure
.type $wnormalize_closure, @object
$wnormalize_closure:
	.quad	$wnormalize_info
	.quad	0


==================== Asm code ====================
2016-06-25 18:54:13.405024 UTC

.text
	.align 8
.globl $wnormalize_slow
.type $wnormalize_slow, @object
$wnormalize_slow:
_c47n:
	movq 24(%rbp),%r8
	movq 16(%rbp),%rdi
	movq 8(%rbp),%rsi
	movq (%rbp),%r14
	addq $32,%rbp
	jmp $wnormalize_info
	.size $wnormalize_slow, .-$wnormalize_slow


==================== Asm code ====================
2016-06-25 18:54:13.406274 UTC

.text
	.align 8
	.quad	4294967297
	.quad	20
sat_s3Za_info:
_c48P:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c48Q
_c48R:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	movq 24(%rbx),%rax
	cmpq $11,%rax
	jne _c48N
_c48O:
	movl $[]_closure+1,%ebx
	addq $-16,%rbp
	jmp *(%rbp)
_c48N:
	leaq 1(%rax),%r14
	movq 16(%rbx),%rbx
	addq $-16,%rbp
	jmp go1_s3Z3_info
_c48Q:
	jmp *-16(%r13)
	.size sat_s3Za_info, .-sat_s3Za_info


==================== Asm code ====================
2016-06-25 18:54:13.407362 UTC

.text
	.align 8
	.quad	4294967299
	.quad	4294967297
	.quad	13
sat_s3Z7_info:
_c490:
	movq 7(%rbx),%rax
	movq 15(%rbx),%rbx
	movl $0,16(%rax,%rbx,4)
	movl $()_closure+1,%ebx
	jmp *(%rbp)
	.size sat_s3Z7_info, .-sat_s3Z7_info


==================== Asm code ====================
2016-06-25 18:54:13.408343 UTC

.text
	.align 8
	.quad	4294967300
	.quad	1
	.quad	10
go1_s3Z3_info:
_c494:
	addq $80,%r12
	cmpq 856(%r13),%r12
	ja _c498
_c497:
	movq 7(%rbx),%rax
	movq $sat_s3Za_info,-72(%r12)
	movq %rbx,-56(%r12)
	movq %r14,-48(%r12)
	movq $sat_s3Z7_info,-40(%r12)
	movq %rax,-32(%r12)
	movq %r14,-24(%r12)
	movq $:_con_info,-16(%r12)
	leaq -39(%r12),%rax
	movq %rax,-8(%r12)
	leaq -72(%r12),%rax
	movq %rax,(%r12)
	leaq -14(%r12),%rbx
	jmp *(%rbp)
_c498:
	movq $80,904(%r13)
	jmp *-8(%r13)
	.size go1_s3Z3_info, .-go1_s3Z3_info


==================== Asm code ====================
2016-06-25 18:54:13.409574 UTC

.text
	.align 8
	.quad	4294967296
	.quad	18
lvl2_s3Zo_info:
_c49d:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c49e
_c49f:
	movq $stg_upd_frame_info,-16(%rbp)
	movq %rbx,-8(%rbp)
	cmpq $0,16(%rbx)
	setl %al
	movzbl %al,%eax
	shlq $3,%rax
	movq Bool_closure_tbl(%rax),%rbx
	addq $-16,%rbp
	jmp *(%rbp)
_c49e:
	jmp *-16(%r13)
	.size lvl2_s3Zo_info, .-lvl2_s3Zo_info


==================== Asm code ====================
2016-06-25 18:54:13.414149 UTC

.text
	.align 8
	.long	S46v_srt-(sat_s41h_info)+8
	.long	0
	.quad	4294967299
	.quad	8589934593
	.quad	30064771081
sat_s41h_info:
_c49g:
	leaq -80(%rbp),%rax
	cmpq %r15,%rax
	jb _c49h
_c49i:
	movq 23(%rbx),%rax
	leaq 11(%rax),%rcx
	testq %rcx,%rcx
	jl _c4dI
_c4dJ:
	movq $4611686018427387904,%rdx
	movq %rcx,%rsi
	andq %rdx,%rsi
	testq %rsi,%rsi
	jne _c4dI
_c49p:
	movq $block_c47U_info,-40(%rbp)
	movq 7(%rbx),%rdx
	movq 15(%rbx),%rbx
	movq %rbx,%rsi
	movq %rcx,%rbx
	shlq $1,%rbx
	movq %rdx,-32(%rbp)
	movq %rsi,-24(%rbp)
	movq %rax,-16(%rbp)
	movq %rcx,-8(%rbp)
	addq $-40,%rbp
	jmp stg_newByteArray#
.text
	.align 8
	.long	S46v_srt-(block_c47U_info)+8
	.long	0
	.quad	900
	.quad	30064771104
block_c47U_info:
_c47U:
	addq $80,%r12
	cmpq 856(%r13),%r12
	ja _c49t
_c49s:
	movq $stg_ARR_WORDS_info,-72(%r12)
	movq $48,-64(%r12)
	movq $go1_s3Z3_info,-8(%r12)
	leaq -72(%r12),%rax
	movq %rax,(%r12)
	movq $block_c47Y_info,-8(%rbp)
	xorl %r14d,%r14d
	movq %rbx,%rax
	leaq -7(%r12),%rbx
	movq %rax,(%rbp)
	addq $-8,%rbp
	jmp go1_s3Z3_info
.text
	.align 8
	.long	S46v_srt-(block_c47Y_info)+8
	.long	0
	.quad	1797
	.quad	30064771104
block_c47Y_info:
_c47Y:
	movq $block_c482_info,(%rbp)
	movq %rbx,%r14
	jmp poly_a_r3Yq_info
.text
	.align 8
	.long	S46v_srt-(block_c482_info)+8
	.long	0
	.quad	1797
	.quad	30064771104
block_c482_info:
_c482:
	movq 16(%rbp),%rax
	movq 24(%rbp),%rbx
	movq %rbx,%rcx
	addq 32(%rbp),%rcx
	xorl %edx,%edx
	xorl %esi,%esi
	movq 40(%rbp),%rdi
	decq %rdi
	movq 8(%rbp),%r8
_c489:
	addq $24,%r12
	cmpq 856(%r13),%r12
	ja _c49y
_c49x:
	movq $lvl2_s3Zo_info,-16(%r12)
	movq %rdi,%r9
	shlq $1,%r9
	movq %r9,(%r12)
	leaq -16(%r12),%r10
_c48p:
	addq $48,%r12
	cmpq 856(%r13),%r12
	ja _c4aQ
_c4aP:
	leaq 11(%rsi),%r11
	cmpq %r11,%rdi
	jl _c4dC
_c4dD:
	cmpq %rcx,%rbx
	jge _c4dy
_c4dz:
	movzwl 16(%rax,%rbx,2),%r11d
	cmpq $55296,%r11
	jae _c4de
_c4df:
	addq $-48,%r12
	incq %rbx
_n4g8:
	movq %rbx,%r14
	movq %r11,%rbx
_s408:
	cmpq $192,%rbx
	jl _s40c
_c4cR:
	cmpq $195101,%rbx
	jg _s40c
_c4cM:
	cmpq $1,%rdx
	jl _c4cH
_c4cI:
	cmpq $1,%rdx
	jne _c4bd
_c4cB:
	cmpq $768,%rbx
	jl _c4cD
_c4cE:
	cmpq $125142,%rbx
	jg _c4cy
_c4cz:
	xorl %ebx,%ebx
	addq $2,%rsi
_n4g6:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
.text
	.align 8
	.long	S46v_srt-(block_c48a_info)+8
	.long	0
	.quad	5575
	.quad	30064771104
block_c48a_info:
_c48a:
	movq 32(%rbp),%rax
	movq 56(%rbp),%rbx
	movq 48(%rbp),%rcx
	movq 40(%rbp),%rdx
	movq 24(%rbp),%rsi
	movq 16(%rbp),%rdi
	movq 8(%rbp),%r8
	addq $16,%rbp
_n4fX:
	movq %rbx,80(%rsp)
	movq %rsi,%rbx
	movq %rdi,%rsi
	movq %rdx,%rdi
	movq %r8,%rdx
	movq %rcx,%r8
	movq 80(%rsp),%rcx
	jmp _c489
_c4ac:
	addq $16,%rbp
	decq %rdx
_n4fW:
	movq %rbx,104(%rsp)
	movq %rsi,%rbx
	movq %rdi,%rsi
	movq %rdx,%rdi
	movq %r8,%rdx
	movq 104(%rsp),%r8
	jmp _c489
.text
	.align 8
	.long	S46v_srt-(block_c4a1_info)+8
	.long	0
	.quad	6599
	.quad	30064771104
block_c4a1_info:
_c4a1:
	movq 32(%rbp),%rax
	movq 48(%rbp),%rcx
	movq 24(%rbp),%rdx
	movq 56(%rbp),%rsi
	movq 16(%rbp),%rdi
	movq 8(%rbp),%r8
	testq %rdi,%rdi
	jle _c4ac
_c4ad:
	movq %rdi,%r9
	leaq 16(%rbx),%rdi
	movq %rsi,%r10
	xorl %esi,%esi
	movq 40(%rbp),%r11
	movq %rdx,%r14
	leaq 16(%r11),%rdx
	movq %rcx,%r11
	xorl %ecx,%ecx
	movq %r8,64(%rsp)
	movq %r9,%r8
	subq $8,%rsp
	movq %rax,80(%rsp)
	xorl %eax,%eax
	movq %r11,88(%rsp)
	movq %r10,96(%rsp)
	movq %r9,104(%rsp)
	call _hs_text_memcpy
	addq $8,%rsp
	addq $16,%rbp
	movq 64(%rsp),%rax
	movq 96(%rsp),%rcx
	movq 88(%rsp),%rdx
	leaq -1(%r14),%rsi
_n4fV:
	movq %rsi,%rdi
	movq %rcx,%rsi
	movq 80(%rsp),%rcx
	movq %rbx,%r8
	movq %rdx,%rbx
	movq %rax,%rdx
	movq 72(%rsp),%rax
	jmp _c489
_c4de:
	cmpq $56319,%r11
	jbe _c4d9
_c4da:
	addq $-48,%r12
	incq %rbx
_n4g7:
	movq %rbx,%r14
	movq %r11,%rbx
	jmp _s408
_c4d9:
	addq $-48,%r12
	leaq 2(%rbx),%r14
	incq %rbx
	movzwl 16(%rax,%rbx,2),%ebx
	addq $-56320,%rbx
	addq $-55296,%r11
	shlq $10,%r11
	addq %rbx,%r11
	leaq 65536(%r11),%rbx
	jmp _s408
_c4cy:
	xorl %ebx,%ebx
	incq %rsi
_n4g5:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
_c4cD:
	xorl %ebx,%ebx
	incq %rsi
_n4g4:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
_c4cH:
	testq %rdx,%rdx
	jne _c4bd
_c4c9:
	movl $1,%ebx
	incq %rsi
_n4g3:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
_s40c:
	cmpq $1,%rdx
	jl _c4bL
_c4bM:
	cmpq $1,%rdx
	jne _c4bd
_c4bG:
	cmpq $768,%rbx
	jl _c4bI
_c4bJ:
	cmpq $125142,%rbx
	jg _c4bD
_c4bE:
	xorl %ebx,%ebx
	addq $2,%rsi
_n4g2:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
_c4bD:
	xorl %ebx,%ebx
	incq %rsi
_n4g1:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
_c4bI:
	xorl %ebx,%ebx
	incq %rsi
_n4g0:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
_c4bL:
	testq %rdx,%rdx
	jne _c4bd
_c4be:
	movl $1,%ebx
	incq %rsi
_n4fZ:
	movq %rbx,%rdx
	movq %r14,%rbx
	jmp _c48p
.text
	.align 8
	.long	S46v_srt-(block_c48q_info)+8
	.long	0
	.quad	10185
	.quad	30064771104
block_c48q_info:
_c48q:
	movq 72(%rbp),%rax
	movq 48(%rbp),%rbx
	movq 64(%rbp),%rcx
	movq 56(%rbp),%rdx
	movq 40(%rbp),%rsi
	movq 32(%rbp),%rdi
	movq 8(%rbp),%r8
	movq 16(%rbp),%r9
	movq 24(%rbp),%r10
	addq $32,%rbp
_n4fY:
	movq %rsi,112(%rsp)
	movq %r9,%rsi
	movq %rdi,%r9
	movq 112(%rsp),%rdi
	movq %rax,120(%rsp)
	movq %rbx,%rax
	movq %r8,%rbx
	movq %rdx,%r8
	movq %r10,%rdx
	movq 120(%rsp),%r10
	jmp _c48p
_c49h:
	jmp *-8(%r13)
_c49t:
	movq $80,904(%r13)
	jmp stg_gc_unpt_r1
_c49y:
	movq $24,904(%r13)
	movq $block_c48a_info,-16(%rbp)
	movq %rdx,-8(%rbp)
	movq %rsi,(%rbp)
	movq %rbx,8(%rbp)
	movq %rdi,24(%rbp)
	movq %r8,32(%rbp)
	movq %rcx,40(%rbp)
	addq $-16,%rbp
	jmp stg_gc_noregs
.text
	.align 8
	.long	S46v_srt-(block_c49C_info)+8
	.long	0
	.quad	6599
	.quad	30064771104
block_c49C_info:
_c49C:
	andl $7,%ebx
	cmpq $2,%rbx
	jae _u4fb
_c4an:
	movq 24(%rbp),%rax
	movq $4611686018427387904,%rbx
	movq %rax,%rcx
	andq %rbx,%rcx
	testq %rcx,%rcx
	jne _u4fc
_c49U:
	movq $block_c4a1_info,(%rbp)
	movq %rax,%rbx
	shlq $1,%rbx
	jmp stg_newByteArray#
.text
	.align 8
	.long	S46v_srt-(block_c4aB_info)+8
	.long	0
	.quad	2503
	.quad	30064771104
block_c4aB_info:
_c4aB:
	movq $block_c49C_info,(%rbp)
	movq 7(%rbx),%rax
	movq 56(%rbp),%rbx
	movq 8(%rbp),%rcx
	movq %rax,8(%rbp)
	movq 16(%rbp),%rax
	movq %rcx,16(%rbp)
	movq %rax,56(%rbp)
	testb $7,%bl
	jne _c49C
_c49E:
	jmp *(%rbx)
.text
	.align 8
	.long	S46v_srt-(block_c4ar_info)+8
	.long	0
	.quad	2311
	.quad	30064771104
block_c4ar_info:
_c4ar:
	movq $block_c4aw_info,(%rbp)
	movq 7(%rbx),%rax
	movq 16(%rbp),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _c4aw
_c4ax:
	jmp *(%rbx)
_c4dC:
	movq $I#_con_info,-40(%r12)
	movq %rdx,-32(%r12)
	movq $I#_con_info,-24(%r12)
	movq %rsi,-16(%r12)
	movq $I#_con_info,-8(%r12)
	movq %rbx,(%r12)
	movq $block_c4ar_info,-16(%rbp)
	leaq -7(%r12),%rbx
	leaq -39(%r12),%rax
	movq %rax,-8(%rbp)
	leaq -23(%r12),%rax
	movq %rax,(%rbp)
	movq %r9,8(%rbp)
	movq %r8,24(%rbp)
	movq %rcx,32(%rbp)
	movq %r10,40(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _c4ar
_c4as:
	jmp *(%rbx)
.text
	.align 8
	.long	S46v_srt-(block_c4aw_info)+8
	.long	0
	.quad	2439
	.quad	30064771104
block_c4aw_info:
_c4aw:
	movq $block_c4aB_info,(%rbp)
	movq 7(%rbx),%rax
	movq 8(%rbp),%rbx
	movq %rax,8(%rbp)
	testb $7,%bl
	jne _c4aB
_c4aF:
	jmp *(%rbx)
_c4aQ:
	movq $48,904(%r13)
	movq $block_c48q_info,-32(%rbp)
	movq %rbx,-24(%rbp)
	movq %rsi,-16(%rbp)
	movq %rdx,-8(%rbp)
	movq %r9,(%rbp)
	movq %rdi,8(%rbp)
	movq %r8,24(%rbp)
	movq %rcx,32(%rbp)
	movq %r10,40(%rbp)
	addq $-32,%rbp
	jmp stg_gc_noregs
_c4bd:
	movl $lvl1_r3Yr_closure,%ebx
	addq $48,%rbp
	jmp stg_ap_0_fast
_c4dl:
	movq $Text_con_info,-40(%r12)
	movq %r8,-32(%r12)
	movq $0,-24(%r12)
	movq %rsi,-16(%r12)
	leaq -39(%r12),%rax
	addq $-16,%r12
	movq %rax,%rbx
	addq $48,%rbp
	jmp *(%rbp)
.text
	.align 8
	.quad	0
	.quad	32
block_c4dn_info:
_c4dn:
	addq $8,%rbp
	jmp *(%rbp)
_c4dy:
	testq %rsi,%rsi
	jne _c4dl
_c4do:
	addq $-48,%r12
	movq $block_c4dn_info,40(%rbp)
	movl $empty_closure,%ebx
	addq $40,%rbp
	testb $7,%bl
	jne _c4dn
_c4dp:
	jmp *(%rbx)
_u4fc:
	addq $64,%rbp
_c4dI:
	movl $array_size_error_closure,%ebx
	jmp stg_ap_0_fast
_u4fb:
	addq $64,%rbp
	jmp _c4dI
	.size sat_s41h_info, .-sat_s41h_info


==================== Asm code ====================
2016-06-25 18:54:13.419147 UTC

.text
	.align 8
	.long	$wnormalize_slow-($wnormalize_info)+0
	.long	0
	.quad	772
	.long	S46v_srt-($wnormalize_info)+8
	.long	0
	.quad	17179869184
	.quad	0
	.quad	133143986191
.globl $wnormalize_info
.type $wnormalize_info, @object
$wnormalize_info:
_c4f1:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _c4f2
_c4f3:
	movq $block_c47r_info,-32(%rbp)
	movq %r14,%rbx
	movq %rsi,-24(%rbp)
	movq %rdi,-16(%rbp)
	movq %r8,-8(%rbp)
	addq $-32,%rbp
	testb $7,%bl
	jne _c47r
_c47s:
	jmp *(%rbx)
.text
	.align 8
	.long	S46v_srt-(block_c47r_info)+8
	.long	0
	.quad	387
	.quad	64424509472
block_c47r_info:
_c47r:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	jne _c4eY
_c4eZ:
	addq $32,%r12
	cmpq 856(%r13),%r12
	ja _c4f8
_c4f7:
	movq $sat_s41h_info,-24(%r12)
	movq 8(%rbp),%rax
	movq %rax,-16(%r12)
	movq 16(%rbp),%rax
	movq %rax,-8(%r12)
	movq 24(%rbp),%rax
	movq %rax,(%r12)
	leaq -23(%r12),%r14
	addq $32,%rbp
	jmp runSTRep_info
_c4eY:
	movl $lvl_r3LM_closure,%ebx
	addq $32,%rbp
	jmp stg_ap_0_fast
_c4f2:
	movl $$wnormalize_closure,%ebx
	movq %r14,-32(%rbp)
	movq %rsi,-24(%rbp)
	movq %rdi,-16(%rbp)
	movq %r8,-8(%rbp)
	addq $-32,%rbp
	jmp *-8(%r13)
_c4f8:
	movq $32,904(%r13)
	jmp stg_gc_unpt_r1
	.size $wnormalize_info, .-$wnormalize_info


==================== Asm code ====================
2016-06-25 18:54:13.433474 UTC

.data
	.align 8
.align 1
.globl normalize_closure
.type normalize_closure, @object
normalize_closure:
	.quad	normalize_info
	.quad	0


==================== Asm code ====================
2016-06-25 18:54:13.434841 UTC

.text
	.align 8
	.long	S46v_srt-(normalize_info)+40
	.long	0
	.quad	8589934607
	.quad	0
	.quad	12884901903
.globl normalize_info
.type normalize_info, @object
normalize_info:
_c4go:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _c4gp
_c4gq:
	movq $block_c4gl_info,-16(%rbp)
	movq %rsi,%rbx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _c4gl
_c4gm:
	jmp *(%rbx)
.text
	.align 8
	.long	S46v_srt-(block_c4gl_info)+40
	.long	0
	.quad	1
	.quad	4294967328
block_c4gl_info:
_c4gl:
	movq 23(%rbx),%r8
	movq 15(%rbx),%rdi
	movq 7(%rbx),%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp $wnormalize_info
_c4gp:
	movl $normalize_closure,%ebx
	jmp *-8(%r13)
	.size normalize_info, .-normalize_info


==================== Asm code ====================
2016-06-25 18:54:13.436766 UTC

.section .data
	.align 8
.align 1
S46v_srt:
	.quad	patError_closure
	.quad	array_size_error_closure
	.quad	empty_closure
	.quad	lvl1_r3Yr_closure
	.quad	lvl_r3LM_closure
	.quad	$wnormalize_closure
	.quad	normalize_closure

