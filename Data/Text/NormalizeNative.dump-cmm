
==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.141883 UTC

[section "data" { __stginit_main@main:Data.Text.NormalizeNative:
 }]


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.142827 UTC

[section "data" { __stginit_main@main:Data.Text.NormalizeNative:
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.143513 UTC

[section "data" { __stginit_main@main:Data.Text.NormalizeNative:
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.144937 UTC

[section "data" {
     lvl_r3Nn_closure:
         const lvl_r3Nn_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4fZ_str:
         I8[] [78,111,114,109,97,108,105,122,101,78,97,116,105,118,101,46,104,115,58,40,50,57,44,53,41,45,40,51,48,44,51,53,41,124,99,97,115,101]
 },
 lvl_r3Nn_entry() //  [R1]
         { info_tbl: [(c4g0,
                       label: lvl_r3Nn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4g0:
           _r3Nn::P64 = R1;
           goto c4fU;
       c4fU:
           if ((old + 0) - <highSp> < SpLim) goto c4g1; else goto c4g2;
       c4g1:
           R1 = _r3Nn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4g2:
           (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Nn::P64);
           if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
       c4fY:
           call (I64[_r3Nn::P64])() args: 8, res: 0, upd: 8;
       c4fX:
           I64[(old + 24)] = stg_bh_upd_frame_info;
           I64[(old + 16)] = _c4fW::I64;
           R2 = c4fZ_str;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.145821 UTC

{offset
  c4g0:
      _r3Nn::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4g1; else goto c4g2;
  c4g1:
      R1 = _r3Nn::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4g2:
      (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Nn::P64);
      if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
  c4fY:
      call (I64[_r3Nn::P64])() args: 8, res: 0, upd: 8;
  c4fX:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c4fW::I64;
      R2 = c4fZ_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.146418 UTC

{offset
  c4g0:
      _r3Nn::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4g1; else goto c4g2;
  c4g1:
      R1 = _r3Nn::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4g2:
      (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Nn::P64);
      if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
  c4fY:
      call (I64[_r3Nn::P64])() args: 8, res: 0, upd: 8;
  c4fX:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c4fW::I64;
      R2 = c4fZ_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.147035 UTC

{offset
  c4g0:
      _r3Nn::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c4g1; else goto c4g2;
  c4g1:
      R1 = _r3Nn::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4g2:
      (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Nn::P64);
      if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
  c4fY:
      call (I64[_r3Nn::P64])() args: 8, res: 0, upd: 8;
  c4fX:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c4fW::I64;
      R2 = c4fZ_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.147797 UTC

{offset
  c4g0:
      if ((Sp + -16) < SpLim) goto c4g1; else goto c4g2;
  c4g1:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4g2:
      (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
      if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
  c4fY:
      call (I64[R1])() args: 8, res: 0, upd: 8;
  c4fX:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c4fW::I64;
      R2 = c4fZ_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.148725 UTC

[(c4fX, {patError_closure}), (c4fY, {}),
 (c4g0, {patError_closure}), (c4g1, {}), (c4g2, {patError_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.149272 UTC

lvl_r3Nn_entry() //  [R1]
        { info_tbl: [(c4g0,
                      label: lvl_r3Nn_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4g0:
          if ((Sp + -16) < SpLim) goto c4g1; else goto c4g2;
      c4g1:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4g2:
          (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
      c4fY:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c4fX:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c4fW::I64;
          R2 = c4fZ_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.14992 UTC

lvl_r3Nn_entry() //  [R1]
        { info_tbl: [(c4g0,
                      label: lvl_r3Nn_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4g0:
          if ((Sp + -16) < SpLim) goto c4g1; else goto c4g2;
      c4g1:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4g2:
          (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
      c4fY:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c4fX:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c4fW::I64;
          R2 = c4fZ_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.150608 UTC

[section "data" {
     lvl_r3Nn_closure:
         const lvl_r3Nn_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4fZ_str:
         I8[] [78,111,114,109,97,108,105,122,101,78,97,116,105,118,101,46,104,115,58,40,50,57,44,53,41,45,40,51,48,44,51,53,41,124,99,97,115,101]
 },
 lvl_r3Nn_entry() //  [R1]
         { info_tbl: [(c4g0,
                       label: lvl_r3Nn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4g0:
           if ((Sp + -16) < SpLim) goto c4g1; else goto c4g2;
       c4g1:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4g2:
           (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
       c4fY:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c4fX:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4fW::I64;
           R2 = c4fZ_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.151459 UTC

[section "data" {
     lvl_r3Nn_closure:
         const lvl_r3Nn_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4fZ_str:
         I8[] [78,111,114,109,97,108,105,122,101,78,97,116,105,118,101,46,104,115,58,40,50,57,44,53,41,45,40,51,48,44,51,53,41,124,99,97,115,101]
 },
 lvl_r3Nn_entry() //  [R1]
         { info_tbl: [(c4g0,
                       label: lvl_r3Nn_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4g0:
           if ((Sp + -16) < SpLim) goto c4g1; else goto c4g2;
       c4g1:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4g2:
           (_c4fW::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4fW::I64 == 0) goto c4fY; else goto c4fX;
       c4fY:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c4fX:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4fW::I64;
           R2 = c4fZ_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.154406 UTC

[section "data" {
     poly_a_r45I_closure:
         const poly_a_r45I_info;
 },
 poly_a_r45I_entry() //  [R2]
         { info_tbl: [(c4gn,
                       label: poly_a_r45I_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4gn:
           _s45V::P64 = R2;
           goto c4gb;
       c4gb:
           if ((old + 0) - <highSp> < SpLim) goto c4go; else goto c4gp;
       c4go:
           R2 = _s45V::P64;
           R1 = poly_a_r45I_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4gp:
           goto c4ga;
       c4ga:
           I64[(young<c4gd> + 8)] = c4gd;
           R1 = _s45V::P64;
           if (R1 & 7 != 0) goto c4gd; else goto c4ge;
       c4ge:
           call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
       c4gd:
           _s45X::P64 = R1;
           _c4gj::P64 = _s45X::P64 & 7;
           if (_c4gj::P64 >= 2) goto c4gl; else goto c4gm;
       c4gl:
           goto c4gi;
       c4gi:
           _s45Y::P64 = P64[_s45X::P64 + 6];
           _s45Z::P64 = P64[_s45X::P64 + 14];
           I64[(young<c4gv> + 8)] = c4gv;
           R1 = _s45Y::P64;
           call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
       c4gv:
           _s462::P64 = R1;
           R2 = _s45Z::P64;
           call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
       c4gm:
           goto c4gh;
       c4gh:
           R1 = ()_closure+1;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.155442 UTC

{offset
  c4gn:
      _s45V::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4go; else goto c4gp;
  c4go:
      R2 = _s45V::P64;
      R1 = poly_a_r45I_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4gp:
      I64[(young<c4gd> + 8)] = c4gd;
      R1 = _s45V::P64;
      if (R1 & 7 != 0) goto c4gd; else goto c4ge;
  c4ge:
      call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
  c4gd:
      _s45X::P64 = R1;
      _c4gj::P64 = _s45X::P64 & 7;
      if (_c4gj::P64 >= 2) goto c4gl; else goto c4gm;
  c4gl:
      _s45Y::P64 = P64[_s45X::P64 + 6];
      _s45Z::P64 = P64[_s45X::P64 + 14];
      I64[(young<c4gv> + 8)] = c4gv;
      R1 = _s45Y::P64;
      call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
  c4gv:
      _s462::P64 = R1;
      R2 = _s45Z::P64;
      call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
  c4gm:
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.157907 UTC

{offset
  c4gn:
      _s45V::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4go; else goto c4gp;
  c4go:
      R2 = _s45V::P64;
      R1 = poly_a_r45I_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4gp:
      I64[(young<c4gd> + 8)] = c4gd;
      R1 = _s45V::P64;
      if (R1 & 7 != 0) goto c4gd; else goto c4ge;
  c4ge:
      call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
  c4gd:
      _s45X::P64 = R1;
      _c4gj::P64 = _s45X::P64 & 7;
      if (_c4gj::P64 >= 2) goto c4gl; else goto c4gm;
  c4gl:
      _s45Y::P64 = P64[_s45X::P64 + 6];
      _s45Z::P64 = P64[_s45X::P64 + 14];
      I64[(young<c4gv> + 8)] = c4gv;
      R1 = _s45Y::P64;
      call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
  c4gv:
      _s462::P64 = R1;
      R2 = _s45Z::P64;
      call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
  c4gm:
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.158949 UTC

{offset
  c4gn:
      _s45V::P64 = R2;
      if ((Sp + 8) - 24 < SpLim) goto c4go; else goto c4gp;
  c4go:
      R2 = _s45V::P64;
      R1 = poly_a_r45I_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4gp:
      I64[Sp - 8] = c4gd;
      R1 = _s45V::P64;
      Sp = Sp - 8;
      if (R1 & 7 != 0) goto c4gd; else goto c4ge;
  c4ge:
      call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
  c4gd:
      _s45X::P64 = R1;
      _c4gj::P64 = _s45X::P64 & 7;
      if (_c4gj::P64 >= 2) goto c4gl; else goto c4gm;
  c4gl:
      _s45Y::P64 = P64[_s45X::P64 + 6];
      _s45Z::P64 = P64[_s45X::P64 + 14];
      I64[Sp - 8] = c4gv;
      R1 = _s45Y::P64;
      P64[Sp] = _s45Z::P64;
      Sp = Sp - 8;
      call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
  c4gv:
      _s45Z::P64 = P64[Sp + 8];
      _s462::P64 = R1;
      R2 = _s45Z::P64;
      Sp = Sp + 16;
      call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
  c4gm:
      R1 = ()_closure+1;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.159883 UTC

{offset
  c4gn:
      if ((Sp + -16) < SpLim) goto c4go; else goto c4gp;
  c4go:
      R2 = R2;
      R1 = poly_a_r45I_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4gp:
      I64[Sp - 8] = c4gd;
      R1 = R2;
      Sp = Sp - 8;
      if (R1 & 7 != 0) goto c4gd; else goto c4ge;
  c4ge:
      call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
  c4gd:
      if (R1 & 7 >= 2) goto c4gl; else goto c4gm;
  c4gl:
      I64[Sp - 8] = c4gv;
      _s45Z::P64 = P64[R1 + 14];
      R1 = P64[R1 + 6];
      P64[Sp] = _s45Z::P64;
      Sp = Sp - 8;
      call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
  c4gv:
      R2 = P64[Sp + 8];
      Sp = Sp + 16;
      call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
  c4gm:
      R1 = ()_closure+1;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.160757 UTC

[(c4gd, {}), (c4ge, {}), (c4gl, {}), (c4gm, {}), (c4gn, {}),
 (c4go, {}), (c4gp, {}), (c4gv, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.161341 UTC

poly_a_r45I_entry() //  [R2]
        { info_tbl: [(c4gd,
                      label: block_c4gd_info
                      rep:StackRep []),
                     (c4gn,
                      label: poly_a_r45I_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                     (c4gv,
                      label: block_c4gv_info
                      rep:StackRep [False])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4gn:
          if ((Sp + -16) < SpLim) goto c4go; else goto c4gp;
      c4go:
          R2 = R2;
          R1 = poly_a_r45I_closure;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c4gp:
          I64[Sp - 8] = c4gd;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c4gd; else goto c4ge;
      c4ge:
          call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
      c4gd:
          if (R1 & 7 >= 2) goto c4gl; else goto c4gm;
      c4gl:
          I64[Sp - 8] = c4gv;
          _s45Z::P64 = P64[R1 + 14];
          R1 = P64[R1 + 6];
          P64[Sp] = _s45Z::P64;
          Sp = Sp - 8;
          call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
      c4gv:
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
      c4gm:
          R1 = ()_closure+1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.16219 UTC

poly_a_r45I_entry() //  [R2]
        { info_tbl: [(c4gd,
                      label: block_c4gd_info
                      rep:StackRep []),
                     (c4gn,
                      label: poly_a_r45I_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                     (c4gv,
                      label: block_c4gv_info
                      rep:StackRep [False])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4gn:
          if ((Sp + -16) < SpLim) goto c4go; else goto c4gp;
      c4go:
          R2 = R2;
          R1 = poly_a_r45I_closure;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c4gp:
          I64[Sp - 8] = c4gd;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c4gd; else goto c4ge;
      c4ge:
          call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
      c4gd:
          if (R1 & 7 >= 2) goto c4gl; else goto c4gm;
      c4gl:
          I64[Sp - 8] = c4gv;
          _s45Z::P64 = P64[R1 + 14];
          R1 = P64[R1 + 6];
          P64[Sp] = _s45Z::P64;
          Sp = Sp - 8;
          call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
      c4gv:
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
      c4gm:
          R1 = ()_closure+1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.163067 UTC

[section "data" {
     poly_a_r45I_closure:
         const poly_a_r45I_info;
 },
 poly_a_r45I_entry() //  [R2]
         { info_tbl: [(c4gd,
                       label: block_c4gd_info
                       rep:StackRep []),
                      (c4gn,
                       label: poly_a_r45I_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                      (c4gv,
                       label: block_c4gv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4gn:
           if ((Sp + -16) < SpLim) goto c4go; else goto c4gp;
       c4go:
           R2 = R2;
           R1 = poly_a_r45I_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4gp:
           I64[Sp - 8] = c4gd;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto c4gd; else goto c4ge;
       c4ge:
           call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
       c4gd:
           if (R1 & 7 >= 2) goto c4gl; else goto c4gm;
       c4gl:
           I64[Sp - 8] = c4gv;
           _s45Z::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s45Z::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
       c4gv:
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
       c4gm:
           R1 = ()_closure+1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.16392 UTC

[section "data" {
     poly_a_r45I_closure:
         const poly_a_r45I_info;
 },
 poly_a_r45I_entry() //  [R2]
         { info_tbl: [(c4gd,
                       label: block_c4gd_info
                       rep:StackRep []),
                      (c4gn,
                       label: poly_a_r45I_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                      (c4gv,
                       label: block_c4gv_info
                       rep:StackRep [False])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4gn:
           if ((Sp + -16) < SpLim) goto c4go; else goto c4gp;
       c4go:
           R2 = R2;
           R1 = poly_a_r45I_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4gp:
           I64[Sp - 8] = c4gd;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto c4gd; else goto c4ge;
       c4ge:
           call (I64[R1])(R1) returns to c4gd, args: 8, res: 8, upd: 8;
       c4gd:
           if (R1 & 7 >= 2) goto c4gl; else goto c4gm;
       c4gl:
           I64[Sp - 8] = c4gv;
           _s45Z::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s45Z::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) returns to c4gv, args: 8, res: 8, upd: 8;
       c4gv:
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call poly_a_r45I_info(R2) args: 8, res: 0, upd: 8;
       c4gm:
           R1 = ()_closure+1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.166601 UTC

[section "data" {
     lvl1_r45J_closure:
         const lvl1_r45J_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4gL_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,80,114,111,112,101,114,116,105,101,115,47,68,101,99,111,109,112,111,115,101,46,104,115,58,40,51,51,44,49,41,45,40,51,52,44,53,48,41,124,102,117,110,99,116,105,111,110,32,105,115,68,101,99,111,109,112,111,115,97,98,108,101]
 },
 lvl1_r45J_entry() //  [R1]
         { info_tbl: [(c4gM,
                       label: lvl1_r45J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4gM:
           _r45J::P64 = R1;
           goto c4gG;
       c4gG:
           if ((old + 0) - <highSp> < SpLim) goto c4gN; else goto c4gO;
       c4gN:
           R1 = _r45J::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4gO:
           (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45J::P64);
           if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
       c4gK:
           call (I64[_r45J::P64])() args: 8, res: 0, upd: 8;
       c4gJ:
           I64[(old + 24)] = stg_bh_upd_frame_info;
           I64[(old + 16)] = _c4gI::I64;
           R2 = c4gL_str;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.16742 UTC

{offset
  c4gM:
      _r45J::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4gN; else goto c4gO;
  c4gN:
      R1 = _r45J::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4gO:
      (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45J::P64);
      if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
  c4gK:
      call (I64[_r45J::P64])() args: 8, res: 0, upd: 8;
  c4gJ:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c4gI::I64;
      R2 = c4gL_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.16907 UTC

{offset
  c4gM:
      _r45J::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4gN; else goto c4gO;
  c4gN:
      R1 = _r45J::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4gO:
      (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45J::P64);
      if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
  c4gK:
      call (I64[_r45J::P64])() args: 8, res: 0, upd: 8;
  c4gJ:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c4gI::I64;
      R2 = c4gL_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.169804 UTC

{offset
  c4gM:
      _r45J::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c4gN; else goto c4gO;
  c4gN:
      R1 = _r45J::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4gO:
      (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45J::P64);
      if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
  c4gK:
      call (I64[_r45J::P64])() args: 8, res: 0, upd: 8;
  c4gJ:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c4gI::I64;
      R2 = c4gL_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.170483 UTC

{offset
  c4gM:
      if ((Sp + -16) < SpLim) goto c4gN; else goto c4gO;
  c4gN:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4gO:
      (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
      if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
  c4gK:
      call (I64[R1])() args: 8, res: 0, upd: 8;
  c4gJ:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c4gI::I64;
      R2 = c4gL_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.171282 UTC

[(c4gJ, {patError_closure}), (c4gK, {}),
 (c4gM, {patError_closure}), (c4gN, {}), (c4gO, {patError_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.171842 UTC

lvl1_r45J_entry() //  [R1]
        { info_tbl: [(c4gM,
                      label: lvl1_r45J_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4gM:
          if ((Sp + -16) < SpLim) goto c4gN; else goto c4gO;
      c4gN:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4gO:
          (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
      c4gK:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c4gJ:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c4gI::I64;
          R2 = c4gL_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.172529 UTC

lvl1_r45J_entry() //  [R1]
        { info_tbl: [(c4gM,
                      label: lvl1_r45J_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4gM:
          if ((Sp + -16) < SpLim) goto c4gN; else goto c4gO;
      c4gN:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4gO:
          (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
      c4gK:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c4gJ:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c4gI::I64;
          R2 = c4gL_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.173232 UTC

[section "data" {
     lvl1_r45J_closure:
         const lvl1_r45J_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4gL_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,80,114,111,112,101,114,116,105,101,115,47,68,101,99,111,109,112,111,115,101,46,104,115,58,40,51,51,44,49,41,45,40,51,52,44,53,48,41,124,102,117,110,99,116,105,111,110,32,105,115,68,101,99,111,109,112,111,115,97,98,108,101]
 },
 lvl1_r45J_entry() //  [R1]
         { info_tbl: [(c4gM,
                       label: lvl1_r45J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4gM:
           if ((Sp + -16) < SpLim) goto c4gN; else goto c4gO;
       c4gN:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4gO:
           (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
       c4gK:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c4gJ:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4gI::I64;
           R2 = c4gL_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.173988 UTC

[section "data" {
     lvl1_r45J_closure:
         const lvl1_r45J_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4gL_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,80,114,111,112,101,114,116,105,101,115,47,68,101,99,111,109,112,111,115,101,46,104,115,58,40,51,51,44,49,41,45,40,51,52,44,53,48,41,124,102,117,110,99,116,105,111,110,32,105,115,68,101,99,111,109,112,111,115,97,98,108,101]
 },
 lvl1_r45J_entry() //  [R1]
         { info_tbl: [(c4gM,
                       label: lvl1_r45J_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4gM:
           if ((Sp + -16) < SpLim) goto c4gN; else goto c4gO;
       c4gN:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4gO:
           (_c4gI::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4gI::I64 == 0) goto c4gK; else goto c4gJ;
       c4gK:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c4gJ:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4gI::I64;
           R2 = c4gL_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.177166 UTC

[section "data" {
     lvl2_r45K_closure:
         const lvl2_r45K_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4h0_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,73,110,116,101,114,110,97,108,47,78,111,114,109,97,108,105,122,101,83,116,114,101,97,109,46,104,115,58,40,49,48,48,44,57,41,45,40,49,50,55,44,51,56,41,124,102,117,110,99,116,105,111,110,32,114,101,111,114,100,101,114]
 },
 lvl2_r45K_entry() //  [R1]
         { info_tbl: [(c4h1,
                       label: lvl2_r45K_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4h1:
           _r45K::P64 = R1;
           goto c4gV;
       c4gV:
           if ((old + 0) - <highSp> < SpLim) goto c4h2; else goto c4h3;
       c4h2:
           R1 = _r45K::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4h3:
           (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45K::P64);
           if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
       c4gZ:
           call (I64[_r45K::P64])() args: 8, res: 0, upd: 8;
       c4gY:
           I64[(old + 24)] = stg_bh_upd_frame_info;
           I64[(old + 16)] = _c4gX::I64;
           R2 = c4h0_str;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.178179 UTC

{offset
  c4h1:
      _r45K::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4h2; else goto c4h3;
  c4h2:
      R1 = _r45K::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4h3:
      (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45K::P64);
      if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
  c4gZ:
      call (I64[_r45K::P64])() args: 8, res: 0, upd: 8;
  c4gY:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c4gX::I64;
      R2 = c4h0_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.17884 UTC

{offset
  c4h1:
      _r45K::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4h2; else goto c4h3;
  c4h2:
      R1 = _r45K::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4h3:
      (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45K::P64);
      if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
  c4gZ:
      call (I64[_r45K::P64])() args: 8, res: 0, upd: 8;
  c4gY:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c4gX::I64;
      R2 = c4h0_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.179486 UTC

{offset
  c4h1:
      _r45K::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c4h2; else goto c4h3;
  c4h2:
      R1 = _r45K::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4h3:
      (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r45K::P64);
      if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
  c4gZ:
      call (I64[_r45K::P64])() args: 8, res: 0, upd: 8;
  c4gY:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c4gX::I64;
      R2 = c4h0_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.180201 UTC

{offset
  c4h1:
      if ((Sp + -16) < SpLim) goto c4h2; else goto c4h3;
  c4h2:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4h3:
      (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
      if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
  c4gZ:
      call (I64[R1])() args: 8, res: 0, upd: 8;
  c4gY:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c4gX::I64;
      R2 = c4h0_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.180879 UTC

[(c4gY, {patError_closure}), (c4gZ, {}),
 (c4h1, {patError_closure}), (c4h2, {}), (c4h3, {patError_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.181475 UTC

lvl2_r45K_entry() //  [R1]
        { info_tbl: [(c4h1,
                      label: lvl2_r45K_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4h1:
          if ((Sp + -16) < SpLim) goto c4h2; else goto c4h3;
      c4h2:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4h3:
          (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
      c4gZ:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c4gY:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c4gX::I64;
          R2 = c4h0_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.18233 UTC

lvl2_r45K_entry() //  [R1]
        { info_tbl: [(c4h1,
                      label: lvl2_r45K_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4h1:
          if ((Sp + -16) < SpLim) goto c4h2; else goto c4h3;
      c4h2:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4h3:
          (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
      c4gZ:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c4gY:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c4gX::I64;
          R2 = c4h0_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.183052 UTC

[section "data" {
     lvl2_r45K_closure:
         const lvl2_r45K_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4h0_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,73,110,116,101,114,110,97,108,47,78,111,114,109,97,108,105,122,101,83,116,114,101,97,109,46,104,115,58,40,49,48,48,44,57,41,45,40,49,50,55,44,51,56,41,124,102,117,110,99,116,105,111,110,32,114,101,111,114,100,101,114]
 },
 lvl2_r45K_entry() //  [R1]
         { info_tbl: [(c4h1,
                       label: lvl2_r45K_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4h1:
           if ((Sp + -16) < SpLim) goto c4h2; else goto c4h3;
       c4h2:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4h3:
           (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
       c4gZ:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c4gY:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4gX::I64;
           R2 = c4h0_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.183815 UTC

[section "data" {
     lvl2_r45K_closure:
         const lvl2_r45K_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c4h0_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,73,110,116,101,114,110,97,108,47,78,111,114,109,97,108,105,122,101,83,116,114,101,97,109,46,104,115,58,40,49,48,48,44,57,41,45,40,49,50,55,44,51,56,41,124,102,117,110,99,116,105,111,110,32,114,101,111,114,100,101,114]
 },
 lvl2_r45K_entry() //  [R1]
         { info_tbl: [(c4h1,
                       label: lvl2_r45K_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4h1:
           if ((Sp + -16) < SpLim) goto c4h2; else goto c4h3;
       c4h2:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4h3:
           (_c4gX::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c4gX::I64 == 0) goto c4gZ; else goto c4gY;
       c4gZ:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c4gY:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c4gX::I64;
           R2 = c4h0_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.186657 UTC

[section "data" {
     $wnormalize_closure:
         const $wnormalize_info;
         const 0;
 },
 $wnormalize_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 40 updfr_space: Just 8
         }
     {offset
       c4ha:
           _r0::P64 = R1;
           _s463::P64 = P64[(old + 40)];
           _s464::P64 = P64[(old + 32)];
           _s465::I64 = I64[(old + 24)];
           _s466::I64 = I64[(old + 16)];
           R5 = _s466::I64;
           R4 = _s465::I64;
           R3 = _s464::P64;
           R2 = _s463::P64;
           R1 = _r0::P64;
           call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s46t_entry() //  [R1]
         { info_tbl: [(c4iC,
                       label: sat_s46t_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iC:
           _s46t::P64 = R1;
           goto c4iw;
       c4iw:
           if ((old + 0) - <highSp> < SpLim) goto c4iD; else goto c4iE;
       c4iD:
           R1 = _s46t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4iE:
           I64[(old + 24)] = stg_upd_frame_info;
           P64[(old + 16)] = _s46t::P64;
           _s46m::P64 = P64[_s46t::P64 + 16];
           _s46n::I64 = I64[_s46t::P64 + 24];
           _s46r::I64 = _s46n::I64;
           if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
       c4iA:
           _c4iG::I64 = _s46r::I64 + 1;
           _s46s::I64 = _c4iG::I64;
           R2 = _s46s::I64;
           R1 = _s46m::P64;
           call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
       c4iB:
           R1 = []_closure+1;
           call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s46q_entry() //  [R1]
         { info_tbl: [(c4iN,
                       label: sat_s46q_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iN:
           _s46q::P64 = R1;
           goto c4iK;
       c4iK:
           if ((old + 0) - <highSp> < SpLim) goto c4iO; else goto c4iP;
       c4iO:
           R1 = _s46q::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4iP:
           goto c4iJ;
       c4iJ:
           _s46l::P64 = P64[_s46q::P64 + 7];
           _s46n::I64 = I64[_s46q::P64 + 15];
           I32[(_s46l::P64 + 16) + (_s46n::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
           R1 = ()_closure+1;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
     }
 },
 go1_s46m_entry() //  [R2, R1]
         { info_tbl: [(c4iR,
                       label: go1_s46m_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iR:
           _s46n::I64 = R2;
           _s46m::P64 = R1;
           goto c4is;
       c4is:
           if ((old + 0) - <highSp> < SpLim) goto c4iS; else goto c4iT;
       c4iT:
           goto c4ir;
       c4ir:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c4iV; else goto c4iU;
       c4iV:
           HpAlloc = 80;
           goto c4iS;
       c4iS:
           R2 = _s46n::I64;
           R1 = _s46m::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4iU:
           _s46l::P64 = P64[_s46m::P64 + 7];
           I64[Hp - 72] = sat_s46t_info;
           P64[Hp - 56] = _s46m::P64;
           I64[Hp - 48] = _s46n::I64;
           _c4iu::P64 = Hp - 72;
           I64[Hp - 40] = sat_s46q_info;
           P64[Hp - 32] = _s46l::P64;
           I64[Hp - 24] = _s46n::I64;
           _c4iH::P64 = Hp - 39;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _c4iH::P64;
           P64[Hp] = _c4iu::P64;
           _c4iQ::P64 = Hp - 14;
           R1 = _c4iQ::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl3_s46H_entry() //  [R1]
         { info_tbl: [(c4j0,
                       label: lvl3_s46H_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4j0:
           _s46H::P64 = R1;
           goto c4iW;
       c4iW:
           if ((old + 0) - <highSp> < SpLim) goto c4j1; else goto c4j2;
       c4j1:
           R1 = _s46H::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4j2:
           I64[(old + 24)] = stg_upd_frame_info;
           P64[(old + 16)] = _s46H::P64;
           _s46G::I64 = I64[_s46H::P64 + 16];
           _c4iY::I64 = %MO_S_Lt_W64(_s46G::I64, 0);
           _s46I::I64 = _c4iY::I64;
           R1 = I64[Bool_closure_tbl + (_s46I::I64 << 3)];
           call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $s$wa_s481_entry() //  [R3, R2, R1]
         { info_tbl: [(c4jE,
                       label: $s$wa_s481_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 3 fun_type: ArgSpec 12} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4jE:
           _s483::I64 = R3;
           _s482::I64 = R2;
           _s481::P64 = R1;
           goto c4jA;
       c4jA:
           if ((old + 0) - <highSp> < SpLim) goto c4jF; else goto c4jG;
       c4jG:
           goto c4jz;
       c4jz:
           Hp = Hp + 16;
           if (Hp > HpLim) goto c4jI; else goto c4jH;
       c4jI:
           HpAlloc = 16;
           goto c4jF;
       c4jF:
           R3 = _s483::I64;
           R2 = _s482::I64;
           R1 = _s481::P64;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4jH:
           _s46l::P64 = P64[_s481::P64 + 5];
           _s46A::P64 = P64[_s481::P64 + 13];
           _s47j::I64 = I64[_s481::P64 + 21];
           _c4jC::I64 = %MO_S_Ge_W64(_s483::I64, _s47j::I64);
           _s485::I64 = _c4jC::I64;
           if (_s485::I64 >= 1) goto c4k5; else goto c4k6;
       c4k5:
           goto c4k3;
       c4k3:
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s482::I64;
           _c4k2::P64 = Hp - 7;
           R1 = _c4k2::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
       c4k6:
           goto c4jX;
       c4jX:
           _s489::I64 = %MO_UU_Conv_W32_W64(I32[(_s46l::P64 + 16) + (_s483::I64 << 2)]);
           _s489::I64 = _s489::I64;
           _c4jM::I64 = _s489::I64;
           _s48a::I64 = _c4jM::I64;
           _c4jP::I64 = %MO_S_Lt_W64(_s48a::I64, 65536);
           _s48b::I64 = _c4jP::I64;
           if (_s48b::I64 >= 1) goto c4jZ; else goto c4k0;
       c4jZ:
           goto c4jV;
       c4jV:
           _c4k9::I64 = _s48a::I64;
           _s48r::I64 = _c4k9::I64;
           _c4kc::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48r::I64));
           _s48s::I64 = _c4kc::I64;
           I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48s::I64);
           _c4kh::I64 = _s483::I64 + 1;
           _s48v::I64 = _c4kh::I64;
           _c4kk::I64 = _s482::I64 + 1;
           _s48u::I64 = _c4kk::I64;
           Hp = Hp - 16;
           R3 = _s48v::I64;
           R2 = _s48u::I64;
           R1 = _s481::P64;
           call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4k0:
           goto c4jU;
       c4jU:
           _c4kl::I64 = _s48a::I64 - 65536;
           _s48d::I64 = _c4kl::I64;
           _c4ko::I64 = %MO_S_Shr_W64(_s48d::I64, 10);
           _s48e::I64 = _c4ko::I64;
           _c4kr::I64 = _s48e::I64 + 55296;
           _s48f::I64 = _c4kr::I64;
           _c4ku::I64 = _s48f::I64;
           _s48g::I64 = _c4ku::I64;
           _c4kx::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48g::I64));
           _s48h::I64 = _c4kx::I64;
           I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48h::I64);
           _c4kC::I64 = _s48d::I64 & 1023;
           _s48k::I64 = _c4kC::I64;
           _c4kF::I64 = _s48k::I64 + 56320;
           _s48l::I64 = _c4kF::I64;
           _c4kI::I64 = _s48l::I64;
           _s48m::I64 = _c4kI::I64;
           _c4kL::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48m::I64));
           _s48n::I64 = _c4kL::I64;
           _c4kO::I64 = _s482::I64 + 1;
           _s48j::I64 = _c4kO::I64;
           I16[(_s46A::P64 + 16) + (_s48j::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48n::I64);
           _c4kT::I64 = _s483::I64 + 1;
           _s48q::I64 = _c4kT::I64;
           _c4kW::I64 = _s482::I64 + 2;
           _s48p::I64 = _c4kW::I64;
           Hp = Hp - 16;
           R3 = _s48q::I64;
           R2 = _s48p::I64;
           R1 = _s481::P64;
           call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s49l_entry() //  [R1]
         { info_tbl: [(c4kX,
                       label: sat_s49l_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4kX:
           _s49l::P64 = R1;
           goto c4hn;
       c4hn:
           if ((old + 0) - <highSp> < SpLim) goto c4kY; else goto c4kZ;
       c4kY:
           R1 = _s49l::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4kZ:
           goto c4hm;
       c4hm:
           _s464::P64 = P64[_s49l::P64 + 7];
           _s465::I64 = I64[_s49l::P64 + 15];
           _s466::I64 = I64[_s49l::P64 + 23];
           _c4hp::I64 = _s466::I64 + 11;
           _s46a::I64 = _c4hp::I64;
           _c4hs::I64 = %MO_S_Lt_W64(_s46a::I64, 0);
           _s46b::I64 = _c4hs::I64;
           if (_s46b::I64 >= 1) goto c4pB; else goto c4pC;
       c4pB:
           goto c4pz;
       c4pz:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4pC:
           goto c4py;
       c4py:
           _c4hx::I64 = _s46a::I64 & 4611686018427387904;
           _s46d::I64 = _c4hx::I64;
           if (_s46d::I64 != 0) goto c4l2; else goto c4l6;
       c4l2:
           goto c4l3;
       c4l3:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4l6:
           goto c4hC;
       c4hC:
           _c4hE::I64 = _s46a::I64 << 1;
           _s46f::I64 = _c4hE::I64;
           I64[(young<c4hH> + 8)] = c4hH;
           R1 = _s46f::I64;
           call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
       c4hH:
           _s46i::P64 = R1;
           Hp = Hp + 80;
           if (Hp > HpLim) goto c4la; else goto c4l9;
       c4la:
           HpAlloc = 80;
           goto c4l8;
       c4l8:
           R1 = _s46i::P64;
           call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
       c4l9:
           I64[Hp - 72] = stg_ARR_WORDS_info;
           I64[Hp - 64] = 48;
           _s46l::P64 = Hp - 72;
           _s46l::P64 = _s46l::P64;
           _c4hJ::P64 = Hp - 7;
           I64[Hp - 8] = go1_s46m_info;
           P64[Hp] = _s46l::P64;
           I64[(young<c4hL> + 8)] = c4hL;
           R2 = 0;
           R1 = _c4hJ::P64;
           call go1_s46m_info(R2,
                              R1) returns to c4hL, args: 8, res: 8, upd: 8;
       c4hL:
           _s46u::P64 = R1;
           I64[(young<c4hP> + 8)] = c4hP;
           R2 = _s46u::P64;
           call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
       c4hP:
           _s46x::P64 = R1;
           _c4hR::I64 = _s465::I64 + _s466::I64;
           _s46y::I64 = _c4hR::I64;
           _c4pD::I64 = _s46a::I64 - 1;
           _s49j::I64 = _c4pD::I64;
           _s46E::I64 = 0;
           _s46D::I64 = 0;
           _s46C::I64 = _s465::I64;
           _s46B::I64 = _s49j::I64;
           _s46A::P64 = _s46i::P64;
           goto s46z;
       s46z:
           goto c4hW;
       c4hW:
           Hp = Hp + 24;
           if (Hp > HpLim) goto c4lf; else goto c4le;
       c4lf:
           HpAlloc = 24;
           goto c4ld;
       c4ld:
           I64[(young<c4hX> + 8)] = c4hX;
           call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
       c4hX:
           goto c4hW;
       c4le:
           _c4hZ::I64 = _s46B::I64 * 2;
           _s46G::I64 = _c4hZ::I64;
           I64[Hp - 16] = lvl3_s46H_info;
           I64[Hp] = _s46G::I64;
           _c4i2::P64 = Hp - 16;
           _s47j::I64 = _s46E::I64;
           _s47i::I64 = _s46D::I64;
           _s47h::I64 = _s46C::I64;
           goto s47g;
       s47g:
           goto c4ic;
       c4ic:
           Hp = Hp + 48;
           if (Hp > HpLim) goto c4mx; else goto c4mw;
       c4mx:
           HpAlloc = 48;
           goto c4mv;
       c4mv:
           I64[(young<c4id> + 8)] = c4id;
           call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
       c4id:
           goto c4ic;
       c4mw:
           _c4if::I64 = _s47i::I64 + 11;
           _s47l::I64 = _c4if::I64;
           _c4ii::I64 = %MO_S_Lt_W64(_s46B::I64, _s47l::I64);
           _s47m::I64 = _c4ii::I64;
           if (_s47m::I64 >= 1) goto c4pv; else goto c4pw;
       c4pv:
           goto c4pt;
       c4pt:
           I64[Hp - 40] = I#_con_info;
           I64[Hp - 32] = _s47j::I64;
           _c4io::P64 = Hp - 39;
           I64[Hp - 24] = I#_con_info;
           I64[Hp - 16] = _s47i::I64;
           _c4ip::P64 = Hp - 23;
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s47h::I64;
           _c4iq::P64 = Hp - 7;
           _B2::P64 = _c4io::P64;
           _B3::P64 = _c4ip::P64;
           _B4::P64 = _c4iq::P64;
           goto s47f;
       s47f:
           goto c4ms;
       c4ms:
           _s477::P64 = _B2::P64;
           _s476::P64 = _B3::P64;
           _s475::P64 = _B4::P64;
           goto s474;
       s474:
           goto c4m6;
       c4m6:
           I64[(young<c4m8> + 8)] = c4m8;
           R1 = _s475::P64;
           if (R1 & 7 != 0) goto c4m8; else goto c4m9;
       c4m9:
           call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
       c4m8:
           _s479::P64 = R1;
           _s47a::I64 = I64[_s479::P64 + 7];
           I64[(young<c4md> + 8)] = c4md;
           R1 = _s476::P64;
           if (R1 & 7 != 0) goto c4md; else goto c4me;
       c4me:
           call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
       c4md:
           _s47b::P64 = R1;
           _s47c::I64 = I64[_s47b::P64 + 7];
           I64[(young<c4mi> + 8)] = c4mi;
           R1 = _s477::P64;
           if (R1 & 7 != 0) goto c4mi; else goto c4mm;
       c4mm:
           call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
       c4mi:
           _s47d::P64 = R1;
           _s47e::I64 = I64[_s47d::P64 + 7];
           _s46M::I64 = _s47e::I64;
           _s46L::I64 = _s47c::I64;
           _s46K::I64 = _s47a::I64;
           goto s46J;
       s46J:
           goto c4lg;
       c4lg:
           I64[(young<c4lj> + 8)] = c4lj;
           R1 = _c4i2::P64;
           if (R1 & 7 != 0) goto c4lj; else goto c4ll;
       c4ll:
           call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
       c4lj:
           _s46O::P64 = R1;
           _c4m1::P64 = _s46O::P64 & 7;
           if (_c4m1::P64 >= 2) goto c4m3; else goto c4m4;
       c4m3:
           goto c4m0;
       c4m0:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4m4:
           goto c4lW;
       c4lW:
           _c4lq::I64 = _s46G::I64 & 4611686018427387904;
           _s46P::I64 = _c4lq::I64;
           if (_s46P::I64 != 0) goto c4lv; else goto c4lB;
       c4lv:
           goto c4lw;
       c4lw:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4lB:
           goto c4lC;
       c4lC:
           _c4lF::I64 = _s46G::I64 << 1;
           _s46R::I64 = _c4lF::I64;
           I64[(young<c4lI> + 8)] = c4lI;
           R1 = _s46R::I64;
           call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
       c4lI:
           _s46U::P64 = R1;
           _c4lL::I64 = %MO_S_Le_W64(_s46L::I64, 0);
           _s46V::I64 = _c4lL::I64;
           if (_s46V::I64 >= 1) goto c4lT; else goto c4lU;
       c4lT:
           goto c4lR;
       c4lR:
           _c4pG::I64 = _s46G::I64 - 1;
           _s472::I64 = _c4pG::I64;
           _s46E::I64 = _s46M::I64;
           _s46D::I64 = _s46L::I64;
           _s46C::I64 = _s46K::I64;
           _s46B::I64 = _s472::I64;
           _s46A::P64 = _s46U::P64;
           goto s46z;
       c4lU:
           goto c4lQ;
       c4lQ:
           _c4pH::I64 = _s46L::I64;
           _s46Y::I64 = _c4pH::I64;
           _c4pK::I64 = _hs_text_memcpy;
           _c4pL::P64 = _s46U::P64 + 16;
           _c4pM::I64 = 0;
           _c4pN::P64 = _s46A::P64 + 16;
           _c4pO::I64 = 0;
           _c4pP::I64 = _s46Y::I64;
           call "ccall" arg hints:  [PtrHint, , PtrHint,
                                     ,]  result hints:  [] (_c4pK::I64)(_c4pL::P64, _c4pM::I64, _c4pN::P64, _c4pO::I64, _c4pP::I64);
           _c4pQ::I64 = _s46G::I64 - 1;
           _s471::I64 = _c4pQ::I64;
           _s46E::I64 = _s46M::I64;
           _s46D::I64 = _s46L::I64;
           _s46C::I64 = _s46K::I64;
           _s46B::I64 = _s471::I64;
           _s46A::P64 = _s46U::P64;
           goto s46z;
       c4pw:
           goto c4pp;
       c4pp:
           _c4j3::I64 = %MO_S_Ge_W64(_s47h::I64, _s46y::I64);
           _s47o::I64 = _c4j3::I64;
           if (_s47o::I64 >= 1) goto c4pr; else goto c4ps;
       c4pr:
           goto c4pn;
       c4pn:
           _s499::P64 = _s46A::P64;
           _s499::P64 = _s499::P64;
           _s49a::I64 = _s47i::I64;
           if (_s49a::I64 != 0) goto c4pe; else goto c4ph;
       c4pe:
           I64[Hp - 40] = Text_con_info;
           P64[Hp - 32] = _s499::P64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s49a::I64;
           _c4pc::P64 = Hp - 39;
           Hp = Hp - 16;
           R1 = _c4pc::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
       c4ph:
           Hp = Hp - 48;
           I64[(young<c4pg> + 8)] = c4pg;
           R1 = empty_closure;
           if (R1 & 7 != 0) goto c4pg; else goto c4pi;
       c4pi:
           call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
       c4pg:
           _s49c::P64 = R1;
           _s49d::P64 = P64[_s49c::P64 + 7];
           _s49e::I64 = I64[_s49c::P64 + 15];
           _s49f::I64 = I64[_s49c::P64 + 23];
           R1 = _s49c::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
       c4ps:
           goto c4p5;
       c4p5:
           _c4j8::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
           _s47q::I64 = _c4j8::I64;
           _c4oL::I64 = _s47q::I64 >= 55296;
           _s48M::I64 = _c4oL::I64;
           if (_s48M::I64 >= 1) goto c4p7; else goto c4p8;
       c4p7:
           goto c4p0;
       c4p0:
           _c4oT::I64 = _s47q::I64 <= 56319;
           _s48R::I64 = _c4oT::I64;
           if (_s48R::I64 >= 1) goto c4p2; else goto c4p3;
       c4p2:
           goto c4oZ;
       c4oZ:
           _c4pT::I64 = _s47h::I64 + 1;
           _s48W::I64 = _c4pT::I64;
           _c4pW::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s48W::I64 << 1)]);
           _s48X::I64 = _c4pW::I64;
           _c4pZ::I64 = _s47h::I64 + 2;
           _s496::I64 = _c4pZ::I64;
           _c4q2::I64 = _s48X::I64;
           _s491::I64 = _c4q2::I64;
           _c4q5::I64 = _s491::I64 - 56320;
           _s492::I64 = _c4q5::I64;
           _c4q8::I64 = _s47q::I64;
           _s48Y::I64 = _c4q8::I64;
           _c4qb::I64 = _s48Y::I64 - 55296;
           _s48Z::I64 = _c4qb::I64;
           _c4qe::I64 = _s48Z::I64 << 10;
           _s490::I64 = _c4qe::I64;
           _c4qh::I64 = _s490::I64 + _s492::I64;
           _s493::I64 = _c4qh::I64;
           _c4qk::I64 = _s493::I64 + 65536;
           _s494::I64 = _c4qk::I64;
           _c4qn::I64 = _s494::I64;
           _s495::I64 = _c4qn::I64;
           Hp = Hp - 48;
           _s47t::I64 = _s496::I64;
           _s47s::I64 = _s495::I64;
           goto s47r;
       c4p3:
           goto c4oY;
       c4oY:
           _c4qo::I64 = _s47h::I64 + 1;
           _s48V::I64 = _c4qo::I64;
           _c4qr::I64 = _s47q::I64;
           _s48T::I64 = _c4qr::I64;
           _c4qu::I64 = _s48T::I64;
           _s48U::I64 = _c4qu::I64;
           Hp = Hp - 48;
           _s47t::I64 = _s48V::I64;
           _s47s::I64 = _s48U::I64;
           goto s47r;
       c4p8:
           goto c4oQ;
       c4oQ:
           _c4qv::I64 = _s47h::I64 + 1;
           _s48Q::I64 = _c4qv::I64;
           _c4qy::I64 = _s47q::I64;
           _s48O::I64 = _c4qy::I64;
           _c4qB::I64 = _s48O::I64;
           _s48P::I64 = _c4qB::I64;
           Hp = Hp - 48;
           _s47t::I64 = _s48Q::I64;
           _s47s::I64 = _s48P::I64;
           goto s47r;
       s47r:
           goto c4jd;
       c4jd:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4mA; else goto c4mz;
       c4mA:
           HpAlloc = 32;
           goto c4my;
       c4my:
           I64[(young<c4je> + 8)] = c4je;
           call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
       c4je:
           goto c4jd;
       c4mz:
           _c4jg::I64 = _s47s::I64;
           _s47v::I64 = _c4jg::I64;
           _c4jl::I64 = %MO_S_Ge_W64(_s47v::I64, 44032);
           _s47X::I64 = _c4jl::I64;
           if (_s47X::I64 >= 1) goto c4oJ; else goto c4oK;
       c4oJ:
           goto c4oE;
       c4oE:
           _c4jr::I64 = %MO_S_Le_W64(_s47v::I64, 55203);
           _s47Z::I64 = _c4jr::I64;
           if (_s47Z::I64 >= 1) goto c4oG; else goto c4oH;
       c4oG:
           goto c4ot;
       c4ot:
           _c4jx::P64 = Hp - 21;
           I64[Hp - 24] = $s$wa_s481_info;
           P64[Hp - 16] = _s46l::P64;
           P64[Hp - 8] = _s46A::P64;
           I64[Hp] = _s47j::I64;
           I64[(young<c4o9> + 8)] = c4o9;
           R3 = 0;
           R2 = _s47i::I64;
           R1 = _c4jx::P64;
           call $s$wa_s481_info(R3,
                                R2,
                                R1) returns to c4o9, args: 8, res: 8, upd: 8;
       c4o9:
           _s48z::P64 = R1;
           I64[(young<c4ob> + 8)] = c4ob;
           R1 = _s48z::P64;
           if (R1 & 7 != 0) goto c4ob; else goto c4oc;
       c4oc:
           call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
       c4ob:
           _s48A::P64 = R1;
           _s48B::I64 = I64[_s48A::P64 + 7];
           I64[(young<c4og> + 8)] = c4og;
           R4 = _s47s::I64;
           R3 = _s48B::I64;
           R2 = _s46A::P64;
           call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
       c4og:
           _s48E::P64 = R1;
           I64[(young<c4oi> + 8)] = c4oi;
           R1 = _s48E::P64;
           if (R1 & 7 != 0) goto c4oi; else goto c4oj;
       c4oj:
           call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
       c4oi:
           _s48F::P64 = R1;
           _s48G::P64 = P64[_s48F::P64 + 7];
           _s48H::P64 = P64[_s48F::P64 + 15];
           I64[(young<c4on> + 8)] = c4on;
           R1 = _s48G::P64;
           if (R1 & 7 != 0) goto c4on; else goto c4oo;
       c4oo:
           call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
       c4on:
           _s48I::P64 = R1;
           _s48J::I64 = I64[_s48I::P64 + 7];
           I64[(young<c4os> + 8)] = c4os;
           R1 = _s48H::P64;
           if (R1 & 7 != 0) goto c4os; else goto c4oz;
       c4oz:
           call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
       c4os:
           _s48K::P64 = R1;
           _s48L::I64 = I64[_s48K::P64 + 7];
           _s47j::I64 = _s48L::I64;
           _s47i::I64 = _s48J::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4oH:
           goto c4o8;
       c4o8:
           Hp = Hp - 32;
           goto s47w;
       c4oK:
           goto c4o6;
       c4o6:
           Hp = Hp - 32;
           goto s47w;
       s47w:
           goto c4mC;
       c4mC:
           _c4mF::I64 = %MO_S_Lt_W64(_s47v::I64, 192);
           _s47y::I64 = _c4mF::I64;
           if (_s47y::I64 >= 1) goto c4o3; else goto c4o4;
       c4o3:
           goto c4nY;
       c4nY:
           _s47N::I64 = _s47j::I64;
           if (%MO_S_Lt_W64(_s47N::I64, 1)) goto c4o0; else goto c4o1;
       c4o0:
           if (_s47N::I64 != 0) goto c4nx; else goto c4ny;
       c4ny:
           _c4qC::I64 = _s47i::I64 + 1;
           _s47P::I64 = _c4qC::I64;
           _s47j::I64 = 1;
           _s47i::I64 = _s47P::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4o1:
           if (_s47N::I64 != 1) goto c4nx; else goto c4nU;
       c4nx:
           R1 = lvl2_r45K_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4nU:
           _c4nC::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
           _s47Q::I64 = _c4nC::I64;
           if (_s47Q::I64 >= 1) goto c4nW; else goto c4nX;
       c4nW:
           goto c4nT;
       c4nT:
           _c4qE::I64 = _s47i::I64 + 1;
           _s47W::I64 = _c4qE::I64;
           _s47j::I64 = 0;
           _s47i::I64 = _s47W::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4nX:
           goto c4nP;
       c4nP:
           _c4nH::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
           _s47S::I64 = _c4nH::I64;
           if (_s47S::I64 >= 1) goto c4nR; else goto c4nS;
       c4nR:
           goto c4nN;
       c4nN:
           _c4qH::I64 = _s47i::I64 + 1;
           _s47V::I64 = _c4qH::I64;
           _s47j::I64 = 0;
           _s47i::I64 = _s47V::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4nS:
           goto c4nM;
       c4nM:
           _c4qI::I64 = _s47i::I64 + 2;
           _s47U::I64 = _c4qI::I64;
           _s47j::I64 = 0;
           _s47i::I64 = _s47U::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4o4:
           goto c4nq;
       c4nq:
           _c4mK::I64 = %MO_S_Le_W64(_s47v::I64, 195101);
           _s47A::I64 = _c4mK::I64;
           if (_s47A::I64 >= 1) goto c4ns; else goto c4nt;
       c4ns:
           goto c4nl;
       c4nl:
           _s47D::I64 = _s47j::I64;
           if (%MO_S_Lt_W64(_s47D::I64, 1)) goto c4nn; else goto c4no;
       c4nn:
           if (_s47D::I64 != 0) goto c4mU; else goto c4mV;
       c4mV:
           _c4qJ::I64 = _s47i::I64 + 1;
           _s47F::I64 = _c4qJ::I64;
           _s47j::I64 = 1;
           _s47i::I64 = _s47F::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4no:
           if (_s47D::I64 != 1) goto c4mU; else goto c4nh;
       c4mU:
           R1 = lvl2_r45K_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4nh:
           _c4mZ::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
           _s47G::I64 = _c4mZ::I64;
           if (_s47G::I64 >= 1) goto c4nj; else goto c4nk;
       c4nj:
           goto c4ng;
       c4ng:
           _c4qL::I64 = _s47i::I64 + 1;
           _s47M::I64 = _c4qL::I64;
           _s47j::I64 = 0;
           _s47i::I64 = _s47M::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4nk:
           goto c4nc;
       c4nc:
           _c4n4::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
           _s47I::I64 = _c4n4::I64;
           if (_s47I::I64 >= 1) goto c4ne; else goto c4nf;
       c4ne:
           goto c4na;
       c4na:
           _c4qO::I64 = _s47i::I64 + 1;
           _s47L::I64 = _c4qO::I64;
           _s47j::I64 = 0;
           _s47i::I64 = _s47L::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4nf:
           goto c4n9;
       c4n9:
           _c4qP::I64 = _s47i::I64 + 2;
           _s47K::I64 = _c4qP::I64;
           _s47j::I64 = 0;
           _s47i::I64 = _s47K::I64;
           _s47h::I64 = _s47t::I64;
           goto s47g;
       c4nt:
           goto c4mP;
       c4mP:
           R1 = lvl1_r45J_closure;
           call (I64[R1])(R1) args: 8, res: 0, upd: 8;
     }
 },
 $wnormalize_entry() //  [R5, R4, R3, R2]
         { info_tbl: [(c4qU,
                       label: $wnormalize_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4qU:
           _s466::I64 = R5;
           _s465::I64 = R4;
           _s464::P64 = R3;
           _s463::P64 = R2;
           goto c4hc;
       c4hc:
           if ((old + 0) - <highSp> < SpLim) goto c4qV; else goto c4qW;
       c4qV:
           R1 = $wnormalize_closure;
           P64[(old + 40)] = _s463::P64;
           P64[(old + 32)] = _s464::P64;
           I64[(old + 24)] = _s465::I64;
           I64[(old + 16)] = _s466::I64;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c4qW:
           goto c4hb;
       c4hb:
           I64[(young<c4he> + 8)] = c4he;
           R1 = _s463::P64;
           if (R1 & 7 != 0) goto c4he; else goto c4hf;
       c4hf:
           call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
       c4he:
           _s467::P64 = R1;
           _c4qT::P64 = _s467::P64 & 7;
           if (_c4qT::P64 != 1) goto c4qR; else goto c4qS;
       c4qR:
           R1 = lvl_r3Nn_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4qS:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4r1; else goto c4r0;
       c4r1:
           HpAlloc = 32;
           goto c4qZ;
       c4qZ:
           R1 = _s467::P64;
           call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
       c4r0:
           I64[Hp - 24] = sat_s49l_info;
           P64[Hp - 16] = _s464::P64;
           I64[Hp - 8] = _s465::I64;
           I64[Hp] = _s466::I64;
           _c4hk::P64 = Hp - 23;
           R2 = _c4hk::P64;
           call runSTRep_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.198654 UTC

{offset
  c4ha:
      _r0::P64 = R1;
      _s463::P64 = P64[(old + 40)];
      _s464::P64 = P64[(old + 32)];
      _s465::I64 = I64[(old + 24)];
      _s466::I64 = I64[(old + 16)];
      R5 = _s466::I64;
      R4 = _s465::I64;
      R3 = _s464::P64;
      R2 = _s463::P64;
      R1 = _r0::P64;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.199915 UTC

{offset
  c4ha:
      _r0::P64 = R1;
      _s463::P64 = P64[(old + 40)];
      _s464::P64 = P64[(old + 32)];
      _s465::I64 = I64[(old + 24)];
      _s466::I64 = I64[(old + 16)];
      R5 = _s466::I64;
      R4 = _s465::I64;
      R3 = _s464::P64;
      R2 = _s463::P64;
      R1 = _r0::P64;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.200924 UTC

{offset
  c4ha:
      _r0::P64 = R1;
      _s463::P64 = P64[Sp];
      _s464::P64 = P64[Sp + 8];
      _s465::I64 = I64[Sp + 16];
      _s466::I64 = I64[Sp + 24];
      R5 = _s466::I64;
      R4 = _s465::I64;
      R3 = _s464::P64;
      R2 = _s463::P64;
      R1 = _r0::P64;
      Sp = Sp + 32;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.201872 UTC

{offset
  c4ha:
      R5 = I64[Sp + 24];
      R4 = I64[Sp + 16];
      R3 = P64[Sp + 8];
      R2 = P64[Sp];
      R1 = R1;
      Sp = Sp + 32;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.202626 UTC

[(c4ha, {$wnormalize_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.203108 UTC

$wnormalize_slow() //  [R1]
        { info_tbl: []
          stack_info: arg_space: 40 updfr_space: Just 8
        }
    {offset
      c4ha:
          R5 = I64[Sp + 24];
          R4 = I64[Sp + 16];
          R3 = P64[Sp + 8];
          R2 = P64[Sp];
          R1 = R1;
          Sp = Sp + 32;
          call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.203636 UTC

$wnormalize_slow() //  [R1]
        { info_tbl: []
          stack_info: arg_space: 40 updfr_space: Just 8
        }
    {offset
      c4ha:
          R5 = I64[Sp + 24];
          R4 = I64[Sp + 16];
          R3 = P64[Sp + 8];
          R2 = P64[Sp];
          R1 = R1;
          Sp = Sp + 32;
          call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.204177 UTC

{offset
  c4iC:
      _s46t::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4iD; else goto c4iE;
  c4iD:
      R1 = _s46t::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4iE:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s46t::P64;
      _s46m::P64 = P64[_s46t::P64 + 16];
      _s46n::I64 = I64[_s46t::P64 + 24];
      _s46r::I64 = _s46n::I64;
      if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
  c4iA:
      _c4iG::I64 = _s46r::I64 + 1;
      _s46s::I64 = _c4iG::I64;
      R2 = _s46s::I64;
      R1 = _s46m::P64;
      call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
  c4iB:
      R1 = []_closure+1;
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.204813 UTC

{offset
  c4iC:
      _s46t::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4iD; else goto c4iE;
  c4iD:
      R1 = _s46t::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4iE:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s46t::P64;
      _s46m::P64 = P64[_s46t::P64 + 16];
      _s46n::I64 = I64[_s46t::P64 + 24];
      _s46r::I64 = _s46n::I64;
      if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
  c4iA:
      _c4iG::I64 = _s46r::I64 + 1;
      _s46s::I64 = _c4iG::I64;
      R2 = _s46s::I64;
      R1 = _s46m::P64;
      call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
  c4iB:
      R1 = []_closure+1;
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.205473 UTC

{offset
  c4iC:
      _s46t::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c4iD; else goto c4iE;
  c4iD:
      R1 = _s46t::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4iE:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = _s46t::P64;
      _s46m::P64 = P64[_s46t::P64 + 16];
      _s46n::I64 = I64[_s46t::P64 + 24];
      _s46r::I64 = _s46n::I64;
      if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
  c4iA:
      _c4iG::I64 = _s46r::I64 + 1;
      _s46s::I64 = _c4iG::I64;
      R2 = _s46s::I64;
      R1 = _s46m::P64;
      Sp = Sp - 16;
      call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
  c4iB:
      R1 = []_closure+1;
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.206142 UTC

{offset
  c4iC:
      if ((Sp + -16) < SpLim) goto c4iD; else goto c4iE;
  c4iD:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4iE:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = R1;
      _s46r::I64 = I64[R1 + 24];
      if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
  c4iA:
      R2 = _s46r::I64 + 1;
      R1 = P64[R1 + 16];
      Sp = Sp - 16;
      call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
  c4iB:
      R1 = []_closure+1;
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.207337 UTC

[(c4iA, {go1_s46m_closure}), (c4iB, {}),
 (c4iC, {go1_s46m_closure}), (c4iD, {}), (c4iE, {go1_s46m_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.207985 UTC

sat_s46t_entry() //  [R1]
        { info_tbl: [(c4iC,
                      label: sat_s46t_info
                      rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4iC:
          if ((Sp + -16) < SpLim) goto c4iD; else goto c4iE;
      c4iD:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4iE:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          _s46r::I64 = I64[R1 + 24];
          if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
      c4iA:
          R2 = _s46r::I64 + 1;
          R1 = P64[R1 + 16];
          Sp = Sp - 16;
          call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
      c4iB:
          R1 = []_closure+1;
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.208825 UTC

sat_s46t_entry() //  [R1]
        { info_tbl: [(c4iC,
                      label: sat_s46t_info
                      rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4iC:
          if ((Sp + -16) < SpLim) goto c4iD; else goto c4iE;
      c4iD:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4iE:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          _s46r::I64 = I64[R1 + 24];
          if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
      c4iA:
          R2 = _s46r::I64 + 1;
          R1 = P64[R1 + 16];
          Sp = Sp - 16;
          call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
      c4iB:
          R1 = []_closure+1;
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.209494 UTC

{offset
  c4iN:
      _s46q::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4iO; else goto c4iP;
  c4iO:
      R1 = _s46q::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c4iP:
      _s46l::P64 = P64[_s46q::P64 + 7];
      _s46n::I64 = I64[_s46q::P64 + 15];
      I32[(_s46l::P64 + 16) + (_s46n::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.210059 UTC

{offset
  c4iN:
      _s46q::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4iO; else goto c4iP;
  c4iO:
      R1 = _s46q::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c4iP:
      _s46l::P64 = P64[_s46q::P64 + 7];
      _s46n::I64 = I64[_s46q::P64 + 15];
      I32[(_s46l::P64 + 16) + (_s46n::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.210637 UTC

{offset
  c4iN:
      _s46q::P64 = R1;
      goto c4iP;
  c4iP:
      _s46l::P64 = P64[_s46q::P64 + 7];
      _s46n::I64 = I64[_s46q::P64 + 15];
      I32[(_s46l::P64 + 16) + (_s46n::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
      R1 = ()_closure+1;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.211258 UTC

{offset
  c4iN:
      goto c4iP;
  c4iP:
      I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
      R1 = ()_closure+1;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.211881 UTC

[(c4iN, {}), (c4iP, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.212399 UTC

sat_s46q_entry() //  [R1]
        { info_tbl: [(c4iN,
                      label: sat_s46q_info
                      rep:HeapRep 1 ptrs 1 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4iN:
          goto c4iP;
      c4iP:
          I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
          R1 = ()_closure+1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.212997 UTC

sat_s46q_entry() //  [R1]
        { info_tbl: [(c4iN,
                      label: sat_s46q_info
                      rep:HeapRep 1 ptrs 1 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4iN:
          I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
          R1 = ()_closure+1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.213552 UTC

{offset
  c4iR:
      _s46n::I64 = R2;
      _s46m::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4iS; else goto c4iT;
  c4iT:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4iV; else goto c4iU;
  c4iV:
      HpAlloc = 80;
      goto c4iS;
  c4iS:
      R2 = _s46n::I64;
      R1 = _s46m::P64;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4iU:
      _s46l::P64 = P64[_s46m::P64 + 7];
      I64[Hp - 72] = sat_s46t_info;
      P64[Hp - 56] = _s46m::P64;
      I64[Hp - 48] = _s46n::I64;
      _c4iu::P64 = Hp - 72;
      I64[Hp - 40] = sat_s46q_info;
      P64[Hp - 32] = _s46l::P64;
      I64[Hp - 24] = _s46n::I64;
      _c4iH::P64 = Hp - 39;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = _c4iH::P64;
      P64[Hp] = _c4iu::P64;
      _c4iQ::P64 = Hp - 14;
      R1 = _c4iQ::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.214294 UTC

{offset
  c4iR:
      _s46n::I64 = R2;
      _s46m::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4iS; else goto c4iT;
  c4iT:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4iV; else goto c4iU;
  c4iV:
      HpAlloc = 80;
      goto c4iS;
  c4iS:
      R2 = _s46n::I64;
      R1 = _s46m::P64;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4iU:
      _s46l::P64 = P64[_s46m::P64 + 7];
      I64[Hp - 72] = sat_s46t_info;
      P64[Hp - 56] = _s46m::P64;
      I64[Hp - 48] = _s46n::I64;
      _c4iu::P64 = Hp - 72;
      I64[Hp - 40] = sat_s46q_info;
      P64[Hp - 32] = _s46l::P64;
      I64[Hp - 24] = _s46n::I64;
      _c4iH::P64 = Hp - 39;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = _c4iH::P64;
      P64[Hp] = _c4iu::P64;
      _c4iQ::P64 = Hp - 14;
      R1 = _c4iQ::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.215069 UTC

{offset
  c4iR:
      _s46n::I64 = R2;
      _s46m::P64 = R1;
      goto c4iT;
  c4iT:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4iV; else goto c4iU;
  c4iV:
      HpAlloc = 80;
      goto c4iS;
  c4iS:
      R2 = _s46n::I64;
      R1 = _s46m::P64;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4iU:
      _s46l::P64 = P64[_s46m::P64 + 7];
      I64[Hp - 72] = sat_s46t_info;
      P64[Hp - 56] = _s46m::P64;
      I64[Hp - 48] = _s46n::I64;
      _c4iu::P64 = Hp - 72;
      I64[Hp - 40] = sat_s46q_info;
      P64[Hp - 32] = _s46l::P64;
      I64[Hp - 24] = _s46n::I64;
      _c4iH::P64 = Hp - 39;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = _c4iH::P64;
      P64[Hp] = _c4iu::P64;
      _c4iQ::P64 = Hp - 14;
      R1 = _c4iQ::P64;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.215746 UTC

{offset
  c4iR:
      goto c4iT;
  c4iT:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4iV; else goto c4iU;
  c4iV:
      HpAlloc = 80;
      goto c4iS;
  c4iS:
      R2 = R2;
      R1 = R1;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c4iU:
      _s46l::P64 = P64[R1 + 7];
      I64[Hp - 72] = sat_s46t_info;
      P64[Hp - 56] = R1;
      I64[Hp - 48] = R2;
      I64[Hp - 40] = sat_s46q_info;
      P64[Hp - 32] = _s46l::P64;
      I64[Hp - 24] = R2;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = Hp - 39;
      P64[Hp] = Hp - 72;
      R1 = Hp - 14;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.216542 UTC

[(c4iR, {sat_s46q_closure, sat_s46t_closure}), (c4iS, {}),
 (c4iT, {sat_s46q_closure, sat_s46t_closure}),
 (c4iU, {sat_s46q_closure, sat_s46t_closure}), (c4iV, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.217159 UTC

go1_s46m_entry() //  [R2, R1]
        { info_tbl: [(c4iR,
                      label: go1_s46m_info
                      rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4iR:
          goto c4iT;
      c4iT:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c4iV; else goto c4iU;
      c4iV:
          HpAlloc = 80;
          goto c4iS;
      c4iS:
          R2 = R2;
          R1 = R1;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c4iU:
          _s46l::P64 = P64[R1 + 7];
          I64[Hp - 72] = sat_s46t_info;
          P64[Hp - 56] = R1;
          I64[Hp - 48] = R2;
          I64[Hp - 40] = sat_s46q_info;
          P64[Hp - 32] = _s46l::P64;
          I64[Hp - 24] = R2;
          I64[Hp - 16] = :_con_info;
          P64[Hp - 8] = Hp - 39;
          P64[Hp] = Hp - 72;
          R1 = Hp - 14;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.217907 UTC

go1_s46m_entry() //  [R2, R1]
        { info_tbl: [(c4iR,
                      label: go1_s46m_info
                      rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4iR:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c4iV; else goto c4iU;
      c4iV:
          HpAlloc = 80;
          R2 = R2;
          R1 = R1;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c4iU:
          _s46l::P64 = P64[R1 + 7];
          I64[Hp - 72] = sat_s46t_info;
          P64[Hp - 56] = R1;
          I64[Hp - 48] = R2;
          I64[Hp - 40] = sat_s46q_info;
          P64[Hp - 32] = _s46l::P64;
          I64[Hp - 24] = R2;
          I64[Hp - 16] = :_con_info;
          P64[Hp - 8] = Hp - 39;
          P64[Hp] = Hp - 72;
          R1 = Hp - 14;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.218787 UTC

{offset
  c4j0:
      _s46H::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4j1; else goto c4j2;
  c4j1:
      R1 = _s46H::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4j2:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s46H::P64;
      _s46G::I64 = I64[_s46H::P64 + 16];
      _c4iY::I64 = %MO_S_Lt_W64(_s46G::I64, 0);
      _s46I::I64 = _c4iY::I64;
      R1 = I64[Bool_closure_tbl + (_s46I::I64 << 3)];
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.219435 UTC

{offset
  c4j0:
      _s46H::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4j1; else goto c4j2;
  c4j1:
      R1 = _s46H::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4j2:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s46H::P64;
      _s46G::I64 = I64[_s46H::P64 + 16];
      _c4iY::I64 = %MO_S_Lt_W64(_s46G::I64, 0);
      _s46I::I64 = _c4iY::I64;
      R1 = I64[Bool_closure_tbl + (_s46I::I64 << 3)];
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.220148 UTC

{offset
  c4j0:
      _s46H::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c4j1; else goto c4j2;
  c4j1:
      R1 = _s46H::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4j2:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = _s46H::P64;
      _s46G::I64 = I64[_s46H::P64 + 16];
      _c4iY::I64 = %MO_S_Lt_W64(_s46G::I64, 0);
      _s46I::I64 = _c4iY::I64;
      R1 = I64[Bool_closure_tbl + (_s46I::I64 << 3)];
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.22073 UTC

{offset
  c4j0:
      if ((Sp + -16) < SpLim) goto c4j1; else goto c4j2;
  c4j1:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c4j2:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = R1;
      R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.221524 UTC

[(c4j0, {}), (c4j1, {}), (c4j2, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.221966 UTC

lvl3_s46H_entry() //  [R1]
        { info_tbl: [(c4j0,
                      label: lvl3_s46H_info
                      rep:HeapRep 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4j0:
          if ((Sp + -16) < SpLim) goto c4j1; else goto c4j2;
      c4j1:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4j2:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.222541 UTC

lvl3_s46H_entry() //  [R1]
        { info_tbl: [(c4j0,
                      label: lvl3_s46H_info
                      rep:HeapRep 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4j0:
          if ((Sp + -16) < SpLim) goto c4j1; else goto c4j2;
      c4j1:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c4j2:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.223227 UTC

{offset
  c4jE:
      _s483::I64 = R3;
      _s482::I64 = R2;
      _s481::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4jF; else goto c4jG;
  c4jG:
      Hp = Hp + 16;
      if (Hp > HpLim) goto c4jI; else goto c4jH;
  c4jI:
      HpAlloc = 16;
      goto c4jF;
  c4jF:
      R3 = _s483::I64;
      R2 = _s482::I64;
      R1 = _s481::P64;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4jH:
      _s46l::P64 = P64[_s481::P64 + 5];
      _s46A::P64 = P64[_s481::P64 + 13];
      _s47j::I64 = I64[_s481::P64 + 21];
      _c4jC::I64 = %MO_S_Ge_W64(_s483::I64, _s47j::I64);
      _s485::I64 = _c4jC::I64;
      if (_s485::I64 >= 1) goto c4k5; else goto c4k6;
  c4k5:
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s482::I64;
      _c4k2::P64 = Hp - 7;
      R1 = _c4k2::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4k6:
      _s489::I64 = %MO_UU_Conv_W32_W64(I32[(_s46l::P64 + 16) + (_s483::I64 << 2)]);
      _s489::I64 = _s489::I64;
      _c4jM::I64 = _s489::I64;
      _s48a::I64 = _c4jM::I64;
      _c4jP::I64 = %MO_S_Lt_W64(_s48a::I64, 65536);
      _s48b::I64 = _c4jP::I64;
      if (_s48b::I64 >= 1) goto c4jZ; else goto c4k0;
  c4jZ:
      _c4k9::I64 = _s48a::I64;
      _s48r::I64 = _c4k9::I64;
      _c4kc::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48r::I64));
      _s48s::I64 = _c4kc::I64;
      I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48s::I64);
      _c4kh::I64 = _s483::I64 + 1;
      _s48v::I64 = _c4kh::I64;
      _c4kk::I64 = _s482::I64 + 1;
      _s48u::I64 = _c4kk::I64;
      Hp = Hp - 16;
      R3 = _s48v::I64;
      R2 = _s48u::I64;
      R1 = _s481::P64;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4k0:
      _c4kl::I64 = _s48a::I64 - 65536;
      _s48d::I64 = _c4kl::I64;
      _c4ko::I64 = %MO_S_Shr_W64(_s48d::I64, 10);
      _s48e::I64 = _c4ko::I64;
      _c4kr::I64 = _s48e::I64 + 55296;
      _s48f::I64 = _c4kr::I64;
      _c4ku::I64 = _s48f::I64;
      _s48g::I64 = _c4ku::I64;
      _c4kx::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48g::I64));
      _s48h::I64 = _c4kx::I64;
      I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48h::I64);
      _c4kC::I64 = _s48d::I64 & 1023;
      _s48k::I64 = _c4kC::I64;
      _c4kF::I64 = _s48k::I64 + 56320;
      _s48l::I64 = _c4kF::I64;
      _c4kI::I64 = _s48l::I64;
      _s48m::I64 = _c4kI::I64;
      _c4kL::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48m::I64));
      _s48n::I64 = _c4kL::I64;
      _c4kO::I64 = _s482::I64 + 1;
      _s48j::I64 = _c4kO::I64;
      I16[(_s46A::P64 + 16) + (_s48j::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48n::I64);
      _c4kT::I64 = _s483::I64 + 1;
      _s48q::I64 = _c4kT::I64;
      _c4kW::I64 = _s482::I64 + 2;
      _s48p::I64 = _c4kW::I64;
      Hp = Hp - 16;
      R3 = _s48q::I64;
      R2 = _s48p::I64;
      R1 = _s481::P64;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.224704 UTC

{offset
  c4jE:
      _s483::I64 = R3;
      _s482::I64 = R2;
      _s481::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4jF; else goto c4jG;
  c4jG:
      Hp = Hp + 16;
      if (Hp > HpLim) goto c4jI; else goto c4jH;
  c4jI:
      HpAlloc = 16;
      goto c4jF;
  c4jF:
      R3 = _s483::I64;
      R2 = _s482::I64;
      R1 = _s481::P64;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4jH:
      _s46l::P64 = P64[_s481::P64 + 5];
      _s46A::P64 = P64[_s481::P64 + 13];
      _s47j::I64 = I64[_s481::P64 + 21];
      _c4jC::I64 = %MO_S_Ge_W64(_s483::I64, _s47j::I64);
      _s485::I64 = _c4jC::I64;
      if (_s485::I64 >= 1) goto c4k5; else goto c4k6;
  c4k5:
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s482::I64;
      _c4k2::P64 = Hp - 7;
      R1 = _c4k2::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4k6:
      _s489::I64 = %MO_UU_Conv_W32_W64(I32[(_s46l::P64 + 16) + (_s483::I64 << 2)]);
      _s489::I64 = _s489::I64;
      _c4jM::I64 = _s489::I64;
      _s48a::I64 = _c4jM::I64;
      _c4jP::I64 = %MO_S_Lt_W64(_s48a::I64, 65536);
      _s48b::I64 = _c4jP::I64;
      if (_s48b::I64 >= 1) goto c4jZ; else goto c4k0;
  c4jZ:
      _c4k9::I64 = _s48a::I64;
      _s48r::I64 = _c4k9::I64;
      _c4kc::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48r::I64));
      _s48s::I64 = _c4kc::I64;
      I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48s::I64);
      _c4kh::I64 = _s483::I64 + 1;
      _s48v::I64 = _c4kh::I64;
      _c4kk::I64 = _s482::I64 + 1;
      _s48u::I64 = _c4kk::I64;
      Hp = Hp - 16;
      R3 = _s48v::I64;
      R2 = _s48u::I64;
      R1 = _s481::P64;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4k0:
      _c4kl::I64 = _s48a::I64 - 65536;
      _s48d::I64 = _c4kl::I64;
      _c4ko::I64 = %MO_S_Shr_W64(_s48d::I64, 10);
      _s48e::I64 = _c4ko::I64;
      _c4kr::I64 = _s48e::I64 + 55296;
      _s48f::I64 = _c4kr::I64;
      _c4ku::I64 = _s48f::I64;
      _s48g::I64 = _c4ku::I64;
      _c4kx::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48g::I64));
      _s48h::I64 = _c4kx::I64;
      I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48h::I64);
      _c4kC::I64 = _s48d::I64 & 1023;
      _s48k::I64 = _c4kC::I64;
      _c4kF::I64 = _s48k::I64 + 56320;
      _s48l::I64 = _c4kF::I64;
      _c4kI::I64 = _s48l::I64;
      _s48m::I64 = _c4kI::I64;
      _c4kL::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48m::I64));
      _s48n::I64 = _c4kL::I64;
      _c4kO::I64 = _s482::I64 + 1;
      _s48j::I64 = _c4kO::I64;
      I16[(_s46A::P64 + 16) + (_s48j::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48n::I64);
      _c4kT::I64 = _s483::I64 + 1;
      _s48q::I64 = _c4kT::I64;
      _c4kW::I64 = _s482::I64 + 2;
      _s48p::I64 = _c4kW::I64;
      Hp = Hp - 16;
      R3 = _s48q::I64;
      R2 = _s48p::I64;
      R1 = _s481::P64;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.226114 UTC

{offset
  c4jE:
      _s483::I64 = R3;
      _s482::I64 = R2;
      _s481::P64 = R1;
      goto c4jG;
  c4jG:
      Hp = Hp + 16;
      if (Hp > HpLim) goto c4jI; else goto c4jH;
  c4jI:
      HpAlloc = 16;
      goto c4jF;
  c4jF:
      R3 = _s483::I64;
      R2 = _s482::I64;
      R1 = _s481::P64;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4jH:
      _s46l::P64 = P64[_s481::P64 + 5];
      _s46A::P64 = P64[_s481::P64 + 13];
      _s47j::I64 = I64[_s481::P64 + 21];
      _c4jC::I64 = %MO_S_Ge_W64(_s483::I64, _s47j::I64);
      _s485::I64 = _c4jC::I64;
      if (_s485::I64 >= 1) goto c4k5; else goto c4k6;
  c4k5:
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s482::I64;
      _c4k2::P64 = Hp - 7;
      R1 = _c4k2::P64;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4k6:
      _s489::I64 = %MO_UU_Conv_W32_W64(I32[(_s46l::P64 + 16) + (_s483::I64 << 2)]);
      _s489::I64 = _s489::I64;
      _c4jM::I64 = _s489::I64;
      _s48a::I64 = _c4jM::I64;
      _c4jP::I64 = %MO_S_Lt_W64(_s48a::I64, 65536);
      _s48b::I64 = _c4jP::I64;
      if (_s48b::I64 >= 1) goto c4jZ; else goto c4k0;
  c4jZ:
      _c4k9::I64 = _s48a::I64;
      _s48r::I64 = _c4k9::I64;
      _c4kc::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48r::I64));
      _s48s::I64 = _c4kc::I64;
      I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48s::I64);
      _c4kh::I64 = _s483::I64 + 1;
      _s48v::I64 = _c4kh::I64;
      _c4kk::I64 = _s482::I64 + 1;
      _s48u::I64 = _c4kk::I64;
      Hp = Hp - 16;
      R3 = _s48v::I64;
      R2 = _s48u::I64;
      R1 = _s481::P64;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4k0:
      _c4kl::I64 = _s48a::I64 - 65536;
      _s48d::I64 = _c4kl::I64;
      _c4ko::I64 = %MO_S_Shr_W64(_s48d::I64, 10);
      _s48e::I64 = _c4ko::I64;
      _c4kr::I64 = _s48e::I64 + 55296;
      _s48f::I64 = _c4kr::I64;
      _c4ku::I64 = _s48f::I64;
      _s48g::I64 = _c4ku::I64;
      _c4kx::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48g::I64));
      _s48h::I64 = _c4kx::I64;
      I16[(_s46A::P64 + 16) + (_s482::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48h::I64);
      _c4kC::I64 = _s48d::I64 & 1023;
      _s48k::I64 = _c4kC::I64;
      _c4kF::I64 = _s48k::I64 + 56320;
      _s48l::I64 = _c4kF::I64;
      _c4kI::I64 = _s48l::I64;
      _s48m::I64 = _c4kI::I64;
      _c4kL::I64 = %MO_UU_Conv_W16_W64(%MO_UU_Conv_W64_W16(_s48m::I64));
      _s48n::I64 = _c4kL::I64;
      _c4kO::I64 = _s482::I64 + 1;
      _s48j::I64 = _c4kO::I64;
      I16[(_s46A::P64 + 16) + (_s48j::I64 << 1)] = %MO_UU_Conv_W64_W16(_s48n::I64);
      _c4kT::I64 = _s483::I64 + 1;
      _s48q::I64 = _c4kT::I64;
      _c4kW::I64 = _s482::I64 + 2;
      _s48p::I64 = _c4kW::I64;
      Hp = Hp - 16;
      R3 = _s48q::I64;
      R2 = _s48p::I64;
      R1 = _s481::P64;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.227457 UTC

{offset
  c4jE:
      goto c4jG;
  c4jG:
      Hp = Hp + 16;
      if (Hp > HpLim) goto c4jI; else goto c4jH;
  c4jI:
      HpAlloc = 16;
      goto c4jF;
  c4jF:
      R3 = R3;
      R2 = R2;
      R1 = R1;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4jH:
      if (%MO_S_Ge_W64(R3, I64[R1 + 21])) goto c4k5; else goto c4k6;
  c4k5:
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = R2;
      R1 = Hp - 7;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4k6:
      _s46A::P64 = P64[R1 + 13];
      _s48a::I64 = %MO_UU_Conv_W32_W64(I32[P64[R1 + 5] + ((R3 << 2) + 16)]);
      if (%MO_S_Lt_W64(_s48a::I64, 65536)) goto c4jZ; else goto c4k0;
  c4jZ:
      I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(_s48a::I64);
      Hp = Hp - 16;
      R3 = R3 + 1;
      R2 = R2 + 1;
      R1 = R1;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4k0:
      _s48d::I64 = _s48a::I64 - 65536;
      I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(%MO_S_Shr_W64(_s48d::I64,
                                                                             10) + 55296);
      I16[(_s46A::P64 + 16) + ((R2 + 1) << 1)] = %MO_UU_Conv_W64_W16(_s48d::I64 & 1023 + 56320);
      Hp = Hp - 16;
      R3 = R3 + 1;
      R2 = R2 + 2;
      R1 = R1;
      call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.228751 UTC

[(c4jE, {$s$wa_s481_closure}), (c4jF, {}),
 (c4jG, {$s$wa_s481_closure}), (c4jH, {$s$wa_s481_closure}),
 (c4jI, {}), (c4jZ, {$s$wa_s481_closure}),
 (c4k0, {$s$wa_s481_closure}), (c4k5, {}),
 (c4k6, {$s$wa_s481_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.22938 UTC

$s$wa_s481_entry() //  [R3, R2, R1]
        { info_tbl: [(c4jE,
                      label: $s$wa_s481_info
                      rep:HeapRep 2 ptrs 1 nonptrs {
                            Fun {arity: 3 fun_type: ArgSpec 12} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4jE:
          goto c4jG;
      c4jG:
          Hp = Hp + 16;
          if (Hp > HpLim) goto c4jI; else goto c4jH;
      c4jI:
          HpAlloc = 16;
          goto c4jF;
      c4jF:
          R3 = R3;
          R2 = R2;
          R1 = R1;
          call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4jH:
          if (%MO_S_Ge_W64(R3, I64[R1 + 21])) goto c4k5; else goto c4k6;
      c4k5:
          I64[Hp - 8] = I#_con_info;
          I64[Hp] = R2;
          R1 = Hp - 7;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4k6:
          _s46A::P64 = P64[R1 + 13];
          _s48a::I64 = %MO_UU_Conv_W32_W64(I32[P64[R1 + 5] + ((R3 << 2) + 16)]);
          if (%MO_S_Lt_W64(_s48a::I64, 65536)) goto c4jZ; else goto c4k0;
      c4jZ:
          I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(_s48a::I64);
          Hp = Hp - 16;
          R3 = R3 + 1;
          R2 = R2 + 1;
          R1 = R1;
          call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4k0:
          _s48d::I64 = _s48a::I64 - 65536;
          I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(%MO_S_Shr_W64(_s48d::I64,
                                                                                 10) + 55296);
          I16[(_s46A::P64 + 16) + ((R2 + 1) << 1)] = %MO_UU_Conv_W64_W16(_s48d::I64 & 1023 + 56320);
          Hp = Hp - 16;
          R3 = R3 + 1;
          R2 = R2 + 2;
          R1 = R1;
          call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.230527 UTC

$s$wa_s481_entry() //  [R3, R2, R1]
        { info_tbl: [(c4jE,
                      label: $s$wa_s481_info
                      rep:HeapRep 2 ptrs 1 nonptrs {
                            Fun {arity: 3 fun_type: ArgSpec 12} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4jE:
          Hp = Hp + 16;
          if (Hp > HpLim) goto c4jI; else goto c4jH;
      c4jI:
          HpAlloc = 16;
          R3 = R3;
          R2 = R2;
          R1 = R1;
          call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4jH:
          if (%MO_S_Ge_W64(R3, I64[R1 + 21])) goto c4k5; else goto c4k6;
      c4k5:
          I64[Hp - 8] = I#_con_info;
          I64[Hp] = R2;
          R1 = Hp - 7;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4k6:
          _s46A::P64 = P64[R1 + 13];
          _s48a::I64 = %MO_UU_Conv_W32_W64(I32[P64[R1 + 5] + ((R3 << 2) + 16)]);
          if (%MO_S_Lt_W64(_s48a::I64, 65536)) goto c4jZ; else goto c4k0;
      c4jZ:
          I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(_s48a::I64);
          Hp = Hp - 16;
          R3 = R3 + 1;
          R2 = R2 + 1;
          R1 = R1;
          call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4k0:
          _s48d::I64 = _s48a::I64 - 65536;
          I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(%MO_S_Shr_W64(_s48d::I64,
                                                                                 10) + 55296);
          I16[(_s46A::P64 + 16) + ((R2 + 1) << 1)] = %MO_UU_Conv_W64_W16(_s48d::I64 & 1023 + 56320);
          Hp = Hp - 16;
          R3 = R3 + 1;
          R2 = R2 + 2;
          R1 = R1;
          call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.231551 UTC

{offset
  c4kX:
      _s49l::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4kY; else goto c4kZ;
  c4kY:
      R1 = _s49l::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c4kZ:
      _s464::P64 = P64[_s49l::P64 + 7];
      _s465::I64 = I64[_s49l::P64 + 15];
      _s466::I64 = I64[_s49l::P64 + 23];
      _c4hp::I64 = _s466::I64 + 11;
      _s46a::I64 = _c4hp::I64;
      _c4hs::I64 = %MO_S_Lt_W64(_s46a::I64, 0);
      _s46b::I64 = _c4hs::I64;
      if (_s46b::I64 >= 1) goto c4pB; else goto c4pC;
  c4pB:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4pC:
      _c4hx::I64 = _s46a::I64 & 4611686018427387904;
      _s46d::I64 = _c4hx::I64;
      if (_s46d::I64 != 0) goto c4l2; else goto c4l6;
  c4l2:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4l6:
      _c4hE::I64 = _s46a::I64 << 1;
      _s46f::I64 = _c4hE::I64;
      I64[(young<c4hH> + 8)] = c4hH;
      R1 = _s46f::I64;
      call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4hH:
      _s46i::P64 = R1;
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4la; else goto c4l9;
  c4la:
      HpAlloc = 80;
      R1 = _s46i::P64;
      call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4l9:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      _s46l::P64 = Hp - 72;
      _s46l::P64 = _s46l::P64;
      _c4hJ::P64 = Hp - 7;
      I64[Hp - 8] = go1_s46m_info;
      P64[Hp] = _s46l::P64;
      I64[(young<c4hL> + 8)] = c4hL;
      R2 = 0;
      R1 = _c4hJ::P64;
      call go1_s46m_info(R2,
                         R1) returns to c4hL, args: 8, res: 8, upd: 8;
  c4hL:
      _s46u::P64 = R1;
      I64[(young<c4hP> + 8)] = c4hP;
      R2 = _s46u::P64;
      call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
  c4hP:
      _s46x::P64 = R1;
      _c4hR::I64 = _s465::I64 + _s466::I64;
      _s46y::I64 = _c4hR::I64;
      _c4pD::I64 = _s46a::I64 - 1;
      _s49j::I64 = _c4pD::I64;
      _s46E::I64 = 0;
      _s46D::I64 = 0;
      _s46C::I64 = _s465::I64;
      _s46B::I64 = _s49j::I64;
      _s46A::P64 = _s46i::P64;
      goto c4hW;
  c4hW:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c4lf; else goto c4le;
  c4lf:
      HpAlloc = 24;
      I64[(young<c4hX> + 8)] = c4hX;
      call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
  c4hX:
      goto c4hW;
  c4le:
      _c4hZ::I64 = _s46B::I64 * 2;
      _s46G::I64 = _c4hZ::I64;
      I64[Hp - 16] = lvl3_s46H_info;
      I64[Hp] = _s46G::I64;
      _c4i2::P64 = Hp - 16;
      _s47j::I64 = _s46E::I64;
      _s47i::I64 = _s46D::I64;
      _s47h::I64 = _s46C::I64;
      goto c4ic;
  c4ic:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4mx; else goto c4mw;
  c4mx:
      HpAlloc = 48;
      I64[(young<c4id> + 8)] = c4id;
      call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
  c4id:
      goto c4ic;
  c4mw:
      _c4if::I64 = _s47i::I64 + 11;
      _s47l::I64 = _c4if::I64;
      _c4ii::I64 = %MO_S_Lt_W64(_s46B::I64, _s47l::I64);
      _s47m::I64 = _c4ii::I64;
      if (_s47m::I64 >= 1) goto c4pv; else goto c4pw;
  c4pv:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s47j::I64;
      _c4io::P64 = Hp - 39;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s47i::I64;
      _c4ip::P64 = Hp - 23;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s47h::I64;
      _c4iq::P64 = Hp - 7;
      _B2::P64 = _c4io::P64;
      _B3::P64 = _c4ip::P64;
      _B4::P64 = _c4iq::P64;
      _s477::P64 = _B2::P64;
      _s476::P64 = _B3::P64;
      _s475::P64 = _B4::P64;
      I64[(young<c4m8> + 8)] = c4m8;
      R1 = _s475::P64;
      if (R1 & 7 != 0) goto c4m8; else goto c4m9;
  c4m9:
      call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
  c4m8:
      _s479::P64 = R1;
      _s47a::I64 = I64[_s479::P64 + 7];
      I64[(young<c4md> + 8)] = c4md;
      R1 = _s476::P64;
      if (R1 & 7 != 0) goto c4md; else goto c4me;
  c4me:
      call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
  c4md:
      _s47b::P64 = R1;
      _s47c::I64 = I64[_s47b::P64 + 7];
      I64[(young<c4mi> + 8)] = c4mi;
      R1 = _s477::P64;
      if (R1 & 7 != 0) goto c4mi; else goto c4mm;
  c4mm:
      call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
  c4mi:
      _s47d::P64 = R1;
      _s47e::I64 = I64[_s47d::P64 + 7];
      _s46M::I64 = _s47e::I64;
      _s46L::I64 = _s47c::I64;
      _s46K::I64 = _s47a::I64;
      I64[(young<c4lj> + 8)] = c4lj;
      R1 = _c4i2::P64;
      if (R1 & 7 != 0) goto c4lj; else goto c4ll;
  c4ll:
      call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
  c4lj:
      _s46O::P64 = R1;
      _c4m1::P64 = _s46O::P64 & 7;
      if (_c4m1::P64 >= 2) goto c4m3; else goto c4m4;
  c4m3:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4m4:
      _c4lq::I64 = _s46G::I64 & 4611686018427387904;
      _s46P::I64 = _c4lq::I64;
      if (_s46P::I64 != 0) goto c4lv; else goto c4lB;
  c4lv:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4lB:
      _c4lF::I64 = _s46G::I64 << 1;
      _s46R::I64 = _c4lF::I64;
      I64[(young<c4lI> + 8)] = c4lI;
      R1 = _s46R::I64;
      call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
  c4lI:
      _s46U::P64 = R1;
      _c4lL::I64 = %MO_S_Le_W64(_s46L::I64, 0);
      _s46V::I64 = _c4lL::I64;
      if (_s46V::I64 >= 1) goto c4lT; else goto c4lU;
  c4lT:
      _c4pG::I64 = _s46G::I64 - 1;
      _s472::I64 = _c4pG::I64;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s472::I64;
      _s46A::P64 = _s46U::P64;
      goto c4hW;
  c4lU:
      _c4pH::I64 = _s46L::I64;
      _s46Y::I64 = _c4pH::I64;
      _c4pK::I64 = _hs_text_memcpy;
      _c4pL::P64 = _s46U::P64 + 16;
      _c4pM::I64 = 0;
      _c4pN::P64 = _s46A::P64 + 16;
      _c4pO::I64 = 0;
      _c4pP::I64 = _s46Y::I64;
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] (_c4pK::I64)(_c4pL::P64, _c4pM::I64, _c4pN::P64, _c4pO::I64, _c4pP::I64);
      _c4pQ::I64 = _s46G::I64 - 1;
      _s471::I64 = _c4pQ::I64;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s471::I64;
      _s46A::P64 = _s46U::P64;
      goto c4hW;
  c4pw:
      _c4j3::I64 = %MO_S_Ge_W64(_s47h::I64, _s46y::I64);
      _s47o::I64 = _c4j3::I64;
      if (_s47o::I64 >= 1) goto c4pr; else goto c4ps;
  c4pr:
      _s499::P64 = _s46A::P64;
      _s499::P64 = _s499::P64;
      _s49a::I64 = _s47i::I64;
      if (_s49a::I64 != 0) goto c4pe; else goto c4ph;
  c4pe:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s499::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s49a::I64;
      _c4pc::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4pc::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4ph:
      Hp = Hp - 48;
      I64[(young<c4pg> + 8)] = c4pg;
      R1 = empty_closure;
      if (R1 & 7 != 0) goto c4pg; else goto c4pi;
  c4pi:
      call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
  c4pg:
      _s49c::P64 = R1;
      _s49d::P64 = P64[_s49c::P64 + 7];
      _s49e::I64 = I64[_s49c::P64 + 15];
      _s49f::I64 = I64[_s49c::P64 + 23];
      R1 = _s49c::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4ps:
      _c4j8::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
      _s47q::I64 = _c4j8::I64;
      _c4oL::I64 = _s47q::I64 >= 55296;
      _s48M::I64 = _c4oL::I64;
      if (_s48M::I64 >= 1) goto c4p7; else goto c4p8;
  c4p7:
      _c4oT::I64 = _s47q::I64 <= 56319;
      _s48R::I64 = _c4oT::I64;
      if (_s48R::I64 >= 1) goto c4p2; else goto c4p3;
  c4p2:
      _c4pT::I64 = _s47h::I64 + 1;
      _s48W::I64 = _c4pT::I64;
      _c4pW::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s48W::I64 << 1)]);
      _s48X::I64 = _c4pW::I64;
      _c4pZ::I64 = _s47h::I64 + 2;
      _s496::I64 = _c4pZ::I64;
      _c4q2::I64 = _s48X::I64;
      _s491::I64 = _c4q2::I64;
      _c4q5::I64 = _s491::I64 - 56320;
      _s492::I64 = _c4q5::I64;
      _c4q8::I64 = _s47q::I64;
      _s48Y::I64 = _c4q8::I64;
      _c4qb::I64 = _s48Y::I64 - 55296;
      _s48Z::I64 = _c4qb::I64;
      _c4qe::I64 = _s48Z::I64 << 10;
      _s490::I64 = _c4qe::I64;
      _c4qh::I64 = _s490::I64 + _s492::I64;
      _s493::I64 = _c4qh::I64;
      _c4qk::I64 = _s493::I64 + 65536;
      _s494::I64 = _c4qk::I64;
      _c4qn::I64 = _s494::I64;
      _s495::I64 = _c4qn::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s496::I64;
      _s47s::I64 = _s495::I64;
      goto c4jd;
  c4p3:
      _c4qo::I64 = _s47h::I64 + 1;
      _s48V::I64 = _c4qo::I64;
      _c4qr::I64 = _s47q::I64;
      _s48T::I64 = _c4qr::I64;
      _c4qu::I64 = _s48T::I64;
      _s48U::I64 = _c4qu::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s48V::I64;
      _s47s::I64 = _s48U::I64;
      goto c4jd;
  c4p8:
      _c4qv::I64 = _s47h::I64 + 1;
      _s48Q::I64 = _c4qv::I64;
      _c4qy::I64 = _s47q::I64;
      _s48O::I64 = _c4qy::I64;
      _c4qB::I64 = _s48O::I64;
      _s48P::I64 = _c4qB::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s48Q::I64;
      _s47s::I64 = _s48P::I64;
      goto c4jd;
  c4jd:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4mA; else goto c4mz;
  c4mA:
      HpAlloc = 32;
      I64[(young<c4je> + 8)] = c4je;
      call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
  c4je:
      goto c4jd;
  c4mz:
      _c4jg::I64 = _s47s::I64;
      _s47v::I64 = _c4jg::I64;
      _c4jl::I64 = %MO_S_Ge_W64(_s47v::I64, 44032);
      _s47X::I64 = _c4jl::I64;
      if (_s47X::I64 >= 1) goto c4oJ; else goto c4oK;
  c4oJ:
      _c4jr::I64 = %MO_S_Le_W64(_s47v::I64, 55203);
      _s47Z::I64 = _c4jr::I64;
      if (_s47Z::I64 >= 1) goto c4oG; else goto c4oH;
  c4oG:
      _c4jx::P64 = Hp - 21;
      I64[Hp - 24] = $s$wa_s481_info;
      P64[Hp - 16] = _s46l::P64;
      P64[Hp - 8] = _s46A::P64;
      I64[Hp] = _s47j::I64;
      I64[(young<c4o9> + 8)] = c4o9;
      R3 = 0;
      R2 = _s47i::I64;
      R1 = _c4jx::P64;
      call $s$wa_s481_info(R3,
                           R2,
                           R1) returns to c4o9, args: 8, res: 8, upd: 8;
  c4o9:
      _s48z::P64 = R1;
      I64[(young<c4ob> + 8)] = c4ob;
      R1 = _s48z::P64;
      if (R1 & 7 != 0) goto c4ob; else goto c4oc;
  c4oc:
      call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
  c4ob:
      _s48A::P64 = R1;
      _s48B::I64 = I64[_s48A::P64 + 7];
      I64[(young<c4og> + 8)] = c4og;
      R4 = _s47s::I64;
      R3 = _s48B::I64;
      R2 = _s46A::P64;
      call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
  c4og:
      _s48E::P64 = R1;
      I64[(young<c4oi> + 8)] = c4oi;
      R1 = _s48E::P64;
      if (R1 & 7 != 0) goto c4oi; else goto c4oj;
  c4oj:
      call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
  c4oi:
      _s48F::P64 = R1;
      _s48G::P64 = P64[_s48F::P64 + 7];
      _s48H::P64 = P64[_s48F::P64 + 15];
      I64[(young<c4on> + 8)] = c4on;
      R1 = _s48G::P64;
      if (R1 & 7 != 0) goto c4on; else goto c4oo;
  c4oo:
      call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
  c4on:
      _s48I::P64 = R1;
      _s48J::I64 = I64[_s48I::P64 + 7];
      I64[(young<c4os> + 8)] = c4os;
      R1 = _s48H::P64;
      if (R1 & 7 != 0) goto c4os; else goto c4oz;
  c4oz:
      call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
  c4os:
      _s48K::P64 = R1;
      _s48L::I64 = I64[_s48K::P64 + 7];
      _s47j::I64 = _s48L::I64;
      _s47i::I64 = _s48J::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4oH:
      Hp = Hp - 32;
      goto s47w;
  c4oK:
      Hp = Hp - 32;
      goto s47w;
  s47w:
      _c4mF::I64 = %MO_S_Lt_W64(_s47v::I64, 192);
      _s47y::I64 = _c4mF::I64;
      if (_s47y::I64 >= 1) goto c4o3; else goto c4o4;
  c4o3:
      _s47N::I64 = _s47j::I64;
      if (%MO_S_Lt_W64(_s47N::I64, 1)) goto c4o0; else goto c4o1;
  c4o0:
      if (_s47N::I64 != 0) goto c4nx; else goto c4ny;
  c4ny:
      _c4qC::I64 = _s47i::I64 + 1;
      _s47P::I64 = _c4qC::I64;
      _s47j::I64 = 1;
      _s47i::I64 = _s47P::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o1:
      if (_s47N::I64 != 1) goto c4nx; else goto c4nU;
  c4nx:
      R1 = lvl2_r45K_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4nU:
      _c4nC::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
      _s47Q::I64 = _c4nC::I64;
      if (_s47Q::I64 >= 1) goto c4nW; else goto c4nX;
  c4nW:
      _c4qE::I64 = _s47i::I64 + 1;
      _s47W::I64 = _c4qE::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47W::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nX:
      _c4nH::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
      _s47S::I64 = _c4nH::I64;
      if (_s47S::I64 >= 1) goto c4nR; else goto c4nS;
  c4nR:
      _c4qH::I64 = _s47i::I64 + 1;
      _s47V::I64 = _c4qH::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47V::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nS:
      _c4qI::I64 = _s47i::I64 + 2;
      _s47U::I64 = _c4qI::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47U::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o4:
      _c4mK::I64 = %MO_S_Le_W64(_s47v::I64, 195101);
      _s47A::I64 = _c4mK::I64;
      if (_s47A::I64 >= 1) goto c4ns; else goto c4nt;
  c4ns:
      _s47D::I64 = _s47j::I64;
      if (%MO_S_Lt_W64(_s47D::I64, 1)) goto c4nn; else goto c4no;
  c4nn:
      if (_s47D::I64 != 0) goto c4mU; else goto c4mV;
  c4mV:
      _c4qJ::I64 = _s47i::I64 + 1;
      _s47F::I64 = _c4qJ::I64;
      _s47j::I64 = 1;
      _s47i::I64 = _s47F::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4no:
      if (_s47D::I64 != 1) goto c4mU; else goto c4nh;
  c4mU:
      R1 = lvl2_r45K_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4nh:
      _c4mZ::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
      _s47G::I64 = _c4mZ::I64;
      if (_s47G::I64 >= 1) goto c4nj; else goto c4nk;
  c4nj:
      _c4qL::I64 = _s47i::I64 + 1;
      _s47M::I64 = _c4qL::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47M::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nk:
      _c4n4::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
      _s47I::I64 = _c4n4::I64;
      if (_s47I::I64 >= 1) goto c4ne; else goto c4nf;
  c4ne:
      _c4qO::I64 = _s47i::I64 + 1;
      _s47L::I64 = _c4qO::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47L::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nf:
      _c4qP::I64 = _s47i::I64 + 2;
      _s47K::I64 = _c4qP::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47K::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nt:
      R1 = lvl1_r45J_closure;
      call (I64[R1])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.23688 UTC

{offset
  c4kX:
      _s49l::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c4kY; else goto c4kZ;
  c4kY:
      R1 = _s49l::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c4kZ:
      _s464::P64 = P64[_s49l::P64 + 7];
      _s465::I64 = I64[_s49l::P64 + 15];
      _s466::I64 = I64[_s49l::P64 + 23];
      _c4hp::I64 = _s466::I64 + 11;
      _s46a::I64 = _c4hp::I64;
      _c4hs::I64 = %MO_S_Lt_W64(_s46a::I64, 0);
      _s46b::I64 = _c4hs::I64;
      if (_s46b::I64 >= 1) goto c4pB; else goto c4pC;
  c4pC:
      _c4hx::I64 = _s46a::I64 & 4611686018427387904;
      _s46d::I64 = _c4hx::I64;
      if (_s46d::I64 != 0) goto c4pB; else goto c4l6;
  c4l6:
      _c4hE::I64 = _s46a::I64 << 1;
      _s46f::I64 = _c4hE::I64;
      I64[(young<c4hH> + 8)] = c4hH;
      R1 = _s46f::I64;
      call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4hH:
      _s46i::P64 = R1;
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4la; else goto c4l9;
  c4la:
      HpAlloc = 80;
      R1 = _s46i::P64;
      call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4l9:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      _s46l::P64 = Hp - 72;
      _s46l::P64 = _s46l::P64;
      _c4hJ::P64 = Hp - 7;
      I64[Hp - 8] = go1_s46m_info;
      P64[Hp] = _s46l::P64;
      I64[(young<c4hL> + 8)] = c4hL;
      R2 = 0;
      R1 = _c4hJ::P64;
      call go1_s46m_info(R2,
                         R1) returns to c4hL, args: 8, res: 8, upd: 8;
  c4hL:
      _s46u::P64 = R1;
      I64[(young<c4hP> + 8)] = c4hP;
      R2 = _s46u::P64;
      call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
  c4hP:
      _s46x::P64 = R1;
      _c4hR::I64 = _s465::I64 + _s466::I64;
      _s46y::I64 = _c4hR::I64;
      _c4pD::I64 = _s46a::I64 - 1;
      _s49j::I64 = _c4pD::I64;
      _s46E::I64 = 0;
      _s46D::I64 = 0;
      _s46C::I64 = _s465::I64;
      _s46B::I64 = _s49j::I64;
      _s46A::P64 = _s46i::P64;
      goto c4hW;
  c4hW:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c4lf; else goto c4le;
  c4lf:
      HpAlloc = 24;
      I64[(young<c4hX> + 8)] = c4hX;
      call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
  c4hX:
      goto c4hW;
  c4le:
      _c4hZ::I64 = _s46B::I64 * 2;
      _s46G::I64 = _c4hZ::I64;
      I64[Hp - 16] = lvl3_s46H_info;
      I64[Hp] = _s46G::I64;
      _c4i2::P64 = Hp - 16;
      _s47j::I64 = _s46E::I64;
      _s47i::I64 = _s46D::I64;
      _s47h::I64 = _s46C::I64;
      goto c4ic;
  c4ic:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4mx; else goto c4mw;
  c4mx:
      HpAlloc = 48;
      I64[(young<c4id> + 8)] = c4id;
      call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
  c4id:
      goto c4ic;
  c4mw:
      _c4if::I64 = _s47i::I64 + 11;
      _s47l::I64 = _c4if::I64;
      _c4ii::I64 = %MO_S_Lt_W64(_s46B::I64, _s47l::I64);
      _s47m::I64 = _c4ii::I64;
      if (_s47m::I64 >= 1) goto c4pv; else goto c4pw;
  c4pv:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s47j::I64;
      _c4io::P64 = Hp - 39;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s47i::I64;
      _c4ip::P64 = Hp - 23;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s47h::I64;
      _c4iq::P64 = Hp - 7;
      _B2::P64 = _c4io::P64;
      _B3::P64 = _c4ip::P64;
      _B4::P64 = _c4iq::P64;
      _s477::P64 = _B2::P64;
      _s476::P64 = _B3::P64;
      _s475::P64 = _B4::P64;
      I64[(young<c4m8> + 8)] = c4m8;
      R1 = _s475::P64;
      if (R1 & 7 != 0) goto c4m8; else goto c4m9;
  c4m9:
      call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
  c4m8:
      _s479::P64 = R1;
      _s47a::I64 = I64[_s479::P64 + 7];
      I64[(young<c4md> + 8)] = c4md;
      R1 = _s476::P64;
      if (R1 & 7 != 0) goto c4md; else goto c4me;
  c4me:
      call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
  c4md:
      _s47b::P64 = R1;
      _s47c::I64 = I64[_s47b::P64 + 7];
      I64[(young<c4mi> + 8)] = c4mi;
      R1 = _s477::P64;
      if (R1 & 7 != 0) goto c4mi; else goto c4mm;
  c4mm:
      call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
  c4mi:
      _s47d::P64 = R1;
      _s47e::I64 = I64[_s47d::P64 + 7];
      _s46M::I64 = _s47e::I64;
      _s46L::I64 = _s47c::I64;
      _s46K::I64 = _s47a::I64;
      I64[(young<c4lj> + 8)] = c4lj;
      R1 = _c4i2::P64;
      if (R1 & 7 != 0) goto c4lj; else goto c4ll;
  c4ll:
      call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
  c4lj:
      _s46O::P64 = R1;
      _c4m1::P64 = _s46O::P64 & 7;
      if (_c4m1::P64 >= 2) goto c4pB; else goto c4m4;
  c4m4:
      _c4lq::I64 = _s46G::I64 & 4611686018427387904;
      _s46P::I64 = _c4lq::I64;
      if (_s46P::I64 != 0) goto c4pB; else goto c4lB;
  c4pB:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4lB:
      _c4lF::I64 = _s46G::I64 << 1;
      _s46R::I64 = _c4lF::I64;
      I64[(young<c4lI> + 8)] = c4lI;
      R1 = _s46R::I64;
      call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
  c4lI:
      _s46U::P64 = R1;
      _c4lL::I64 = %MO_S_Le_W64(_s46L::I64, 0);
      _s46V::I64 = _c4lL::I64;
      if (_s46V::I64 >= 1) goto c4lT; else goto c4lU;
  c4lT:
      _c4pG::I64 = _s46G::I64 - 1;
      _s472::I64 = _c4pG::I64;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s472::I64;
      _s46A::P64 = _s46U::P64;
      goto c4hW;
  c4lU:
      _c4pH::I64 = _s46L::I64;
      _s46Y::I64 = _c4pH::I64;
      _c4pK::I64 = _hs_text_memcpy;
      _c4pL::P64 = _s46U::P64 + 16;
      _c4pM::I64 = 0;
      _c4pN::P64 = _s46A::P64 + 16;
      _c4pO::I64 = 0;
      _c4pP::I64 = _s46Y::I64;
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] (_c4pK::I64)(_c4pL::P64, _c4pM::I64, _c4pN::P64, _c4pO::I64, _c4pP::I64);
      _c4pQ::I64 = _s46G::I64 - 1;
      _s471::I64 = _c4pQ::I64;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s471::I64;
      _s46A::P64 = _s46U::P64;
      goto c4hW;
  c4pw:
      _c4j3::I64 = %MO_S_Ge_W64(_s47h::I64, _s46y::I64);
      _s47o::I64 = _c4j3::I64;
      if (_s47o::I64 >= 1) goto c4pr; else goto c4ps;
  c4pr:
      _s499::P64 = _s46A::P64;
      _s499::P64 = _s499::P64;
      _s49a::I64 = _s47i::I64;
      if (_s49a::I64 != 0) goto c4pe; else goto c4ph;
  c4pe:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s499::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s49a::I64;
      _c4pc::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4pc::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4ph:
      Hp = Hp - 48;
      I64[(young<c4pg> + 8)] = c4pg;
      R1 = empty_closure;
      if (R1 & 7 != 0) goto c4pg; else goto c4pi;
  c4pi:
      call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
  c4pg:
      _s49c::P64 = R1;
      _s49d::P64 = P64[_s49c::P64 + 7];
      _s49e::I64 = I64[_s49c::P64 + 15];
      _s49f::I64 = I64[_s49c::P64 + 23];
      R1 = _s49c::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4ps:
      _c4j8::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
      _s47q::I64 = _c4j8::I64;
      _c4oL::I64 = _s47q::I64 >= 55296;
      _s48M::I64 = _c4oL::I64;
      if (_s48M::I64 >= 1) goto c4p7; else goto c4p8;
  c4p7:
      _c4oT::I64 = _s47q::I64 <= 56319;
      _s48R::I64 = _c4oT::I64;
      if (_s48R::I64 >= 1) goto c4p2; else goto c4p3;
  c4p2:
      _c4pT::I64 = _s47h::I64 + 1;
      _s48W::I64 = _c4pT::I64;
      _c4pW::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s48W::I64 << 1)]);
      _s48X::I64 = _c4pW::I64;
      _c4pZ::I64 = _s47h::I64 + 2;
      _s496::I64 = _c4pZ::I64;
      _c4q2::I64 = _s48X::I64;
      _s491::I64 = _c4q2::I64;
      _c4q5::I64 = _s491::I64 - 56320;
      _s492::I64 = _c4q5::I64;
      _c4q8::I64 = _s47q::I64;
      _s48Y::I64 = _c4q8::I64;
      _c4qb::I64 = _s48Y::I64 - 55296;
      _s48Z::I64 = _c4qb::I64;
      _c4qe::I64 = _s48Z::I64 << 10;
      _s490::I64 = _c4qe::I64;
      _c4qh::I64 = _s490::I64 + _s492::I64;
      _s493::I64 = _c4qh::I64;
      _c4qk::I64 = _s493::I64 + 65536;
      _s494::I64 = _c4qk::I64;
      _c4qn::I64 = _s494::I64;
      _s495::I64 = _c4qn::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s496::I64;
      _s47s::I64 = _s495::I64;
      goto c4jd;
  c4p3:
      _c4qo::I64 = _s47h::I64 + 1;
      _s48V::I64 = _c4qo::I64;
      _c4qr::I64 = _s47q::I64;
      _s48T::I64 = _c4qr::I64;
      _c4qu::I64 = _s48T::I64;
      _s48U::I64 = _c4qu::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s48V::I64;
      _s47s::I64 = _s48U::I64;
      goto c4jd;
  c4p8:
      _c4qv::I64 = _s47h::I64 + 1;
      _s48Q::I64 = _c4qv::I64;
      _c4qy::I64 = _s47q::I64;
      _s48O::I64 = _c4qy::I64;
      _c4qB::I64 = _s48O::I64;
      _s48P::I64 = _c4qB::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s48Q::I64;
      _s47s::I64 = _s48P::I64;
      goto c4jd;
  c4jd:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4mA; else goto c4mz;
  c4mA:
      HpAlloc = 32;
      I64[(young<c4je> + 8)] = c4je;
      call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
  c4je:
      goto c4jd;
  c4mz:
      _c4jg::I64 = _s47s::I64;
      _s47v::I64 = _c4jg::I64;
      _c4jl::I64 = %MO_S_Ge_W64(_s47v::I64, 44032);
      _s47X::I64 = _c4jl::I64;
      if (_s47X::I64 >= 1) goto c4oJ; else goto c4oH;
  c4oJ:
      _c4jr::I64 = %MO_S_Le_W64(_s47v::I64, 55203);
      _s47Z::I64 = _c4jr::I64;
      if (_s47Z::I64 >= 1) goto c4oG; else goto c4oH;
  c4oG:
      _c4jx::P64 = Hp - 21;
      I64[Hp - 24] = $s$wa_s481_info;
      P64[Hp - 16] = _s46l::P64;
      P64[Hp - 8] = _s46A::P64;
      I64[Hp] = _s47j::I64;
      I64[(young<c4o9> + 8)] = c4o9;
      R3 = 0;
      R2 = _s47i::I64;
      R1 = _c4jx::P64;
      call $s$wa_s481_info(R3,
                           R2,
                           R1) returns to c4o9, args: 8, res: 8, upd: 8;
  c4o9:
      _s48z::P64 = R1;
      I64[(young<c4ob> + 8)] = c4ob;
      R1 = _s48z::P64;
      if (R1 & 7 != 0) goto c4ob; else goto c4oc;
  c4oc:
      call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
  c4ob:
      _s48A::P64 = R1;
      _s48B::I64 = I64[_s48A::P64 + 7];
      I64[(young<c4og> + 8)] = c4og;
      R4 = _s47s::I64;
      R3 = _s48B::I64;
      R2 = _s46A::P64;
      call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
  c4og:
      _s48E::P64 = R1;
      I64[(young<c4oi> + 8)] = c4oi;
      R1 = _s48E::P64;
      if (R1 & 7 != 0) goto c4oi; else goto c4oj;
  c4oj:
      call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
  c4oi:
      _s48F::P64 = R1;
      _s48G::P64 = P64[_s48F::P64 + 7];
      _s48H::P64 = P64[_s48F::P64 + 15];
      I64[(young<c4on> + 8)] = c4on;
      R1 = _s48G::P64;
      if (R1 & 7 != 0) goto c4on; else goto c4oo;
  c4oo:
      call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
  c4on:
      _s48I::P64 = R1;
      _s48J::I64 = I64[_s48I::P64 + 7];
      I64[(young<c4os> + 8)] = c4os;
      R1 = _s48H::P64;
      if (R1 & 7 != 0) goto c4os; else goto c4oz;
  c4oz:
      call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
  c4os:
      _s48K::P64 = R1;
      _s48L::I64 = I64[_s48K::P64 + 7];
      _s47j::I64 = _s48L::I64;
      _s47i::I64 = _s48J::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4oH:
      Hp = Hp - 32;
      goto s47w;
  s47w:
      _c4mF::I64 = %MO_S_Lt_W64(_s47v::I64, 192);
      _s47y::I64 = _c4mF::I64;
      if (_s47y::I64 >= 1) goto c4o3; else goto c4o4;
  c4o3:
      _s47N::I64 = _s47j::I64;
      if (%MO_S_Lt_W64(_s47N::I64, 1)) goto c4o0; else goto c4o1;
  c4o0:
      if (_s47N::I64 != 0) goto c4nx; else goto c4ny;
  c4ny:
      _c4qC::I64 = _s47i::I64 + 1;
      _s47P::I64 = _c4qC::I64;
      _s47j::I64 = 1;
      _s47i::I64 = _s47P::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o1:
      if (_s47N::I64 != 1) goto c4nx; else goto c4nU;
  c4nU:
      _c4nC::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
      _s47Q::I64 = _c4nC::I64;
      if (_s47Q::I64 >= 1) goto c4nW; else goto c4nX;
  c4nW:
      _c4qE::I64 = _s47i::I64 + 1;
      _s47W::I64 = _c4qE::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47W::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nX:
      _c4nH::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
      _s47S::I64 = _c4nH::I64;
      if (_s47S::I64 >= 1) goto c4nR; else goto c4nS;
  c4nR:
      _c4qH::I64 = _s47i::I64 + 1;
      _s47V::I64 = _c4qH::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47V::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nS:
      _c4qI::I64 = _s47i::I64 + 2;
      _s47U::I64 = _c4qI::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47U::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o4:
      _c4mK::I64 = %MO_S_Le_W64(_s47v::I64, 195101);
      _s47A::I64 = _c4mK::I64;
      if (_s47A::I64 >= 1) goto c4ns; else goto c4nt;
  c4ns:
      _s47D::I64 = _s47j::I64;
      if (%MO_S_Lt_W64(_s47D::I64, 1)) goto c4nn; else goto c4no;
  c4nn:
      if (_s47D::I64 != 0) goto c4nx; else goto c4mV;
  c4mV:
      _c4qJ::I64 = _s47i::I64 + 1;
      _s47F::I64 = _c4qJ::I64;
      _s47j::I64 = 1;
      _s47i::I64 = _s47F::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4no:
      if (_s47D::I64 != 1) goto c4nx; else goto c4nh;
  c4nx:
      R1 = lvl2_r45K_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4nh:
      _c4mZ::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
      _s47G::I64 = _c4mZ::I64;
      if (_s47G::I64 >= 1) goto c4nj; else goto c4nk;
  c4nj:
      _c4qL::I64 = _s47i::I64 + 1;
      _s47M::I64 = _c4qL::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47M::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nk:
      _c4n4::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
      _s47I::I64 = _c4n4::I64;
      if (_s47I::I64 >= 1) goto c4ne; else goto c4nf;
  c4ne:
      _c4qO::I64 = _s47i::I64 + 1;
      _s47L::I64 = _c4qO::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47L::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nf:
      _c4qP::I64 = _s47i::I64 + 2;
      _s47K::I64 = _c4qP::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47K::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nt:
      R1 = lvl1_r45J_closure;
      call (I64[R1])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.243478 UTC

{offset
  c4kX:
      _s49l::P64 = R1;
      if ((Sp + 8) - 104 < SpLim) goto c4kY; else goto c4kZ;
  c4kY:
      R1 = _s49l::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c4kZ:
      _s464::P64 = P64[_s49l::P64 + 7];
      _s465::I64 = I64[_s49l::P64 + 15];
      _s466::I64 = I64[_s49l::P64 + 23];
      _c4hp::I64 = _s466::I64 + 11;
      _s46a::I64 = _c4hp::I64;
      _c4hs::I64 = %MO_S_Lt_W64(_s46a::I64, 0);
      _s46b::I64 = _c4hs::I64;
      if (_s46b::I64 >= 1) goto c4pB; else goto c4pC;
  c4pC:
      _c4hx::I64 = _s46a::I64 & 4611686018427387904;
      _s46d::I64 = _c4hx::I64;
      if (_s46d::I64 != 0) goto c4pB; else goto c4l6;
  c4l6:
      _c4hE::I64 = _s46a::I64 << 1;
      _s46f::I64 = _c4hE::I64;
      I64[Sp - 40] = c4hH;
      R1 = _s46f::I64;
      P64[Sp - 32] = _s464::P64;
      I64[Sp - 24] = _s465::I64;
      I64[Sp - 16] = _s466::I64;
      I64[Sp - 8] = _s46a::I64;
      Sp = Sp - 40;
      call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4hH:
      _s464::P64 = P64[Sp + 8];
      _s465::I64 = I64[Sp + 16];
      _s466::I64 = I64[Sp + 24];
      _s46a::I64 = I64[Sp + 32];
      _s46i::P64 = R1;
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4la; else goto c4l9;
  c4la:
      HpAlloc = 80;
      R1 = _s46i::P64;
      call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4l9:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      _s46l::P64 = Hp - 72;
      _s46l::P64 = _s46l::P64;
      _c4hJ::P64 = Hp - 7;
      I64[Hp - 8] = go1_s46m_info;
      P64[Hp] = _s46l::P64;
      I64[Sp - 16] = c4hL;
      R2 = 0;
      R1 = _c4hJ::P64;
      P64[Sp - 8] = _s46l::P64;
      P64[Sp] = _s46i::P64;
      Sp = Sp - 16;
      call go1_s46m_info(R2,
                         R1) returns to c4hL, args: 8, res: 8, upd: 8;
  c4hL:
      _s464::P64 = P64[Sp + 24];
      _s465::I64 = I64[Sp + 32];
      _s466::I64 = I64[Sp + 40];
      _s46a::I64 = I64[Sp + 48];
      _s46i::P64 = P64[Sp + 16];
      _s46l::P64 = P64[Sp + 8];
      _s46u::P64 = R1;
      I64[Sp] = c4hP;
      R2 = _s46u::P64;
      call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
  c4hP:
      _s464::P64 = P64[Sp + 24];
      _s465::I64 = I64[Sp + 32];
      _s466::I64 = I64[Sp + 40];
      _s46a::I64 = I64[Sp + 48];
      _s46i::P64 = P64[Sp + 16];
      _s46l::P64 = P64[Sp + 8];
      _s46x::P64 = R1;
      _c4hR::I64 = _s465::I64 + _s466::I64;
      _s46y::I64 = _c4hR::I64;
      _c4pD::I64 = _s46a::I64 - 1;
      _s49j::I64 = _c4pD::I64;
      _s46E::I64 = 0;
      _s46D::I64 = 0;
      _s46C::I64 = _s465::I64;
      _s46B::I64 = _s49j::I64;
      _s46A::P64 = _s46i::P64;
      goto c4hW;
  c4hW:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c4lf; else goto c4le;
  c4lf:
      HpAlloc = 24;
      I64[Sp - 16] = c4hX;
      I64[Sp - 8] = _s46E::I64;
      I64[Sp] = _s46D::I64;
      I64[Sp + 16] = _s46C::I64;
      I64[Sp + 32] = _s46B::I64;
      P64[Sp + 40] = _s46A::P64;
      I64[Sp + 48] = _s46y::I64;
      Sp = Sp - 16;
      call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
  c4hX:
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 48];
      _s46C::I64 = I64[Sp + 32];
      _s46D::I64 = I64[Sp + 16];
      _s46E::I64 = I64[Sp + 8];
      goto u4r2;
  u4r2:
      Sp = Sp + 16;
      goto c4hW;
  c4le:
      _c4hZ::I64 = _s46B::I64 * 2;
      _s46G::I64 = _c4hZ::I64;
      I64[Hp - 16] = lvl3_s46H_info;
      I64[Hp] = _s46G::I64;
      _c4i2::P64 = Hp - 16;
      _s47j::I64 = _s46E::I64;
      _s47i::I64 = _s46D::I64;
      _s47h::I64 = _s46C::I64;
      goto c4ic;
  c4ic:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4mx; else goto c4mw;
  c4mx:
      HpAlloc = 48;
      I64[Sp - 32] = c4id;
      I64[Sp - 24] = _s47h::I64;
      I64[Sp - 16] = _s47i::I64;
      I64[Sp - 8] = _s47j::I64;
      I64[Sp] = _s46G::I64;
      I64[Sp + 16] = _s46B::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 32;
      call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
  c4id:
      _c4i2::P64 = P64[Sp + 80];
      _s464::P64 = P64[Sp + 56];
      _s46l::P64 = P64[Sp + 40];
      _s46y::I64 = I64[Sp + 72];
      _s46A::P64 = P64[Sp + 64];
      _s46B::I64 = I64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s47h::I64 = I64[Sp + 8];
      _s47i::I64 = I64[Sp + 16];
      _s47j::I64 = I64[Sp + 24];
      goto u4r3;
  u4r3:
      Sp = Sp + 32;
      goto c4ic;
  c4mw:
      _c4if::I64 = _s47i::I64 + 11;
      _s47l::I64 = _c4if::I64;
      _c4ii::I64 = %MO_S_Lt_W64(_s46B::I64, _s47l::I64);
      _s47m::I64 = _c4ii::I64;
      if (_s47m::I64 >= 1) goto c4pv; else goto c4pw;
  c4pv:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s47j::I64;
      _c4io::P64 = Hp - 39;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s47i::I64;
      _c4ip::P64 = Hp - 23;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s47h::I64;
      _c4iq::P64 = Hp - 7;
      _B2::P64 = _c4io::P64;
      _B3::P64 = _c4ip::P64;
      _B4::P64 = _c4iq::P64;
      _s477::P64 = _B2::P64;
      _s476::P64 = _B3::P64;
      _s475::P64 = _B4::P64;
      I64[Sp - 16] = c4m8;
      R1 = _s475::P64;
      P64[Sp - 8] = _s477::P64;
      P64[Sp] = _s476::P64;
      I64[Sp + 16] = _s46G::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4m8; else goto c4m9;
  c4m9:
      call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
  c4m8:
      _c4i2::P64 = P64[Sp + 64];
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s476::P64 = P64[Sp + 16];
      _s477::P64 = P64[Sp + 8];
      _s479::P64 = R1;
      _s47a::I64 = I64[_s479::P64 + 7];
      I64[Sp] = c4md;
      R1 = _s476::P64;
      I64[Sp + 16] = _s47a::I64;
      if (R1 & 7 != 0) goto c4md; else goto c4me;
  c4me:
      call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
  c4md:
      _c4i2::P64 = P64[Sp + 64];
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s477::P64 = P64[Sp + 8];
      _s47a::I64 = I64[Sp + 16];
      _s47b::P64 = R1;
      _s47c::I64 = I64[_s47b::P64 + 7];
      I64[Sp] = c4mi;
      R1 = _s477::P64;
      I64[Sp + 8] = _s47c::I64;
      if (R1 & 7 != 0) goto c4mi; else goto c4mm;
  c4mm:
      call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
  c4mi:
      _c4i2::P64 = P64[Sp + 64];
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s47a::I64 = I64[Sp + 16];
      _s47c::I64 = I64[Sp + 8];
      _s47d::P64 = R1;
      _s47e::I64 = I64[_s47d::P64 + 7];
      _s46M::I64 = _s47e::I64;
      _s46L::I64 = _s47c::I64;
      _s46K::I64 = _s47a::I64;
      I64[Sp] = c4lj;
      R1 = _c4i2::P64;
      I64[Sp + 8] = _s46M::I64;
      I64[Sp + 16] = _s46L::I64;
      I64[Sp + 64] = _s46K::I64;
      if (R1 & 7 != 0) goto c4lj; else goto c4ll;
  c4ll:
      call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
  c4lj:
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s46K::I64 = I64[Sp + 64];
      _s46L::I64 = I64[Sp + 16];
      _s46M::I64 = I64[Sp + 8];
      _s46O::P64 = R1;
      _c4m1::P64 = _s46O::P64 & 7;
      if (_c4m1::P64 >= 2) goto u4r4; else goto c4m4;
  u4r4:
      Sp = Sp + 72;
      goto c4pB;
  c4m4:
      _c4lq::I64 = _s46G::I64 & 4611686018427387904;
      _s46P::I64 = _c4lq::I64;
      if (_s46P::I64 != 0) goto u4r5; else goto c4lB;
  u4r5:
      Sp = Sp + 72;
      goto c4pB;
  c4pB:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4lB:
      _c4lF::I64 = _s46G::I64 << 1;
      _s46R::I64 = _c4lF::I64;
      I64[Sp] = c4lI;
      R1 = _s46R::I64;
      call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
  c4lI:
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s46K::I64 = I64[Sp + 64];
      _s46L::I64 = I64[Sp + 16];
      _s46M::I64 = I64[Sp + 8];
      _s46U::P64 = R1;
      _c4lL::I64 = %MO_S_Le_W64(_s46L::I64, 0);
      _s46V::I64 = _c4lL::I64;
      if (_s46V::I64 >= 1) goto c4lT; else goto c4lU;
  c4lT:
      _c4pG::I64 = _s46G::I64 - 1;
      _s472::I64 = _c4pG::I64;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s472::I64;
      _s46A::P64 = _s46U::P64;
      goto u4r6;
  u4r6:
      Sp = Sp + 16;
      goto c4hW;
  c4lU:
      _c4pH::I64 = _s46L::I64;
      _s46Y::I64 = _c4pH::I64;
      _c4pK::I64 = _hs_text_memcpy;
      _c4pL::P64 = _s46U::P64 + 16;
      _c4pM::I64 = 0;
      _c4pN::P64 = _s46A::P64 + 16;
      _c4pO::I64 = 0;
      _c4pP::I64 = _s46Y::I64;
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] (_c4pK::I64)(_c4pL::P64, _c4pM::I64, _c4pN::P64, _c4pO::I64, _c4pP::I64);
      _c4pQ::I64 = _s46G::I64 - 1;
      _s471::I64 = _c4pQ::I64;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s471::I64;
      _s46A::P64 = _s46U::P64;
      goto u4r7;
  u4r7:
      Sp = Sp + 16;
      goto c4hW;
  c4pw:
      _c4j3::I64 = %MO_S_Ge_W64(_s47h::I64, _s46y::I64);
      _s47o::I64 = _c4j3::I64;
      if (_s47o::I64 >= 1) goto c4pr; else goto c4ps;
  c4pr:
      _s499::P64 = _s46A::P64;
      _s499::P64 = _s499::P64;
      _s49a::I64 = _s47i::I64;
      if (_s49a::I64 != 0) goto c4pe; else goto c4ph;
  c4pe:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s499::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s49a::I64;
      _c4pc::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4pc::P64;
      Sp = Sp + 56;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4ph:
      Hp = Hp - 48;
      I64[Sp + 48] = c4pg;
      R1 = empty_closure;
      Sp = Sp + 48;
      if (R1 & 7 != 0) goto c4pg; else goto c4pi;
  c4pi:
      call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
  c4pg:
      _s49c::P64 = R1;
      _s49d::P64 = P64[_s49c::P64 + 7];
      _s49e::I64 = I64[_s49c::P64 + 15];
      _s49f::I64 = I64[_s49c::P64 + 23];
      R1 = _s49c::P64;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4ps:
      _c4j8::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
      _s47q::I64 = _c4j8::I64;
      _c4oL::I64 = _s47q::I64 >= 55296;
      _s48M::I64 = _c4oL::I64;
      if (_s48M::I64 >= 1) goto c4p7; else goto c4p8;
  c4p7:
      _c4oT::I64 = _s47q::I64 <= 56319;
      _s48R::I64 = _c4oT::I64;
      if (_s48R::I64 >= 1) goto c4p2; else goto c4p3;
  c4p2:
      _c4pT::I64 = _s47h::I64 + 1;
      _s48W::I64 = _c4pT::I64;
      _c4pW::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s48W::I64 << 1)]);
      _s48X::I64 = _c4pW::I64;
      _c4pZ::I64 = _s47h::I64 + 2;
      _s496::I64 = _c4pZ::I64;
      _c4q2::I64 = _s48X::I64;
      _s491::I64 = _c4q2::I64;
      _c4q5::I64 = _s491::I64 - 56320;
      _s492::I64 = _c4q5::I64;
      _c4q8::I64 = _s47q::I64;
      _s48Y::I64 = _c4q8::I64;
      _c4qb::I64 = _s48Y::I64 - 55296;
      _s48Z::I64 = _c4qb::I64;
      _c4qe::I64 = _s48Z::I64 << 10;
      _s490::I64 = _c4qe::I64;
      _c4qh::I64 = _s490::I64 + _s492::I64;
      _s493::I64 = _c4qh::I64;
      _c4qk::I64 = _s493::I64 + 65536;
      _s494::I64 = _c4qk::I64;
      _c4qn::I64 = _s494::I64;
      _s495::I64 = _c4qn::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s496::I64;
      _s47s::I64 = _s495::I64;
      goto c4jd;
  c4p3:
      _c4qo::I64 = _s47h::I64 + 1;
      _s48V::I64 = _c4qo::I64;
      _c4qr::I64 = _s47q::I64;
      _s48T::I64 = _c4qr::I64;
      _c4qu::I64 = _s48T::I64;
      _s48U::I64 = _c4qu::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s48V::I64;
      _s47s::I64 = _s48U::I64;
      goto c4jd;
  c4p8:
      _c4qv::I64 = _s47h::I64 + 1;
      _s48Q::I64 = _c4qv::I64;
      _c4qy::I64 = _s47q::I64;
      _s48O::I64 = _c4qy::I64;
      _c4qB::I64 = _s48O::I64;
      _s48P::I64 = _c4qB::I64;
      Hp = Hp - 48;
      _s47t::I64 = _s48Q::I64;
      _s47s::I64 = _s48P::I64;
      goto c4jd;
  c4jd:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4mA; else goto c4mz;
  c4mA:
      HpAlloc = 32;
      I64[Sp - 40] = c4je;
      I64[Sp - 32] = _s47i::I64;
      I64[Sp - 24] = _s47j::I64;
      I64[Sp - 16] = _s47s::I64;
      I64[Sp - 8] = _s47t::I64;
      I64[Sp] = _s46G::I64;
      I64[Sp + 16] = _s46B::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 40;
      call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
  c4je:
      _c4i2::P64 = P64[Sp + 88];
      _s464::P64 = P64[Sp + 64];
      _s46l::P64 = P64[Sp + 48];
      _s46y::I64 = I64[Sp + 80];
      _s46A::P64 = P64[Sp + 72];
      _s46B::I64 = I64[Sp + 56];
      _s46G::I64 = I64[Sp + 40];
      _s47i::I64 = I64[Sp + 8];
      _s47j::I64 = I64[Sp + 16];
      _s47s::I64 = I64[Sp + 24];
      _s47t::I64 = I64[Sp + 32];
      goto u4r8;
  u4r8:
      Sp = Sp + 40;
      goto c4jd;
  c4mz:
      _c4jg::I64 = _s47s::I64;
      _s47v::I64 = _c4jg::I64;
      _c4jl::I64 = %MO_S_Ge_W64(_s47v::I64, 44032);
      _s47X::I64 = _c4jl::I64;
      if (_s47X::I64 >= 1) goto c4oJ; else goto c4oH;
  c4oJ:
      _c4jr::I64 = %MO_S_Le_W64(_s47v::I64, 55203);
      _s47Z::I64 = _c4jr::I64;
      if (_s47Z::I64 >= 1) goto c4oG; else goto c4oH;
  c4oG:
      _c4jx::P64 = Hp - 21;
      I64[Hp - 24] = $s$wa_s481_info;
      P64[Hp - 16] = _s46l::P64;
      P64[Hp - 8] = _s46A::P64;
      I64[Hp] = _s47j::I64;
      I64[Sp - 24] = c4o9;
      R3 = 0;
      R2 = _s47i::I64;
      R1 = _c4jx::P64;
      I64[Sp - 16] = _s47s::I64;
      I64[Sp - 8] = _s47t::I64;
      I64[Sp] = _s46G::I64;
      I64[Sp + 16] = _s46B::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 24;
      call $s$wa_s481_info(R3,
                           R2,
                           R1) returns to c4o9, args: 8, res: 8, upd: 8;
  c4o9:
      _c4i2::P64 = P64[Sp + 72];
      _s464::P64 = P64[Sp + 48];
      _s46l::P64 = P64[Sp + 32];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 40];
      _s46G::I64 = I64[Sp + 24];
      _s47s::I64 = I64[Sp + 8];
      _s47t::I64 = I64[Sp + 16];
      _s48z::P64 = R1;
      I64[Sp] = c4ob;
      R1 = _s48z::P64;
      if (R1 & 7 != 0) goto c4ob; else goto c4oc;
  c4oc:
      call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
  c4ob:
      _c4i2::P64 = P64[Sp + 72];
      _s464::P64 = P64[Sp + 48];
      _s46l::P64 = P64[Sp + 32];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 40];
      _s46G::I64 = I64[Sp + 24];
      _s47s::I64 = I64[Sp + 8];
      _s47t::I64 = I64[Sp + 16];
      _s48A::P64 = R1;
      _s48B::I64 = I64[_s48A::P64 + 7];
      I64[Sp + 8] = c4og;
      R4 = _s47s::I64;
      R3 = _s48B::I64;
      R2 = _s46A::P64;
      Sp = Sp + 8;
      call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
  c4og:
      _c4i2::P64 = P64[Sp + 64];
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46B::I64 = I64[Sp + 32];
      _s46G::I64 = I64[Sp + 16];
      _s47t::I64 = I64[Sp + 8];
      _s48E::P64 = R1;
      I64[Sp] = c4oi;
      R1 = _s48E::P64;
      if (R1 & 7 != 0) goto c4oi; else goto c4oj;
  c4oj:
      call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
  c4oi:
      _c4i2::P64 = P64[Sp + 64];
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46A::P64 = P64[Sp + 48];
      _s46B::I64 = I64[Sp + 32];
      _s46G::I64 = I64[Sp + 16];
      _s47t::I64 = I64[Sp + 8];
      _s48F::P64 = R1;
      _s48G::P64 = P64[_s48F::P64 + 7];
      _s48H::P64 = P64[_s48F::P64 + 15];
      I64[Sp - 8] = c4on;
      R1 = _s48G::P64;
      P64[Sp] = _s48H::P64;
      Sp = Sp - 8;
      if (R1 & 7 != 0) goto c4on; else goto c4oo;
  c4oo:
      call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
  c4on:
      _c4i2::P64 = P64[Sp + 72];
      _s464::P64 = P64[Sp + 48];
      _s46l::P64 = P64[Sp + 32];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 40];
      _s46G::I64 = I64[Sp + 24];
      _s47t::I64 = I64[Sp + 16];
      _s48H::P64 = P64[Sp + 8];
      _s48I::P64 = R1;
      _s48J::I64 = I64[_s48I::P64 + 7];
      I64[Sp] = c4os;
      R1 = _s48H::P64;
      I64[Sp + 8] = _s48J::I64;
      if (R1 & 7 != 0) goto c4os; else goto c4oz;
  c4oz:
      call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
  c4os:
      _c4i2::P64 = P64[Sp + 72];
      _s464::P64 = P64[Sp + 48];
      _s46l::P64 = P64[Sp + 32];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 40];
      _s46G::I64 = I64[Sp + 24];
      _s47t::I64 = I64[Sp + 16];
      _s48J::I64 = I64[Sp + 8];
      _s48K::P64 = R1;
      _s48L::I64 = I64[_s48K::P64 + 7];
      _s47j::I64 = _s48L::I64;
      _s47i::I64 = _s48J::I64;
      _s47h::I64 = _s47t::I64;
      goto u4r9;
  u4r9:
      Sp = Sp + 24;
      goto c4ic;
  c4oH:
      Hp = Hp - 32;
      goto s47w;
  s47w:
      _c4mF::I64 = %MO_S_Lt_W64(_s47v::I64, 192);
      _s47y::I64 = _c4mF::I64;
      if (_s47y::I64 >= 1) goto c4o3; else goto c4o4;
  c4o3:
      _s47N::I64 = _s47j::I64;
      if (%MO_S_Lt_W64(_s47N::I64, 1)) goto c4o0; else goto c4o1;
  c4o0:
      if (_s47N::I64 != 0) goto c4nx; else goto c4ny;
  c4ny:
      _c4qC::I64 = _s47i::I64 + 1;
      _s47P::I64 = _c4qC::I64;
      _s47j::I64 = 1;
      _s47i::I64 = _s47P::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o1:
      if (_s47N::I64 != 1) goto c4nx; else goto c4nU;
  c4nU:
      _c4nC::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
      _s47Q::I64 = _c4nC::I64;
      if (_s47Q::I64 >= 1) goto c4nW; else goto c4nX;
  c4nW:
      _c4qE::I64 = _s47i::I64 + 1;
      _s47W::I64 = _c4qE::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47W::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nX:
      _c4nH::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
      _s47S::I64 = _c4nH::I64;
      if (_s47S::I64 >= 1) goto c4nR; else goto c4nS;
  c4nR:
      _c4qH::I64 = _s47i::I64 + 1;
      _s47V::I64 = _c4qH::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47V::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nS:
      _c4qI::I64 = _s47i::I64 + 2;
      _s47U::I64 = _c4qI::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47U::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o4:
      _c4mK::I64 = %MO_S_Le_W64(_s47v::I64, 195101);
      _s47A::I64 = _c4mK::I64;
      if (_s47A::I64 >= 1) goto c4ns; else goto c4nt;
  c4ns:
      _s47D::I64 = _s47j::I64;
      if (%MO_S_Lt_W64(_s47D::I64, 1)) goto c4nn; else goto c4no;
  c4nn:
      if (_s47D::I64 != 0) goto c4nx; else goto c4mV;
  c4mV:
      _c4qJ::I64 = _s47i::I64 + 1;
      _s47F::I64 = _c4qJ::I64;
      _s47j::I64 = 1;
      _s47i::I64 = _s47F::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4no:
      if (_s47D::I64 != 1) goto c4nx; else goto c4nh;
  c4nx:
      R1 = lvl2_r45K_closure;
      Sp = Sp + 56;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4nh:
      _c4mZ::I64 = %MO_S_Lt_W64(_s47v::I64, 768);
      _s47G::I64 = _c4mZ::I64;
      if (_s47G::I64 >= 1) goto c4nj; else goto c4nk;
  c4nj:
      _c4qL::I64 = _s47i::I64 + 1;
      _s47M::I64 = _c4qL::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47M::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nk:
      _c4n4::I64 = %MO_S_Gt_W64(_s47v::I64, 125142);
      _s47I::I64 = _c4n4::I64;
      if (_s47I::I64 >= 1) goto c4ne; else goto c4nf;
  c4ne:
      _c4qO::I64 = _s47i::I64 + 1;
      _s47L::I64 = _c4qO::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47L::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nf:
      _c4qP::I64 = _s47i::I64 + 2;
      _s47K::I64 = _c4qP::I64;
      _s47j::I64 = 0;
      _s47i::I64 = _s47K::I64;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nt:
      R1 = lvl1_r45J_closure;
      Sp = Sp + 56;
      call (I64[R1])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.251176 UTC

{offset
  c4kX:
      if ((Sp + -96) < SpLim) goto c4kY; else goto c4kZ;
  c4kY:
      R1 = R1;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c4kZ:
      _s466::I64 = I64[R1 + 23];
      _s46a::I64 = _s466::I64 + 11;
      if (%MO_S_Lt_W64(_s46a::I64, 0)) goto c4pB; else goto c4pC;
  c4pC:
      if (_s46a::I64 & 4611686018427387904 != 0) goto c4pB; else goto c4l6;
  c4l6:
      I64[Sp - 40] = c4hH;
      _s464::P64 = P64[R1 + 7];
      _s465::I64 = I64[R1 + 15];
      R1 = _s46a::I64 << 1;
      P64[Sp - 32] = _s464::P64;
      I64[Sp - 24] = _s465::I64;
      I64[Sp - 16] = _s466::I64;
      I64[Sp - 8] = _s46a::I64;
      Sp = Sp - 40;
      call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4hH:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c4la; else goto c4l9;
  c4la:
      HpAlloc = 80;
      R1 = R1;
      call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
  c4l9:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      I64[Hp - 8] = go1_s46m_info;
      _s46l::P64 = Hp - 72;
      P64[Hp] = _s46l::P64;
      I64[Sp - 16] = c4hL;
      R2 = 0;
      _s46i::P64 = R1;
      R1 = Hp - 7;
      P64[Sp - 8] = _s46l::P64;
      P64[Sp] = _s46i::P64;
      Sp = Sp - 16;
      call go1_s46m_info(R2,
                         R1) returns to c4hL, args: 8, res: 8, upd: 8;
  c4hL:
      I64[Sp] = c4hP;
      R2 = R1;
      call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
  c4hP:
      _s464::P64 = P64[Sp + 24];
      _s465::I64 = I64[Sp + 32];
      _s46l::P64 = P64[Sp + 8];
      _s46y::I64 = _s465::I64 + I64[Sp + 40];
      _s46E::I64 = 0;
      _s46D::I64 = 0;
      _s46C::I64 = _s465::I64;
      _s46B::I64 = I64[Sp + 48] - 1;
      _s46A::P64 = P64[Sp + 16];
      goto c4hW;
  c4hW:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c4lf; else goto c4le;
  c4lf:
      HpAlloc = 24;
      I64[Sp - 16] = c4hX;
      I64[Sp - 8] = _s46E::I64;
      I64[Sp] = _s46D::I64;
      I64[Sp + 16] = _s46C::I64;
      I64[Sp + 32] = _s46B::I64;
      P64[Sp + 40] = _s46A::P64;
      I64[Sp + 48] = _s46y::I64;
      Sp = Sp - 16;
      call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
  c4hX:
      goto u4r2;
  u4r2:
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 48];
      _s46C::I64 = I64[Sp + 32];
      _s46D::I64 = I64[Sp + 16];
      _s46E::I64 = I64[Sp + 8];
      Sp = Sp + 16;
      goto c4hW;
  c4le:
      I64[Hp - 16] = lvl3_s46H_info;
      _s46G::I64 = _s46B::I64 << 1;
      I64[Hp] = _s46G::I64;
      _c4i2::P64 = Hp - 16;
      _s47j::I64 = _s46E::I64;
      _s47i::I64 = _s46D::I64;
      _s47h::I64 = _s46C::I64;
      goto c4ic;
  c4ic:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4mx; else goto c4mw;
  c4mx:
      HpAlloc = 48;
      I64[Sp - 32] = c4id;
      I64[Sp - 24] = _s47h::I64;
      I64[Sp - 16] = _s47i::I64;
      I64[Sp - 8] = _s47j::I64;
      I64[Sp] = _s46G::I64;
      I64[Sp + 16] = _s46B::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 32;
      call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
  c4id:
      goto u4r3;
  u4r3:
      _c4i2::P64 = P64[Sp + 80];
      _s464::P64 = P64[Sp + 56];
      _s46l::P64 = P64[Sp + 40];
      _s46y::I64 = I64[Sp + 72];
      _s46A::P64 = P64[Sp + 64];
      _s46B::I64 = I64[Sp + 48];
      _s46G::I64 = I64[Sp + 32];
      _s47h::I64 = I64[Sp + 8];
      _s47i::I64 = I64[Sp + 16];
      _s47j::I64 = I64[Sp + 24];
      Sp = Sp + 32;
      goto c4ic;
  c4mw:
      if (%MO_S_Lt_W64(_s46B::I64,
                       _s47i::I64 + 11)) goto c4pv; else goto c4pw;
  c4pv:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s47j::I64;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s47i::I64;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s47h::I64;
      I64[Sp - 16] = c4m8;
      R1 = Hp - 7;
      P64[Sp - 8] = Hp - 39;
      P64[Sp] = Hp - 23;
      I64[Sp + 16] = _s46G::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4m8; else goto c4m9;
  c4m9:
      call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
  c4m8:
      I64[Sp] = c4md;
      _s47a::I64 = I64[R1 + 7];
      R1 = P64[Sp + 16];
      I64[Sp + 16] = _s47a::I64;
      if (R1 & 7 != 0) goto c4md; else goto c4me;
  c4me:
      call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
  c4md:
      I64[Sp] = c4mi;
      _s47c::I64 = I64[R1 + 7];
      R1 = P64[Sp + 8];
      I64[Sp + 8] = _s47c::I64;
      if (R1 & 7 != 0) goto c4mi; else goto c4mm;
  c4mm:
      call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
  c4mi:
      I64[Sp] = c4lj;
      _s46M::I64 = I64[R1 + 7];
      R1 = P64[Sp + 64];
      _s46L::I64 = I64[Sp + 8];
      I64[Sp + 8] = _s46M::I64;
      _s46K::I64 = I64[Sp + 16];
      I64[Sp + 16] = _s46L::I64;
      I64[Sp + 64] = _s46K::I64;
      if (R1 & 7 != 0) goto c4lj; else goto c4ll;
  c4ll:
      call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
  c4lj:
      if (R1 & 7 >= 2) goto u4r4; else goto c4m4;
  u4r4:
      Sp = Sp + 72;
      goto c4pB;
  c4m4:
      _s46G::I64 = I64[Sp + 32];
      if (_s46G::I64 & 4611686018427387904 != 0) goto u4r5; else goto c4lB;
  u4r5:
      Sp = Sp + 72;
      goto c4pB;
  c4pB:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4lB:
      I64[Sp] = c4lI;
      R1 = _s46G::I64 << 1;
      call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
  c4lI:
      _s464::P64 = P64[Sp + 40];
      _s46l::P64 = P64[Sp + 24];
      _s46y::I64 = I64[Sp + 56];
      _s46G::I64 = I64[Sp + 32];
      _s46K::I64 = I64[Sp + 64];
      _s46L::I64 = I64[Sp + 16];
      _s46M::I64 = I64[Sp + 8];
      if (%MO_S_Le_W64(_s46L::I64, 0)) goto c4lT; else goto c4lU;
  c4lT:
      goto u4r6;
  u4r6:
      Sp = Sp + 16;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s46G::I64 - 1;
      _s46A::P64 = R1;
      goto c4hW;
  c4lU:
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 48] + 16, 0, _s46L::I64);
      goto u4r7;
  u4r7:
      Sp = Sp + 16;
      _s46E::I64 = _s46M::I64;
      _s46D::I64 = _s46L::I64;
      _s46C::I64 = _s46K::I64;
      _s46B::I64 = _s46G::I64 - 1;
      _s46A::P64 = R1;
      goto c4hW;
  c4pw:
      if (%MO_S_Ge_W64(_s47h::I64,
                       _s46y::I64)) goto c4pr; else goto c4ps;
  c4pr:
      if (_s47i::I64 != 0) goto c4pe; else goto c4ph;
  c4pe:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s46A::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s47i::I64;
      _c4pc::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4pc::P64;
      Sp = Sp + 56;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4ph:
      Hp = Hp - 48;
      I64[Sp + 48] = c4pg;
      R1 = empty_closure;
      Sp = Sp + 48;
      if (R1 & 7 != 0) goto c4pg; else goto c4pi;
  c4pi:
      call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
  c4pg:
      R1 = R1;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4ps:
      _s47q::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
      if (_s47q::I64 >= 55296) goto c4p7; else goto c4p8;
  c4p7:
      if (_s47q::I64 <= 56319) goto c4p2; else goto c4p3;
  c4p2:
      Hp = Hp - 48;
      _s47t::I64 = _s47h::I64 + 2;
      _s47s::I64 = ((_s47q::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + ((_s47h::I64 + 1) << 1)]) - 56320) + 65536;
      goto c4jd;
  c4p3:
      Hp = Hp - 48;
      _s47t::I64 = _s47h::I64 + 1;
      _s47s::I64 = _s47q::I64;
      goto c4jd;
  c4p8:
      Hp = Hp - 48;
      _s47t::I64 = _s47h::I64 + 1;
      _s47s::I64 = _s47q::I64;
      goto c4jd;
  c4jd:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4mA; else goto c4mz;
  c4mA:
      HpAlloc = 32;
      I64[Sp - 40] = c4je;
      I64[Sp - 32] = _s47i::I64;
      I64[Sp - 24] = _s47j::I64;
      I64[Sp - 16] = _s47s::I64;
      I64[Sp - 8] = _s47t::I64;
      I64[Sp] = _s46G::I64;
      I64[Sp + 16] = _s46B::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 40;
      call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
  c4je:
      goto u4r8;
  u4r8:
      _c4i2::P64 = P64[Sp + 88];
      _s464::P64 = P64[Sp + 64];
      _s46l::P64 = P64[Sp + 48];
      _s46y::I64 = I64[Sp + 80];
      _s46A::P64 = P64[Sp + 72];
      _s46B::I64 = I64[Sp + 56];
      _s46G::I64 = I64[Sp + 40];
      _s47i::I64 = I64[Sp + 8];
      _s47j::I64 = I64[Sp + 16];
      _s47s::I64 = I64[Sp + 24];
      _s47t::I64 = I64[Sp + 32];
      Sp = Sp + 40;
      goto c4jd;
  c4mz:
      _s47v::I64 = _s47s::I64;
      if (%MO_S_Ge_W64(_s47s::I64, 44032)) goto c4oJ; else goto c4oH;
  c4oJ:
      if (%MO_S_Le_W64(_s47v::I64, 55203)) goto c4oG; else goto c4oH;
  c4oG:
      I64[Hp - 24] = $s$wa_s481_info;
      P64[Hp - 16] = _s46l::P64;
      P64[Hp - 8] = _s46A::P64;
      I64[Hp] = _s47j::I64;
      I64[Sp - 24] = c4o9;
      R3 = 0;
      R2 = _s47i::I64;
      R1 = Hp - 21;
      I64[Sp - 16] = _s47s::I64;
      I64[Sp - 8] = _s47t::I64;
      I64[Sp] = _s46G::I64;
      I64[Sp + 16] = _s46B::I64;
      P64[Sp + 32] = _s46A::P64;
      I64[Sp + 40] = _s46y::I64;
      P64[Sp + 48] = _c4i2::P64;
      Sp = Sp - 24;
      call $s$wa_s481_info(R3,
                           R2,
                           R1) returns to c4o9, args: 8, res: 8, upd: 8;
  c4o9:
      I64[Sp] = c4ob;
      R1 = R1;
      if (R1 & 7 != 0) goto c4ob; else goto c4oc;
  c4oc:
      call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
  c4ob:
      _s47s::I64 = I64[Sp + 8];
      I64[Sp + 8] = c4og;
      R4 = _s47s::I64;
      R3 = I64[R1 + 7];
      R2 = P64[Sp + 56];
      Sp = Sp + 8;
      call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
  c4og:
      I64[Sp] = c4oi;
      R1 = R1;
      if (R1 & 7 != 0) goto c4oi; else goto c4oj;
  c4oj:
      call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
  c4oi:
      I64[Sp - 8] = c4on;
      _s48H::P64 = P64[R1 + 15];
      R1 = P64[R1 + 7];
      P64[Sp] = _s48H::P64;
      Sp = Sp - 8;
      if (R1 & 7 != 0) goto c4on; else goto c4oo;
  c4oo:
      call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
  c4on:
      I64[Sp] = c4os;
      _s48J::I64 = I64[R1 + 7];
      R1 = P64[Sp + 8];
      I64[Sp + 8] = _s48J::I64;
      if (R1 & 7 != 0) goto c4os; else goto c4oz;
  c4oz:
      call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
  c4os:
      goto u4r9;
  u4r9:
      _c4i2::P64 = P64[Sp + 72];
      _s464::P64 = P64[Sp + 48];
      _s46l::P64 = P64[Sp + 32];
      _s46y::I64 = I64[Sp + 64];
      _s46A::P64 = P64[Sp + 56];
      _s46B::I64 = I64[Sp + 40];
      _s46G::I64 = I64[Sp + 24];
      _s47i::I64 = I64[Sp + 8];
      _s47h::I64 = I64[Sp + 16];
      Sp = Sp + 24;
      _s47j::I64 = I64[R1 + 7];
      goto c4ic;
  c4oH:
      Hp = Hp - 32;
      goto s47w;
  s47w:
      if (%MO_S_Lt_W64(_s47v::I64, 192)) goto c4o3; else goto c4o4;
  c4o3:
      if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4o0; else goto c4o1;
  c4o0:
      if (_s47j::I64 != 0) goto c4nx; else goto c4ny;
  c4ny:
      _s47j::I64 = 1;
      _s47i::I64 = _s47i::I64 + 1;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o1:
      if (_s47j::I64 != 1) goto c4nx; else goto c4nU;
  c4nU:
      if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nW; else goto c4nX;
  c4nW:
      _s47j::I64 = 0;
      _s47i::I64 = _s47i::I64 + 1;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nX:
      if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4nR; else goto c4nS;
  c4nR:
      _s47j::I64 = 0;
      _s47i::I64 = _s47i::I64 + 1;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nS:
      _s47j::I64 = 0;
      _s47i::I64 = _s47i::I64 + 2;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4o4:
      if (%MO_S_Le_W64(_s47v::I64, 195101)) goto c4ns; else goto c4nt;
  c4ns:
      if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4nn; else goto c4no;
  c4nn:
      if (_s47j::I64 != 0) goto c4nx; else goto c4mV;
  c4mV:
      _s47j::I64 = 1;
      _s47i::I64 = _s47i::I64 + 1;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4no:
      if (_s47j::I64 != 1) goto c4nx; else goto c4nh;
  c4nx:
      R1 = lvl2_r45K_closure;
      Sp = Sp + 56;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4nh:
      if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nj; else goto c4nk;
  c4nj:
      _s47j::I64 = 0;
      _s47i::I64 = _s47i::I64 + 1;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nk:
      if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4ne; else goto c4nf;
  c4ne:
      _s47j::I64 = 0;
      _s47i::I64 = _s47i::I64 + 1;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nf:
      _s47j::I64 = 0;
      _s47i::I64 = _s47i::I64 + 2;
      _s47h::I64 = _s47t::I64;
      goto c4ic;
  c4nt:
      R1 = lvl1_r45J_closure;
      Sp = Sp + 56;
      call (I64[R1])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.257714 UTC

[(c4hH,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (c4hL,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4hP,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4hW,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4hX,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4ic,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4id,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4jd,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4je,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4kX,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (c4kY, {}),
 (c4kZ,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (c4l6,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (c4l9,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (c4la,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (c4le,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4lf,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4lj,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4ll,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4lB,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4lI,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4lT,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4lU,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4m4,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4m8,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4m9,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4md,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4me,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mi,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mm,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mw,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mx,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mz,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mA,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4mV,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4ne,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nf,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nh,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nj,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nk,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nn,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4no,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4ns,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nt, {lvl1_r45J_closure}), (c4nx, {lvl2_r45K_closure}),
 (c4ny,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nR,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nS,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nU,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nW,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4nX,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4o0,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4o1,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4o3,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4o4,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4o9,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4ob,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oc,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4og,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oi,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oj,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4on,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oo,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4os,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oz,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oG,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oH,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4oJ,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4p2,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4p3,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4p7,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4p8,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4pe, {}), (c4pg, {}), (c4ph, {empty_closure}), (c4pi, {}),
 (c4pr, {empty_closure}),
 (c4ps,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4pv,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4pw,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (c4pB, {array_size_error_closure}),
 (c4pC,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, go1_s46m_closure, lvl3_s46H_closure,
   $s$wa_s481_closure}),
 (s47w,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (u4r2,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (u4r3,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (u4r4, {array_size_error_closure}),
 (u4r5, {array_size_error_closure}),
 (u4r6,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (u4r7,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (u4r8,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure}),
 (u4r9,
  {array_size_error_closure, empty_closure, lvl1_r45J_closure,
   lvl2_r45K_closure, lvl3_s46H_closure, $s$wa_s481_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.262431 UTC

sat_s49l_entry() //  [R1]
        { info_tbl: [(c4hH,
                      label: block_c4hH_info
                      rep:StackRep [False, True, True, True]),
                     (c4hL,
                      label: block_c4hL_info
                      rep:StackRep [False, False, False, True, True, True]),
                     (c4hP,
                      label: block_c4hP_info
                      rep:StackRep [False, False, False, True, True, True]),
                     (c4hX,
                      label: block_c4hX_info
                      rep:StackRep [True, True, False, True, False, True, False, True]),
                     (c4id,
                      label: block_c4id_info
                      rep:StackRep [True, True, True, True, False, True, False, False,
                                    True, False]),
                     (c4je,
                      label: block_c4je_info
                      rep:StackRep [True, True, True, True, True, False, True, False,
                                    False, True, False]),
                     (c4kX,
                      label: sat_s49l_info
                      rep:HeapRep 1 ptrs 2 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} }),
                     (c4lj,
                      label: block_c4lj_info
                      rep:StackRep [True, True, False, True, False, False, True, True]),
                     (c4lI,
                      label: block_c4lI_info
                      rep:StackRep [True, True, False, True, False, False, True, True]),
                     (c4m8,
                      label: block_c4m8_info
                      rep:StackRep [False, False, False, True, False, False, True,
                                    False]),
                     (c4md,
                      label: block_c4md_info
                      rep:StackRep [False, True, False, True, False, False, True,
                                    False]),
                     (c4mi,
                      label: block_c4mi_info
                      rep:StackRep [True, True, False, True, False, False, True, False]),
                     (c4o9,
                      label: block_c4o9_info
                      rep:StackRep [True, True, True, False, True, False, False, True,
                                    False]),
                     (c4ob,
                      label: block_c4ob_info
                      rep:StackRep [True, True, True, False, True, False, False, True,
                                    False]),
                     (c4og,
                      label: block_c4og_info
                      rep:StackRep [True, True, False, True, False, False, True, False]),
                     (c4oi,
                      label: block_c4oi_info
                      rep:StackRep [True, True, False, True, False, False, True, False]),
                     (c4on,
                      label: block_c4on_info
                      rep:StackRep [False, True, True, False, True, False, False, True,
                                    False]),
                     (c4os,
                      label: block_c4os_info
                      rep:StackRep [True, True, True, False, True, False, False, True,
                                    False]),
                     (c4pg,
                      label: block_c4pg_info
                      rep:StackRep [])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4kX:
          if ((Sp + -96) < SpLim) goto c4kY; else goto c4kZ;
      c4kY:
          R1 = R1;
          call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
      c4kZ:
          _s466::I64 = I64[R1 + 23];
          _s46a::I64 = _s466::I64 + 11;
          if (%MO_S_Lt_W64(_s46a::I64, 0)) goto c4pB; else goto c4pC;
      c4pC:
          if (_s46a::I64 & 4611686018427387904 != 0) goto c4pB; else goto c4l6;
      c4l6:
          I64[Sp - 40] = c4hH;
          _s464::P64 = P64[R1 + 7];
          _s465::I64 = I64[R1 + 15];
          R1 = _s46a::I64 << 1;
          P64[Sp - 32] = _s464::P64;
          I64[Sp - 24] = _s465::I64;
          I64[Sp - 16] = _s466::I64;
          I64[Sp - 8] = _s46a::I64;
          Sp = Sp - 40;
          call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
      c4hH:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c4la; else goto c4l9;
      c4la:
          HpAlloc = 80;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
      c4l9:
          I64[Hp - 72] = stg_ARR_WORDS_info;
          I64[Hp - 64] = 48;
          I64[Hp - 8] = go1_s46m_info;
          _s46l::P64 = Hp - 72;
          P64[Hp] = _s46l::P64;
          I64[Sp - 16] = c4hL;
          R2 = 0;
          _s46i::P64 = R1;
          R1 = Hp - 7;
          P64[Sp - 8] = _s46l::P64;
          P64[Sp] = _s46i::P64;
          Sp = Sp - 16;
          call go1_s46m_info(R2,
                             R1) returns to c4hL, args: 8, res: 8, upd: 8;
      c4hL:
          I64[Sp] = c4hP;
          R2 = R1;
          call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
      c4hP:
          _s464::P64 = P64[Sp + 24];
          _s465::I64 = I64[Sp + 32];
          _s46l::P64 = P64[Sp + 8];
          _s46y::I64 = _s465::I64 + I64[Sp + 40];
          _s46E::I64 = 0;
          _s46D::I64 = 0;
          _s46C::I64 = _s465::I64;
          _s46B::I64 = I64[Sp + 48] - 1;
          _s46A::P64 = P64[Sp + 16];
          goto c4hW;
      c4hW:
          Hp = Hp + 24;
          if (Hp > HpLim) goto c4lf; else goto c4le;
      c4lf:
          HpAlloc = 24;
          I64[Sp - 16] = c4hX;
          I64[Sp - 8] = _s46E::I64;
          I64[Sp] = _s46D::I64;
          I64[Sp + 16] = _s46C::I64;
          I64[Sp + 32] = _s46B::I64;
          P64[Sp + 40] = _s46A::P64;
          I64[Sp + 48] = _s46y::I64;
          Sp = Sp - 16;
          call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
      c4hX:
          goto u4r2;
      u4r2:
          _s464::P64 = P64[Sp + 40];
          _s46l::P64 = P64[Sp + 24];
          _s46y::I64 = I64[Sp + 64];
          _s46A::P64 = P64[Sp + 56];
          _s46B::I64 = I64[Sp + 48];
          _s46C::I64 = I64[Sp + 32];
          _s46D::I64 = I64[Sp + 16];
          _s46E::I64 = I64[Sp + 8];
          Sp = Sp + 16;
          goto c4hW;
      c4le:
          I64[Hp - 16] = lvl3_s46H_info;
          _s46G::I64 = _s46B::I64 << 1;
          I64[Hp] = _s46G::I64;
          _c4i2::P64 = Hp - 16;
          _s47j::I64 = _s46E::I64;
          _s47i::I64 = _s46D::I64;
          _s47h::I64 = _s46C::I64;
          goto c4ic;
      c4ic:
          Hp = Hp + 48;
          if (Hp > HpLim) goto c4mx; else goto c4mw;
      c4mx:
          HpAlloc = 48;
          I64[Sp - 32] = c4id;
          I64[Sp - 24] = _s47h::I64;
          I64[Sp - 16] = _s47i::I64;
          I64[Sp - 8] = _s47j::I64;
          I64[Sp] = _s46G::I64;
          I64[Sp + 16] = _s46B::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 32;
          call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
      c4id:
          goto u4r3;
      u4r3:
          _c4i2::P64 = P64[Sp + 80];
          _s464::P64 = P64[Sp + 56];
          _s46l::P64 = P64[Sp + 40];
          _s46y::I64 = I64[Sp + 72];
          _s46A::P64 = P64[Sp + 64];
          _s46B::I64 = I64[Sp + 48];
          _s46G::I64 = I64[Sp + 32];
          _s47h::I64 = I64[Sp + 8];
          _s47i::I64 = I64[Sp + 16];
          _s47j::I64 = I64[Sp + 24];
          Sp = Sp + 32;
          goto c4ic;
      c4mw:
          if (%MO_S_Lt_W64(_s46B::I64,
                           _s47i::I64 + 11)) goto c4pv; else goto c4pw;
      c4pv:
          I64[Hp - 40] = I#_con_info;
          I64[Hp - 32] = _s47j::I64;
          I64[Hp - 24] = I#_con_info;
          I64[Hp - 16] = _s47i::I64;
          I64[Hp - 8] = I#_con_info;
          I64[Hp] = _s47h::I64;
          I64[Sp - 16] = c4m8;
          R1 = Hp - 7;
          P64[Sp - 8] = Hp - 39;
          P64[Sp] = Hp - 23;
          I64[Sp + 16] = _s46G::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4m8; else goto c4m9;
      c4m9:
          call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
      c4m8:
          I64[Sp] = c4md;
          _s47a::I64 = I64[R1 + 7];
          R1 = P64[Sp + 16];
          I64[Sp + 16] = _s47a::I64;
          if (R1 & 7 != 0) goto c4md; else goto c4me;
      c4me:
          call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
      c4md:
          I64[Sp] = c4mi;
          _s47c::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _s47c::I64;
          if (R1 & 7 != 0) goto c4mi; else goto c4mm;
      c4mm:
          call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
      c4mi:
          I64[Sp] = c4lj;
          _s46M::I64 = I64[R1 + 7];
          R1 = P64[Sp + 64];
          _s46L::I64 = I64[Sp + 8];
          I64[Sp + 8] = _s46M::I64;
          _s46K::I64 = I64[Sp + 16];
          I64[Sp + 16] = _s46L::I64;
          I64[Sp + 64] = _s46K::I64;
          if (R1 & 7 != 0) goto c4lj; else goto c4ll;
      c4ll:
          call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
      c4lj:
          if (R1 & 7 >= 2) goto u4r4; else goto c4m4;
      u4r4:
          Sp = Sp + 72;
          goto c4pB;
      c4m4:
          _s46G::I64 = I64[Sp + 32];
          if (_s46G::I64 & 4611686018427387904 != 0) goto u4r5; else goto c4lB;
      u4r5:
          Sp = Sp + 72;
          goto c4pB;
      c4pB:
          R1 = array_size_error_closure;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4lB:
          I64[Sp] = c4lI;
          R1 = _s46G::I64 << 1;
          call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
      c4lI:
          _s464::P64 = P64[Sp + 40];
          _s46l::P64 = P64[Sp + 24];
          _s46y::I64 = I64[Sp + 56];
          _s46G::I64 = I64[Sp + 32];
          _s46K::I64 = I64[Sp + 64];
          _s46L::I64 = I64[Sp + 16];
          _s46M::I64 = I64[Sp + 8];
          if (%MO_S_Le_W64(_s46L::I64, 0)) goto c4lT; else goto c4lU;
      c4lT:
          goto u4r6;
      u4r6:
          Sp = Sp + 16;
          _s46E::I64 = _s46M::I64;
          _s46D::I64 = _s46L::I64;
          _s46C::I64 = _s46K::I64;
          _s46B::I64 = _s46G::I64 - 1;
          _s46A::P64 = R1;
          goto c4hW;
      c4lU:
          call "ccall" arg hints:  [PtrHint, , PtrHint,
                                    ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 48] + 16, 0, _s46L::I64);
          goto u4r7;
      u4r7:
          Sp = Sp + 16;
          _s46E::I64 = _s46M::I64;
          _s46D::I64 = _s46L::I64;
          _s46C::I64 = _s46K::I64;
          _s46B::I64 = _s46G::I64 - 1;
          _s46A::P64 = R1;
          goto c4hW;
      c4pw:
          if (%MO_S_Ge_W64(_s47h::I64,
                           _s46y::I64)) goto c4pr; else goto c4ps;
      c4pr:
          if (_s47i::I64 != 0) goto c4pe; else goto c4ph;
      c4pe:
          I64[Hp - 40] = Text_con_info;
          P64[Hp - 32] = _s46A::P64;
          I64[Hp - 24] = 0;
          I64[Hp - 16] = _s47i::I64;
          _c4pc::P64 = Hp - 39;
          Hp = Hp - 16;
          R1 = _c4pc::P64;
          Sp = Sp + 56;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4ph:
          Hp = Hp - 48;
          I64[Sp + 48] = c4pg;
          R1 = empty_closure;
          Sp = Sp + 48;
          if (R1 & 7 != 0) goto c4pg; else goto c4pi;
      c4pi:
          call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
      c4pg:
          R1 = R1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4ps:
          _s47q::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
          if (_s47q::I64 >= 55296) goto c4p7; else goto c4p8;
      c4p7:
          if (_s47q::I64 <= 56319) goto c4p2; else goto c4p3;
      c4p2:
          Hp = Hp - 48;
          _s47t::I64 = _s47h::I64 + 2;
          _s47s::I64 = ((_s47q::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + ((_s47h::I64 + 1) << 1)]) - 56320) + 65536;
          goto c4jd;
      c4p3:
          Hp = Hp - 48;
          _s47t::I64 = _s47h::I64 + 1;
          _s47s::I64 = _s47q::I64;
          goto c4jd;
      c4p8:
          Hp = Hp - 48;
          _s47t::I64 = _s47h::I64 + 1;
          _s47s::I64 = _s47q::I64;
          goto c4jd;
      c4jd:
          Hp = Hp + 32;
          if (Hp > HpLim) goto c4mA; else goto c4mz;
      c4mA:
          HpAlloc = 32;
          I64[Sp - 40] = c4je;
          I64[Sp - 32] = _s47i::I64;
          I64[Sp - 24] = _s47j::I64;
          I64[Sp - 16] = _s47s::I64;
          I64[Sp - 8] = _s47t::I64;
          I64[Sp] = _s46G::I64;
          I64[Sp + 16] = _s46B::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 40;
          call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
      c4je:
          goto u4r8;
      u4r8:
          _c4i2::P64 = P64[Sp + 88];
          _s464::P64 = P64[Sp + 64];
          _s46l::P64 = P64[Sp + 48];
          _s46y::I64 = I64[Sp + 80];
          _s46A::P64 = P64[Sp + 72];
          _s46B::I64 = I64[Sp + 56];
          _s46G::I64 = I64[Sp + 40];
          _s47i::I64 = I64[Sp + 8];
          _s47j::I64 = I64[Sp + 16];
          _s47s::I64 = I64[Sp + 24];
          _s47t::I64 = I64[Sp + 32];
          Sp = Sp + 40;
          goto c4jd;
      c4mz:
          _s47v::I64 = _s47s::I64;
          if (%MO_S_Ge_W64(_s47s::I64, 44032)) goto c4oJ; else goto c4oH;
      c4oJ:
          if (%MO_S_Le_W64(_s47v::I64, 55203)) goto c4oG; else goto c4oH;
      c4oG:
          I64[Hp - 24] = $s$wa_s481_info;
          P64[Hp - 16] = _s46l::P64;
          P64[Hp - 8] = _s46A::P64;
          I64[Hp] = _s47j::I64;
          I64[Sp - 24] = c4o9;
          R3 = 0;
          R2 = _s47i::I64;
          R1 = Hp - 21;
          I64[Sp - 16] = _s47s::I64;
          I64[Sp - 8] = _s47t::I64;
          I64[Sp] = _s46G::I64;
          I64[Sp + 16] = _s46B::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 24;
          call $s$wa_s481_info(R3,
                               R2,
                               R1) returns to c4o9, args: 8, res: 8, upd: 8;
      c4o9:
          I64[Sp] = c4ob;
          R1 = R1;
          if (R1 & 7 != 0) goto c4ob; else goto c4oc;
      c4oc:
          call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
      c4ob:
          _s47s::I64 = I64[Sp + 8];
          I64[Sp + 8] = c4og;
          R4 = _s47s::I64;
          R3 = I64[R1 + 7];
          R2 = P64[Sp + 56];
          Sp = Sp + 8;
          call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
      c4og:
          I64[Sp] = c4oi;
          R1 = R1;
          if (R1 & 7 != 0) goto c4oi; else goto c4oj;
      c4oj:
          call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
      c4oi:
          I64[Sp - 8] = c4on;
          _s48H::P64 = P64[R1 + 15];
          R1 = P64[R1 + 7];
          P64[Sp] = _s48H::P64;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c4on; else goto c4oo;
      c4oo:
          call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
      c4on:
          I64[Sp] = c4os;
          _s48J::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _s48J::I64;
          if (R1 & 7 != 0) goto c4os; else goto c4oz;
      c4oz:
          call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
      c4os:
          goto u4r9;
      u4r9:
          _c4i2::P64 = P64[Sp + 72];
          _s464::P64 = P64[Sp + 48];
          _s46l::P64 = P64[Sp + 32];
          _s46y::I64 = I64[Sp + 64];
          _s46A::P64 = P64[Sp + 56];
          _s46B::I64 = I64[Sp + 40];
          _s46G::I64 = I64[Sp + 24];
          _s47i::I64 = I64[Sp + 8];
          _s47h::I64 = I64[Sp + 16];
          Sp = Sp + 24;
          _s47j::I64 = I64[R1 + 7];
          goto c4ic;
      c4oH:
          Hp = Hp - 32;
          goto s47w;
      s47w:
          if (%MO_S_Lt_W64(_s47v::I64, 192)) goto c4o3; else goto c4o4;
      c4o3:
          if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4o0; else goto c4o1;
      c4o0:
          if (_s47j::I64 != 0) goto c4nx; else goto c4ny;
      c4ny:
          _s47j::I64 = 1;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4o1:
          if (_s47j::I64 != 1) goto c4nx; else goto c4nU;
      c4nU:
          if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nW; else goto c4nX;
      c4nW:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nX:
          if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4nR; else goto c4nS;
      c4nR:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nS:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 2;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4o4:
          if (%MO_S_Le_W64(_s47v::I64, 195101)) goto c4ns; else goto c4nt;
      c4ns:
          if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4nn; else goto c4no;
      c4nn:
          if (_s47j::I64 != 0) goto c4nx; else goto c4mV;
      c4mV:
          _s47j::I64 = 1;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4no:
          if (_s47j::I64 != 1) goto c4nx; else goto c4nh;
      c4nx:
          R1 = lvl2_r45K_closure;
          Sp = Sp + 56;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4nh:
          if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nj; else goto c4nk;
      c4nj:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nk:
          if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4ne; else goto c4nf;
      c4ne:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nf:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 2;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nt:
          R1 = lvl1_r45J_closure;
          Sp = Sp + 56;
          call (I64[R1])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.268974 UTC

sat_s49l_entry() //  [R1]
        { info_tbl: [(c4hH,
                      label: block_c4hH_info
                      rep:StackRep [False, True, True, True]),
                     (c4hL,
                      label: block_c4hL_info
                      rep:StackRep [False, False, False, True, True, True]),
                     (c4hP,
                      label: block_c4hP_info
                      rep:StackRep [False, False, False, True, True, True]),
                     (c4hX,
                      label: block_c4hX_info
                      rep:StackRep [True, True, False, True, False, True, False, True]),
                     (c4id,
                      label: block_c4id_info
                      rep:StackRep [True, True, True, True, False, True, False, False,
                                    True, False]),
                     (c4je,
                      label: block_c4je_info
                      rep:StackRep [True, True, True, True, True, False, True, False,
                                    False, True, False]),
                     (c4kX,
                      label: sat_s49l_info
                      rep:HeapRep 1 ptrs 2 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} }),
                     (c4lj,
                      label: block_c4lj_info
                      rep:StackRep [True, True, False, True, False, False, True, True]),
                     (c4lI,
                      label: block_c4lI_info
                      rep:StackRep [True, True, False, True, False, False, True, True]),
                     (c4m8,
                      label: block_c4m8_info
                      rep:StackRep [False, False, False, True, False, False, True,
                                    False]),
                     (c4md,
                      label: block_c4md_info
                      rep:StackRep [False, True, False, True, False, False, True,
                                    False]),
                     (c4mi,
                      label: block_c4mi_info
                      rep:StackRep [True, True, False, True, False, False, True, False]),
                     (c4o9,
                      label: block_c4o9_info
                      rep:StackRep [True, True, True, False, True, False, False, True,
                                    False]),
                     (c4ob,
                      label: block_c4ob_info
                      rep:StackRep [True, True, True, False, True, False, False, True,
                                    False]),
                     (c4og,
                      label: block_c4og_info
                      rep:StackRep [True, True, False, True, False, False, True, False]),
                     (c4oi,
                      label: block_c4oi_info
                      rep:StackRep [True, True, False, True, False, False, True, False]),
                     (c4on,
                      label: block_c4on_info
                      rep:StackRep [False, True, True, False, True, False, False, True,
                                    False]),
                     (c4os,
                      label: block_c4os_info
                      rep:StackRep [True, True, True, False, True, False, False, True,
                                    False]),
                     (c4pg,
                      label: block_c4pg_info
                      rep:StackRep [])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4kX:
          if ((Sp + -96) < SpLim) goto c4kY; else goto c4kZ;
      c4kY:
          R1 = R1;
          call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
      c4kZ:
          _s466::I64 = I64[R1 + 23];
          _s46a::I64 = _s466::I64 + 11;
          if (%MO_S_Lt_W64(_s46a::I64, 0)) goto c4pB; else goto c4pC;
      c4pC:
          if (_s46a::I64 & 4611686018427387904 != 0) goto c4pB; else goto c4l6;
      c4l6:
          I64[Sp - 40] = c4hH;
          _s464::P64 = P64[R1 + 7];
          _s465::I64 = I64[R1 + 15];
          R1 = _s46a::I64 << 1;
          P64[Sp - 32] = _s464::P64;
          I64[Sp - 24] = _s465::I64;
          I64[Sp - 16] = _s466::I64;
          I64[Sp - 8] = _s46a::I64;
          Sp = Sp - 40;
          call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
      c4hH:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c4la; else goto c4l9;
      c4la:
          HpAlloc = 80;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
      c4l9:
          I64[Hp - 72] = stg_ARR_WORDS_info;
          I64[Hp - 64] = 48;
          I64[Hp - 8] = go1_s46m_info;
          _s46l::P64 = Hp - 72;
          P64[Hp] = _s46l::P64;
          I64[Sp - 16] = c4hL;
          R2 = 0;
          _s46i::P64 = R1;
          R1 = Hp - 7;
          P64[Sp - 8] = _s46l::P64;
          P64[Sp] = _s46i::P64;
          Sp = Sp - 16;
          call go1_s46m_info(R2,
                             R1) returns to c4hL, args: 8, res: 8, upd: 8;
      c4hL:
          I64[Sp] = c4hP;
          R2 = R1;
          call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
      c4hP:
          _s464::P64 = P64[Sp + 24];
          _s465::I64 = I64[Sp + 32];
          _s46l::P64 = P64[Sp + 8];
          _s46y::I64 = _s465::I64 + I64[Sp + 40];
          _s46E::I64 = 0;
          _s46D::I64 = 0;
          _s46C::I64 = _s465::I64;
          _s46B::I64 = I64[Sp + 48] - 1;
          _s46A::P64 = P64[Sp + 16];
          goto c4hW;
      c4hW:
          Hp = Hp + 24;
          if (Hp > HpLim) goto c4lf; else goto c4le;
      c4lf:
          HpAlloc = 24;
          I64[Sp - 16] = c4hX;
          I64[Sp - 8] = _s46E::I64;
          I64[Sp] = _s46D::I64;
          I64[Sp + 16] = _s46C::I64;
          I64[Sp + 32] = _s46B::I64;
          P64[Sp + 40] = _s46A::P64;
          I64[Sp + 48] = _s46y::I64;
          Sp = Sp - 16;
          call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
      c4hX:
          _s464::P64 = P64[Sp + 40];
          _s46l::P64 = P64[Sp + 24];
          _s46y::I64 = I64[Sp + 64];
          _s46A::P64 = P64[Sp + 56];
          _s46B::I64 = I64[Sp + 48];
          _s46C::I64 = I64[Sp + 32];
          _s46D::I64 = I64[Sp + 16];
          _s46E::I64 = I64[Sp + 8];
          Sp = Sp + 16;
          goto c4hW;
      c4le:
          I64[Hp - 16] = lvl3_s46H_info;
          _s46G::I64 = _s46B::I64 << 1;
          I64[Hp] = _s46G::I64;
          _c4i2::P64 = Hp - 16;
          _s47j::I64 = _s46E::I64;
          _s47i::I64 = _s46D::I64;
          _s47h::I64 = _s46C::I64;
          goto c4ic;
      c4ic:
          Hp = Hp + 48;
          if (Hp > HpLim) goto c4mx; else goto c4mw;
      c4mx:
          HpAlloc = 48;
          I64[Sp - 32] = c4id;
          I64[Sp - 24] = _s47h::I64;
          I64[Sp - 16] = _s47i::I64;
          I64[Sp - 8] = _s47j::I64;
          I64[Sp] = _s46G::I64;
          I64[Sp + 16] = _s46B::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 32;
          call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
      c4id:
          _c4i2::P64 = P64[Sp + 80];
          _s464::P64 = P64[Sp + 56];
          _s46l::P64 = P64[Sp + 40];
          _s46y::I64 = I64[Sp + 72];
          _s46A::P64 = P64[Sp + 64];
          _s46B::I64 = I64[Sp + 48];
          _s46G::I64 = I64[Sp + 32];
          _s47h::I64 = I64[Sp + 8];
          _s47i::I64 = I64[Sp + 16];
          _s47j::I64 = I64[Sp + 24];
          Sp = Sp + 32;
          goto c4ic;
      c4mw:
          if (%MO_S_Lt_W64(_s46B::I64,
                           _s47i::I64 + 11)) goto c4pv; else goto c4pw;
      c4pv:
          I64[Hp - 40] = I#_con_info;
          I64[Hp - 32] = _s47j::I64;
          I64[Hp - 24] = I#_con_info;
          I64[Hp - 16] = _s47i::I64;
          I64[Hp - 8] = I#_con_info;
          I64[Hp] = _s47h::I64;
          I64[Sp - 16] = c4m8;
          R1 = Hp - 7;
          P64[Sp - 8] = Hp - 39;
          P64[Sp] = Hp - 23;
          I64[Sp + 16] = _s46G::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4m8; else goto c4m9;
      c4m9:
          call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
      c4m8:
          I64[Sp] = c4md;
          _s47a::I64 = I64[R1 + 7];
          R1 = P64[Sp + 16];
          I64[Sp + 16] = _s47a::I64;
          if (R1 & 7 != 0) goto c4md; else goto c4me;
      c4me:
          call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
      c4md:
          I64[Sp] = c4mi;
          _s47c::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _s47c::I64;
          if (R1 & 7 != 0) goto c4mi; else goto c4mm;
      c4mm:
          call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
      c4mi:
          I64[Sp] = c4lj;
          _s46M::I64 = I64[R1 + 7];
          R1 = P64[Sp + 64];
          _s46L::I64 = I64[Sp + 8];
          I64[Sp + 8] = _s46M::I64;
          _s46K::I64 = I64[Sp + 16];
          I64[Sp + 16] = _s46L::I64;
          I64[Sp + 64] = _s46K::I64;
          if (R1 & 7 != 0) goto c4lj; else goto c4ll;
      c4ll:
          call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
      c4lj:
          if (R1 & 7 >= 2) goto u4r4; else goto c4m4;
      u4r4:
          Sp = Sp + 72;
          goto c4pB;
      c4m4:
          _s46G::I64 = I64[Sp + 32];
          if (_s46G::I64 & 4611686018427387904 != 0) goto u4r5; else goto c4lB;
      u4r5:
          Sp = Sp + 72;
          goto c4pB;
      c4pB:
          R1 = array_size_error_closure;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4lB:
          I64[Sp] = c4lI;
          R1 = _s46G::I64 << 1;
          call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
      c4lI:
          _s464::P64 = P64[Sp + 40];
          _s46l::P64 = P64[Sp + 24];
          _s46y::I64 = I64[Sp + 56];
          _s46G::I64 = I64[Sp + 32];
          _s46K::I64 = I64[Sp + 64];
          _s46L::I64 = I64[Sp + 16];
          _s46M::I64 = I64[Sp + 8];
          if (%MO_S_Le_W64(_s46L::I64, 0)) goto c4lT; else goto c4lU;
      c4lT:
          Sp = Sp + 16;
          _s46E::I64 = _s46M::I64;
          _s46D::I64 = _s46L::I64;
          _s46C::I64 = _s46K::I64;
          _s46B::I64 = _s46G::I64 - 1;
          _s46A::P64 = R1;
          goto c4hW;
      c4lU:
          call "ccall" arg hints:  [PtrHint, , PtrHint,
                                    ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 48] + 16, 0, _s46L::I64);
          Sp = Sp + 16;
          _s46E::I64 = _s46M::I64;
          _s46D::I64 = _s46L::I64;
          _s46C::I64 = _s46K::I64;
          _s46B::I64 = _s46G::I64 - 1;
          _s46A::P64 = R1;
          goto c4hW;
      c4pw:
          if (%MO_S_Ge_W64(_s47h::I64,
                           _s46y::I64)) goto c4pr; else goto c4ps;
      c4pr:
          if (_s47i::I64 != 0) goto c4pe; else goto c4ph;
      c4pe:
          I64[Hp - 40] = Text_con_info;
          P64[Hp - 32] = _s46A::P64;
          I64[Hp - 24] = 0;
          I64[Hp - 16] = _s47i::I64;
          _c4pc::P64 = Hp - 39;
          Hp = Hp - 16;
          R1 = _c4pc::P64;
          Sp = Sp + 56;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4ph:
          Hp = Hp - 48;
          I64[Sp + 48] = c4pg;
          R1 = empty_closure;
          Sp = Sp + 48;
          if (R1 & 7 != 0) goto c4pg; else goto c4pi;
      c4pi:
          call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
      c4pg:
          R1 = R1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4ps:
          _s47q::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
          if (_s47q::I64 >= 55296) goto c4p7; else goto c4p8;
      c4p7:
          if (_s47q::I64 <= 56319) goto c4p2; else goto c4p3;
      c4p2:
          Hp = Hp - 48;
          _s47t::I64 = _s47h::I64 + 2;
          _s47s::I64 = ((_s47q::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + ((_s47h::I64 + 1) << 1)]) - 56320) + 65536;
          goto c4jd;
      c4p3:
          Hp = Hp - 48;
          _s47t::I64 = _s47h::I64 + 1;
          _s47s::I64 = _s47q::I64;
          goto c4jd;
      c4p8:
          Hp = Hp - 48;
          _s47t::I64 = _s47h::I64 + 1;
          _s47s::I64 = _s47q::I64;
          goto c4jd;
      c4jd:
          Hp = Hp + 32;
          if (Hp > HpLim) goto c4mA; else goto c4mz;
      c4mA:
          HpAlloc = 32;
          I64[Sp - 40] = c4je;
          I64[Sp - 32] = _s47i::I64;
          I64[Sp - 24] = _s47j::I64;
          I64[Sp - 16] = _s47s::I64;
          I64[Sp - 8] = _s47t::I64;
          I64[Sp] = _s46G::I64;
          I64[Sp + 16] = _s46B::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 40;
          call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
      c4je:
          _c4i2::P64 = P64[Sp + 88];
          _s464::P64 = P64[Sp + 64];
          _s46l::P64 = P64[Sp + 48];
          _s46y::I64 = I64[Sp + 80];
          _s46A::P64 = P64[Sp + 72];
          _s46B::I64 = I64[Sp + 56];
          _s46G::I64 = I64[Sp + 40];
          _s47i::I64 = I64[Sp + 8];
          _s47j::I64 = I64[Sp + 16];
          _s47s::I64 = I64[Sp + 24];
          _s47t::I64 = I64[Sp + 32];
          Sp = Sp + 40;
          goto c4jd;
      c4mz:
          _s47v::I64 = _s47s::I64;
          if (%MO_S_Lt_W64(_s47s::I64, 44032)) goto c4oH; else goto c4oJ;
      c4oJ:
          if (%MO_S_Gt_W64(_s47v::I64, 55203)) goto c4oH; else goto c4oG;
      c4oH:
          Hp = Hp - 32;
          if (%MO_S_Lt_W64(_s47v::I64, 192)) goto c4o3; else goto c4o4;
      c4o3:
          if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4o0; else goto c4o1;
      c4o0:
          if (_s47j::I64 != 0) goto c4nx; else goto c4ny;
      c4ny:
          _s47j::I64 = 1;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4o1:
          if (_s47j::I64 != 1) goto c4nx; else goto c4nU;
      c4nU:
          if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nW; else goto c4nX;
      c4nW:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nX:
          if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4nR; else goto c4nS;
      c4nR:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nS:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 2;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4o4:
          if (%MO_S_Le_W64(_s47v::I64, 195101)) goto c4ns; else goto c4nt;
      c4ns:
          if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4nn; else goto c4no;
      c4nn:
          if (_s47j::I64 != 0) goto c4nx; else goto c4mV;
      c4mV:
          _s47j::I64 = 1;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4no:
          if (_s47j::I64 != 1) goto c4nx; else goto c4nh;
      c4nx:
          R1 = lvl2_r45K_closure;
          Sp = Sp + 56;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4nh:
          if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nj; else goto c4nk;
      c4nj:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nk:
          if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4ne; else goto c4nf;
      c4ne:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 1;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nf:
          _s47j::I64 = 0;
          _s47i::I64 = _s47i::I64 + 2;
          _s47h::I64 = _s47t::I64;
          goto c4ic;
      c4nt:
          R1 = lvl1_r45J_closure;
          Sp = Sp + 56;
          call (I64[R1])(R1) args: 8, res: 0, upd: 8;
      c4oG:
          I64[Hp - 24] = $s$wa_s481_info;
          P64[Hp - 16] = _s46l::P64;
          P64[Hp - 8] = _s46A::P64;
          I64[Hp] = _s47j::I64;
          I64[Sp - 24] = c4o9;
          R3 = 0;
          R2 = _s47i::I64;
          R1 = Hp - 21;
          I64[Sp - 16] = _s47s::I64;
          I64[Sp - 8] = _s47t::I64;
          I64[Sp] = _s46G::I64;
          I64[Sp + 16] = _s46B::I64;
          P64[Sp + 32] = _s46A::P64;
          I64[Sp + 40] = _s46y::I64;
          P64[Sp + 48] = _c4i2::P64;
          Sp = Sp - 24;
          call $s$wa_s481_info(R3,
                               R2,
                               R1) returns to c4o9, args: 8, res: 8, upd: 8;
      c4o9:
          I64[Sp] = c4ob;
          R1 = R1;
          if (R1 & 7 != 0) goto c4ob; else goto c4oc;
      c4oc:
          call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
      c4ob:
          _s47s::I64 = I64[Sp + 8];
          I64[Sp + 8] = c4og;
          R4 = _s47s::I64;
          R3 = I64[R1 + 7];
          R2 = P64[Sp + 56];
          Sp = Sp + 8;
          call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
      c4og:
          I64[Sp] = c4oi;
          R1 = R1;
          if (R1 & 7 != 0) goto c4oi; else goto c4oj;
      c4oj:
          call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
      c4oi:
          I64[Sp - 8] = c4on;
          _s48H::P64 = P64[R1 + 15];
          R1 = P64[R1 + 7];
          P64[Sp] = _s48H::P64;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c4on; else goto c4oo;
      c4oo:
          call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
      c4on:
          I64[Sp] = c4os;
          _s48J::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _s48J::I64;
          if (R1 & 7 != 0) goto c4os; else goto c4oz;
      c4oz:
          call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
      c4os:
          _c4i2::P64 = P64[Sp + 72];
          _s464::P64 = P64[Sp + 48];
          _s46l::P64 = P64[Sp + 32];
          _s46y::I64 = I64[Sp + 64];
          _s46A::P64 = P64[Sp + 56];
          _s46B::I64 = I64[Sp + 40];
          _s46G::I64 = I64[Sp + 24];
          _s47i::I64 = I64[Sp + 8];
          _s47h::I64 = I64[Sp + 16];
          Sp = Sp + 24;
          _s47j::I64 = I64[R1 + 7];
          goto c4ic;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.274995 UTC

{offset
  c4qU:
      _s466::I64 = R5;
      _s465::I64 = R4;
      _s464::P64 = R3;
      _s463::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4qV; else goto c4qW;
  c4qV:
      R1 = $wnormalize_closure;
      P64[(old + 40)] = _s463::P64;
      P64[(old + 32)] = _s464::P64;
      I64[(old + 24)] = _s465::I64;
      I64[(old + 16)] = _s466::I64;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4qW:
      I64[(young<c4he> + 8)] = c4he;
      R1 = _s463::P64;
      if (R1 & 7 != 0) goto c4he; else goto c4hf;
  c4hf:
      call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4he:
      _s467::P64 = R1;
      _c4qT::P64 = _s467::P64 & 7;
      if (_c4qT::P64 != 1) goto c4qR; else goto c4qS;
  c4qR:
      R1 = lvl_r3Nn_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4qS:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4r1; else goto c4r0;
  c4r1:
      HpAlloc = 32;
      R1 = _s467::P64;
      call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4r0:
      I64[Hp - 24] = sat_s49l_info;
      P64[Hp - 16] = _s464::P64;
      I64[Hp - 8] = _s465::I64;
      I64[Hp] = _s466::I64;
      _c4hk::P64 = Hp - 23;
      R2 = _c4hk::P64;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.27635 UTC

{offset
  c4qU:
      _s466::I64 = R5;
      _s465::I64 = R4;
      _s464::P64 = R3;
      _s463::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4qV; else goto c4qW;
  c4qV:
      R1 = $wnormalize_closure;
      P64[(old + 40)] = _s463::P64;
      P64[(old + 32)] = _s464::P64;
      I64[(old + 24)] = _s465::I64;
      I64[(old + 16)] = _s466::I64;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4qW:
      I64[(young<c4he> + 8)] = c4he;
      R1 = _s463::P64;
      if (R1 & 7 != 0) goto c4he; else goto c4hf;
  c4hf:
      call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4he:
      _s467::P64 = R1;
      _c4qT::P64 = _s467::P64 & 7;
      if (_c4qT::P64 != 1) goto c4qR; else goto c4qS;
  c4qR:
      R1 = lvl_r3Nn_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4qS:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4r1; else goto c4r0;
  c4r1:
      HpAlloc = 32;
      R1 = _s467::P64;
      call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4r0:
      I64[Hp - 24] = sat_s49l_info;
      P64[Hp - 16] = _s464::P64;
      I64[Hp - 8] = _s465::I64;
      I64[Hp] = _s466::I64;
      _c4hk::P64 = Hp - 23;
      R2 = _c4hk::P64;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.277609 UTC

{offset
  c4qU:
      _s466::I64 = R5;
      _s465::I64 = R4;
      _s464::P64 = R3;
      _s463::P64 = R2;
      if ((Sp + 8) - 40 < SpLim) goto c4qV; else goto c4qW;
  c4qV:
      R1 = $wnormalize_closure;
      P64[Sp - 32] = _s463::P64;
      P64[Sp - 24] = _s464::P64;
      I64[Sp - 16] = _s465::I64;
      I64[Sp - 8] = _s466::I64;
      Sp = Sp - 32;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4qW:
      I64[Sp - 32] = c4he;
      R1 = _s463::P64;
      P64[Sp - 24] = _s464::P64;
      I64[Sp - 16] = _s465::I64;
      I64[Sp - 8] = _s466::I64;
      Sp = Sp - 32;
      if (R1 & 7 != 0) goto c4he; else goto c4hf;
  c4hf:
      call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4he:
      _s464::P64 = P64[Sp + 8];
      _s465::I64 = I64[Sp + 16];
      _s466::I64 = I64[Sp + 24];
      _s467::P64 = R1;
      _c4qT::P64 = _s467::P64 & 7;
      if (_c4qT::P64 != 1) goto c4qR; else goto c4qS;
  c4qR:
      R1 = lvl_r3Nn_closure;
      Sp = Sp + 32;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4qS:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4r1; else goto c4r0;
  c4r1:
      HpAlloc = 32;
      R1 = _s467::P64;
      call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4r0:
      I64[Hp - 24] = sat_s49l_info;
      P64[Hp - 16] = _s464::P64;
      I64[Hp - 8] = _s465::I64;
      I64[Hp] = _s466::I64;
      _c4hk::P64 = Hp - 23;
      R2 = _c4hk::P64;
      Sp = Sp + 32;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.278952 UTC

{offset
  c4qU:
      if ((Sp + -32) < SpLim) goto c4qV; else goto c4qW;
  c4qV:
      R1 = $wnormalize_closure;
      P64[Sp - 32] = R2;
      P64[Sp - 24] = R3;
      I64[Sp - 16] = R4;
      I64[Sp - 8] = R5;
      Sp = Sp - 32;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4qW:
      I64[Sp - 32] = c4he;
      R1 = R2;
      P64[Sp - 24] = R3;
      I64[Sp - 16] = R4;
      I64[Sp - 8] = R5;
      Sp = Sp - 32;
      if (R1 & 7 != 0) goto c4he; else goto c4hf;
  c4hf:
      call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4he:
      if (R1 & 7 != 1) goto c4qR; else goto c4qS;
  c4qR:
      R1 = lvl_r3Nn_closure;
      Sp = Sp + 32;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4qS:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4r1; else goto c4r0;
  c4r1:
      HpAlloc = 32;
      R1 = R1;
      call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
  c4r0:
      I64[Hp - 24] = sat_s49l_info;
      P64[Hp - 16] = P64[Sp + 8];
      I64[Hp - 8] = I64[Sp + 16];
      I64[Hp] = I64[Sp + 24];
      R2 = Hp - 23;
      Sp = Sp + 32;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.280047 UTC

[(c4he, {lvl_r3Nn_closure, sat_s49l_closure}),
 (c4hf, {lvl_r3Nn_closure, sat_s49l_closure}),
 (c4qR, {lvl_r3Nn_closure}),
 (c4qS, {lvl_r3Nn_closure, sat_s49l_closure}),
 (c4qU, {$wnormalize_closure, lvl_r3Nn_closure, sat_s49l_closure}),
 (c4qV, {$wnormalize_closure}),
 (c4qW, {lvl_r3Nn_closure, sat_s49l_closure}),
 (c4r0, {sat_s49l_closure}),
 (c4r1, {lvl_r3Nn_closure, sat_s49l_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.280945 UTC

$wnormalize_entry() //  [R5, R4, R3, R2]
        { info_tbl: [(c4he,
                      label: block_c4he_info
                      rep:StackRep [False, True, True]),
                     (c4qU,
                      label: $wnormalize_info
                      rep:HeapRep static {
                            Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4qU:
          if ((Sp + -32) < SpLim) goto c4qV; else goto c4qW;
      c4qV:
          R1 = $wnormalize_closure;
          P64[Sp - 32] = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
      c4qW:
          I64[Sp - 32] = c4he;
          R1 = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          if (R1 & 7 != 0) goto c4he; else goto c4hf;
      c4hf:
          call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
      c4he:
          if (R1 & 7 != 1) goto c4qR; else goto c4qS;
      c4qR:
          R1 = lvl_r3Nn_closure;
          Sp = Sp + 32;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4qS:
          Hp = Hp + 32;
          if (Hp > HpLim) goto c4r1; else goto c4r0;
      c4r1:
          HpAlloc = 32;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
      c4r0:
          I64[Hp - 24] = sat_s49l_info;
          P64[Hp - 16] = P64[Sp + 8];
          I64[Hp - 8] = I64[Sp + 16];
          I64[Hp] = I64[Sp + 24];
          R2 = Hp - 23;
          Sp = Sp + 32;
          call runSTRep_info(R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.282022 UTC

$wnormalize_entry() //  [R5, R4, R3, R2]
        { info_tbl: [(c4he,
                      label: block_c4he_info
                      rep:StackRep [False, True, True]),
                     (c4qU,
                      label: $wnormalize_info
                      rep:HeapRep static {
                            Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4qU:
          if ((Sp + -32) < SpLim) goto c4qV; else goto c4qW;
      c4qV:
          R1 = $wnormalize_closure;
          P64[Sp - 32] = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
      c4qW:
          I64[Sp - 32] = c4he;
          R1 = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          if (R1 & 7 != 0) goto c4he; else goto c4hf;
      c4hf:
          call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
      c4he:
          if (R1 & 7 != 1) goto c4qR; else goto c4qS;
      c4qR:
          R1 = lvl_r3Nn_closure;
          Sp = Sp + 32;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4qS:
          Hp = Hp + 32;
          if (Hp > HpLim) goto c4r1; else goto c4r0;
      c4r1:
          HpAlloc = 32;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
      c4r0:
          I64[Hp - 24] = sat_s49l_info;
          P64[Hp - 16] = P64[Sp + 8];
          I64[Hp - 8] = I64[Sp + 16];
          I64[Hp] = I64[Sp + 24];
          R2 = Hp - 23;
          Sp = Sp + 32;
          call runSTRep_info(R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.282939 UTC

[section "data" {
     $wnormalize_closure:
         const $wnormalize_info;
         const 0;
 },
 $wnormalize_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 40 updfr_space: Just 8
         }
     {offset
       c4ha:
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s46t_entry() //  [R1]
         { info_tbl: [(c4iC,
                       label: sat_s46t_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iC:
           if ((Sp + -16) < SpLim) goto c4iD; else goto c4iE;
       c4iD:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4iE:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s46r::I64 = I64[R1 + 24];
           if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
       c4iA:
           R2 = _s46r::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
       c4iB:
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s46q_entry() //  [R1]
         { info_tbl: [(c4iN,
                       label: sat_s46q_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iN:
           I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
           R1 = ()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 go1_s46m_entry() //  [R2, R1]
         { info_tbl: [(c4iR,
                       label: go1_s46m_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iR:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c4iV; else goto c4iU;
       c4iV:
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4iU:
           _s46l::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s46t_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s46q_info;
           P64[Hp - 32] = _s46l::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl3_s46H_entry() //  [R1]
         { info_tbl: [(c4j0,
                       label: lvl3_s46H_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4j0:
           if ((Sp + -16) < SpLim) goto c4j1; else goto c4j2;
       c4j1:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4j2:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $s$wa_s481_entry() //  [R3, R2, R1]
         { info_tbl: [(c4jE,
                       label: $s$wa_s481_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 3 fun_type: ArgSpec 12} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4jE:
           Hp = Hp + 16;
           if (Hp > HpLim) goto c4jI; else goto c4jH;
       c4jI:
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4jH:
           if (%MO_S_Ge_W64(R3, I64[R1 + 21])) goto c4k5; else goto c4k6;
       c4k5:
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = R2;
           R1 = Hp - 7;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4k6:
           _s46A::P64 = P64[R1 + 13];
           _s48a::I64 = %MO_UU_Conv_W32_W64(I32[P64[R1 + 5] + ((R3 << 2) + 16)]);
           if (%MO_S_Lt_W64(_s48a::I64, 65536)) goto c4jZ; else goto c4k0;
       c4jZ:
           I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(_s48a::I64);
           Hp = Hp - 16;
           R3 = R3 + 1;
           R2 = R2 + 1;
           R1 = R1;
           call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4k0:
           _s48d::I64 = _s48a::I64 - 65536;
           I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(%MO_S_Shr_W64(_s48d::I64,
                                                                                  10) + 55296);
           I16[(_s46A::P64 + 16) + ((R2 + 1) << 1)] = %MO_UU_Conv_W64_W16(_s48d::I64 & 1023 + 56320);
           Hp = Hp - 16;
           R3 = R3 + 1;
           R2 = R2 + 2;
           R1 = R1;
           call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s49l_entry() //  [R1]
         { info_tbl: [(c4hH,
                       label: block_c4hH_info
                       rep:StackRep [False, True, True, True]),
                      (c4hL,
                       label: block_c4hL_info
                       rep:StackRep [False, False, False, True, True, True]),
                      (c4hP,
                       label: block_c4hP_info
                       rep:StackRep [False, False, False, True, True, True]),
                      (c4hX,
                       label: block_c4hX_info
                       rep:StackRep [True, True, False, True, False, True, False, True]),
                      (c4id,
                       label: block_c4id_info
                       rep:StackRep [True, True, True, True, False, True, False, False,
                                     True, False]),
                      (c4je,
                       label: block_c4je_info
                       rep:StackRep [True, True, True, True, True, False, True, False,
                                     False, True, False]),
                      (c4kX,
                       label: sat_s49l_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} }),
                      (c4lj,
                       label: block_c4lj_info
                       rep:StackRep [True, True, False, True, False, False, True, True]),
                      (c4lI,
                       label: block_c4lI_info
                       rep:StackRep [True, True, False, True, False, False, True, True]),
                      (c4m8,
                       label: block_c4m8_info
                       rep:StackRep [False, False, False, True, False, False, True,
                                     False]),
                      (c4md,
                       label: block_c4md_info
                       rep:StackRep [False, True, False, True, False, False, True,
                                     False]),
                      (c4mi,
                       label: block_c4mi_info
                       rep:StackRep [True, True, False, True, False, False, True, False]),
                      (c4o9,
                       label: block_c4o9_info
                       rep:StackRep [True, True, True, False, True, False, False, True,
                                     False]),
                      (c4ob,
                       label: block_c4ob_info
                       rep:StackRep [True, True, True, False, True, False, False, True,
                                     False]),
                      (c4og,
                       label: block_c4og_info
                       rep:StackRep [True, True, False, True, False, False, True, False]),
                      (c4oi,
                       label: block_c4oi_info
                       rep:StackRep [True, True, False, True, False, False, True, False]),
                      (c4on,
                       label: block_c4on_info
                       rep:StackRep [False, True, True, False, True, False, False, True,
                                     False]),
                      (c4os,
                       label: block_c4os_info
                       rep:StackRep [True, True, True, False, True, False, False, True,
                                     False]),
                      (c4pg,
                       label: block_c4pg_info
                       rep:StackRep [])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4kX:
           if ((Sp + -96) < SpLim) goto c4kY; else goto c4kZ;
       c4kY:
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4kZ:
           _s466::I64 = I64[R1 + 23];
           _s46a::I64 = _s466::I64 + 11;
           if (%MO_S_Lt_W64(_s46a::I64, 0)) goto c4pB; else goto c4pC;
       c4pC:
           if (_s46a::I64 & 4611686018427387904 != 0) goto c4pB; else goto c4l6;
       c4l6:
           I64[Sp - 40] = c4hH;
           _s464::P64 = P64[R1 + 7];
           _s465::I64 = I64[R1 + 15];
           R1 = _s46a::I64 << 1;
           P64[Sp - 32] = _s464::P64;
           I64[Sp - 24] = _s465::I64;
           I64[Sp - 16] = _s466::I64;
           I64[Sp - 8] = _s46a::I64;
           Sp = Sp - 40;
           call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
       c4hH:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c4la; else goto c4l9;
       c4la:
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
       c4l9:
           I64[Hp - 72] = stg_ARR_WORDS_info;
           I64[Hp - 64] = 48;
           I64[Hp - 8] = go1_s46m_info;
           _s46l::P64 = Hp - 72;
           P64[Hp] = _s46l::P64;
           I64[Sp - 16] = c4hL;
           R2 = 0;
           _s46i::P64 = R1;
           R1 = Hp - 7;
           P64[Sp - 8] = _s46l::P64;
           P64[Sp] = _s46i::P64;
           Sp = Sp - 16;
           call go1_s46m_info(R2,
                              R1) returns to c4hL, args: 8, res: 8, upd: 8;
       c4hL:
           I64[Sp] = c4hP;
           R2 = R1;
           call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
       c4hP:
           _s464::P64 = P64[Sp + 24];
           _s465::I64 = I64[Sp + 32];
           _s46l::P64 = P64[Sp + 8];
           _s46y::I64 = _s465::I64 + I64[Sp + 40];
           _s46E::I64 = 0;
           _s46D::I64 = 0;
           _s46C::I64 = _s465::I64;
           _s46B::I64 = I64[Sp + 48] - 1;
           _s46A::P64 = P64[Sp + 16];
           goto c4hW;
       c4hW:
           Hp = Hp + 24;
           if (Hp > HpLim) goto c4lf; else goto c4le;
       c4lf:
           HpAlloc = 24;
           I64[Sp - 16] = c4hX;
           I64[Sp - 8] = _s46E::I64;
           I64[Sp] = _s46D::I64;
           I64[Sp + 16] = _s46C::I64;
           I64[Sp + 32] = _s46B::I64;
           P64[Sp + 40] = _s46A::P64;
           I64[Sp + 48] = _s46y::I64;
           Sp = Sp - 16;
           call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
       c4hX:
           _s464::P64 = P64[Sp + 40];
           _s46l::P64 = P64[Sp + 24];
           _s46y::I64 = I64[Sp + 64];
           _s46A::P64 = P64[Sp + 56];
           _s46B::I64 = I64[Sp + 48];
           _s46C::I64 = I64[Sp + 32];
           _s46D::I64 = I64[Sp + 16];
           _s46E::I64 = I64[Sp + 8];
           Sp = Sp + 16;
           goto c4hW;
       c4le:
           I64[Hp - 16] = lvl3_s46H_info;
           _s46G::I64 = _s46B::I64 << 1;
           I64[Hp] = _s46G::I64;
           _c4i2::P64 = Hp - 16;
           _s47j::I64 = _s46E::I64;
           _s47i::I64 = _s46D::I64;
           _s47h::I64 = _s46C::I64;
           goto c4ic;
       c4ic:
           Hp = Hp + 48;
           if (Hp > HpLim) goto c4mx; else goto c4mw;
       c4mx:
           HpAlloc = 48;
           I64[Sp - 32] = c4id;
           I64[Sp - 24] = _s47h::I64;
           I64[Sp - 16] = _s47i::I64;
           I64[Sp - 8] = _s47j::I64;
           I64[Sp] = _s46G::I64;
           I64[Sp + 16] = _s46B::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 32;
           call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
       c4id:
           _c4i2::P64 = P64[Sp + 80];
           _s464::P64 = P64[Sp + 56];
           _s46l::P64 = P64[Sp + 40];
           _s46y::I64 = I64[Sp + 72];
           _s46A::P64 = P64[Sp + 64];
           _s46B::I64 = I64[Sp + 48];
           _s46G::I64 = I64[Sp + 32];
           _s47h::I64 = I64[Sp + 8];
           _s47i::I64 = I64[Sp + 16];
           _s47j::I64 = I64[Sp + 24];
           Sp = Sp + 32;
           goto c4ic;
       c4mw:
           if (%MO_S_Lt_W64(_s46B::I64,
                            _s47i::I64 + 11)) goto c4pv; else goto c4pw;
       c4pv:
           I64[Hp - 40] = I#_con_info;
           I64[Hp - 32] = _s47j::I64;
           I64[Hp - 24] = I#_con_info;
           I64[Hp - 16] = _s47i::I64;
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s47h::I64;
           I64[Sp - 16] = c4m8;
           R1 = Hp - 7;
           P64[Sp - 8] = Hp - 39;
           P64[Sp] = Hp - 23;
           I64[Sp + 16] = _s46G::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4m8; else goto c4m9;
       c4m9:
           call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
       c4m8:
           I64[Sp] = c4md;
           _s47a::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s47a::I64;
           if (R1 & 7 != 0) goto c4md; else goto c4me;
       c4me:
           call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
       c4md:
           I64[Sp] = c4mi;
           _s47c::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s47c::I64;
           if (R1 & 7 != 0) goto c4mi; else goto c4mm;
       c4mm:
           call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
       c4mi:
           I64[Sp] = c4lj;
           _s46M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 64];
           _s46L::I64 = I64[Sp + 8];
           I64[Sp + 8] = _s46M::I64;
           _s46K::I64 = I64[Sp + 16];
           I64[Sp + 16] = _s46L::I64;
           I64[Sp + 64] = _s46K::I64;
           if (R1 & 7 != 0) goto c4lj; else goto c4ll;
       c4ll:
           call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
       c4lj:
           if (R1 & 7 >= 2) goto u4r4; else goto c4m4;
       u4r4:
           Sp = Sp + 72;
           goto c4pB;
       c4m4:
           _s46G::I64 = I64[Sp + 32];
           if (_s46G::I64 & 4611686018427387904 != 0) goto u4r5; else goto c4lB;
       u4r5:
           Sp = Sp + 72;
           goto c4pB;
       c4pB:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4lB:
           I64[Sp] = c4lI;
           R1 = _s46G::I64 << 1;
           call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
       c4lI:
           _s464::P64 = P64[Sp + 40];
           _s46l::P64 = P64[Sp + 24];
           _s46y::I64 = I64[Sp + 56];
           _s46G::I64 = I64[Sp + 32];
           _s46K::I64 = I64[Sp + 64];
           _s46L::I64 = I64[Sp + 16];
           _s46M::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s46L::I64, 0)) goto c4lT; else goto c4lU;
       c4lT:
           Sp = Sp + 16;
           _s46E::I64 = _s46M::I64;
           _s46D::I64 = _s46L::I64;
           _s46C::I64 = _s46K::I64;
           _s46B::I64 = _s46G::I64 - 1;
           _s46A::P64 = R1;
           goto c4hW;
       c4lU:
           call "ccall" arg hints:  [PtrHint, , PtrHint,
                                     ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 48] + 16, 0, _s46L::I64);
           Sp = Sp + 16;
           _s46E::I64 = _s46M::I64;
           _s46D::I64 = _s46L::I64;
           _s46C::I64 = _s46K::I64;
           _s46B::I64 = _s46G::I64 - 1;
           _s46A::P64 = R1;
           goto c4hW;
       c4pw:
           if (%MO_S_Ge_W64(_s47h::I64,
                            _s46y::I64)) goto c4pr; else goto c4ps;
       c4pr:
           if (_s47i::I64 != 0) goto c4pe; else goto c4ph;
       c4pe:
           I64[Hp - 40] = Text_con_info;
           P64[Hp - 32] = _s46A::P64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s47i::I64;
           _c4pc::P64 = Hp - 39;
           Hp = Hp - 16;
           R1 = _c4pc::P64;
           Sp = Sp + 56;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4ph:
           Hp = Hp - 48;
           I64[Sp + 48] = c4pg;
           R1 = empty_closure;
           Sp = Sp + 48;
           if (R1 & 7 != 0) goto c4pg; else goto c4pi;
       c4pi:
           call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
       c4pg:
           R1 = R1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4ps:
           _s47q::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
           if (_s47q::I64 >= 55296) goto c4p7; else goto c4p8;
       c4p7:
           if (_s47q::I64 <= 56319) goto c4p2; else goto c4p3;
       c4p2:
           Hp = Hp - 48;
           _s47t::I64 = _s47h::I64 + 2;
           _s47s::I64 = ((_s47q::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + ((_s47h::I64 + 1) << 1)]) - 56320) + 65536;
           goto c4jd;
       c4p3:
           Hp = Hp - 48;
           _s47t::I64 = _s47h::I64 + 1;
           _s47s::I64 = _s47q::I64;
           goto c4jd;
       c4p8:
           Hp = Hp - 48;
           _s47t::I64 = _s47h::I64 + 1;
           _s47s::I64 = _s47q::I64;
           goto c4jd;
       c4jd:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4mA; else goto c4mz;
       c4mA:
           HpAlloc = 32;
           I64[Sp - 40] = c4je;
           I64[Sp - 32] = _s47i::I64;
           I64[Sp - 24] = _s47j::I64;
           I64[Sp - 16] = _s47s::I64;
           I64[Sp - 8] = _s47t::I64;
           I64[Sp] = _s46G::I64;
           I64[Sp + 16] = _s46B::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 40;
           call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
       c4je:
           _c4i2::P64 = P64[Sp + 88];
           _s464::P64 = P64[Sp + 64];
           _s46l::P64 = P64[Sp + 48];
           _s46y::I64 = I64[Sp + 80];
           _s46A::P64 = P64[Sp + 72];
           _s46B::I64 = I64[Sp + 56];
           _s46G::I64 = I64[Sp + 40];
           _s47i::I64 = I64[Sp + 8];
           _s47j::I64 = I64[Sp + 16];
           _s47s::I64 = I64[Sp + 24];
           _s47t::I64 = I64[Sp + 32];
           Sp = Sp + 40;
           goto c4jd;
       c4mz:
           _s47v::I64 = _s47s::I64;
           if (%MO_S_Lt_W64(_s47s::I64, 44032)) goto c4oH; else goto c4oJ;
       c4oJ:
           if (%MO_S_Gt_W64(_s47v::I64, 55203)) goto c4oH; else goto c4oG;
       c4oH:
           Hp = Hp - 32;
           if (%MO_S_Lt_W64(_s47v::I64, 192)) goto c4o3; else goto c4o4;
       c4o3:
           if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4o0; else goto c4o1;
       c4o0:
           if (_s47j::I64 != 0) goto c4nx; else goto c4ny;
       c4ny:
           _s47j::I64 = 1;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4o1:
           if (_s47j::I64 != 1) goto c4nx; else goto c4nU;
       c4nU:
           if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nW; else goto c4nX;
       c4nW:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nX:
           if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4nR; else goto c4nS;
       c4nR:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nS:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 2;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4o4:
           if (%MO_S_Le_W64(_s47v::I64, 195101)) goto c4ns; else goto c4nt;
       c4ns:
           if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4nn; else goto c4no;
       c4nn:
           if (_s47j::I64 != 0) goto c4nx; else goto c4mV;
       c4mV:
           _s47j::I64 = 1;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4no:
           if (_s47j::I64 != 1) goto c4nx; else goto c4nh;
       c4nx:
           R1 = lvl2_r45K_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4nh:
           if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nj; else goto c4nk;
       c4nj:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nk:
           if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4ne; else goto c4nf;
       c4ne:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nf:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 2;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nt:
           R1 = lvl1_r45J_closure;
           Sp = Sp + 56;
           call (I64[R1])(R1) args: 8, res: 0, upd: 8;
       c4oG:
           I64[Hp - 24] = $s$wa_s481_info;
           P64[Hp - 16] = _s46l::P64;
           P64[Hp - 8] = _s46A::P64;
           I64[Hp] = _s47j::I64;
           I64[Sp - 24] = c4o9;
           R3 = 0;
           R2 = _s47i::I64;
           R1 = Hp - 21;
           I64[Sp - 16] = _s47s::I64;
           I64[Sp - 8] = _s47t::I64;
           I64[Sp] = _s46G::I64;
           I64[Sp + 16] = _s46B::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 24;
           call $s$wa_s481_info(R3,
                                R2,
                                R1) returns to c4o9, args: 8, res: 8, upd: 8;
       c4o9:
           I64[Sp] = c4ob;
           R1 = R1;
           if (R1 & 7 != 0) goto c4ob; else goto c4oc;
       c4oc:
           call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
       c4ob:
           _s47s::I64 = I64[Sp + 8];
           I64[Sp + 8] = c4og;
           R4 = _s47s::I64;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 56];
           Sp = Sp + 8;
           call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
       c4og:
           I64[Sp] = c4oi;
           R1 = R1;
           if (R1 & 7 != 0) goto c4oi; else goto c4oj;
       c4oj:
           call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
       c4oi:
           I64[Sp - 8] = c4on;
           _s48H::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s48H::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto c4on; else goto c4oo;
       c4oo:
           call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
       c4on:
           I64[Sp] = c4os;
           _s48J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s48J::I64;
           if (R1 & 7 != 0) goto c4os; else goto c4oz;
       c4oz:
           call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
       c4os:
           _c4i2::P64 = P64[Sp + 72];
           _s464::P64 = P64[Sp + 48];
           _s46l::P64 = P64[Sp + 32];
           _s46y::I64 = I64[Sp + 64];
           _s46A::P64 = P64[Sp + 56];
           _s46B::I64 = I64[Sp + 40];
           _s46G::I64 = I64[Sp + 24];
           _s47i::I64 = I64[Sp + 8];
           _s47h::I64 = I64[Sp + 16];
           Sp = Sp + 24;
           _s47j::I64 = I64[R1 + 7];
           goto c4ic;
     }
 },
 $wnormalize_entry() //  [R5, R4, R3, R2]
         { info_tbl: [(c4he,
                       label: block_c4he_info
                       rep:StackRep [False, True, True]),
                      (c4qU,
                       label: $wnormalize_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4qU:
           if ((Sp + -32) < SpLim) goto c4qV; else goto c4qW;
       c4qV:
           R1 = $wnormalize_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c4qW:
           I64[Sp - 32] = c4he;
           R1 = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto c4he; else goto c4hf;
       c4hf:
           call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
       c4he:
           if (R1 & 7 != 1) goto c4qR; else goto c4qS;
       c4qR:
           R1 = lvl_r3Nn_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4qS:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4r1; else goto c4r0;
       c4r1:
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
       c4r0:
           I64[Hp - 24] = sat_s49l_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R2 = Hp - 23;
           Sp = Sp + 32;
           call runSTRep_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.291605 UTC

[section "data" {
     $wnormalize_closure:
         const $wnormalize_info;
         const 0;
 },
 $wnormalize_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 40 updfr_space: Just 8
         }
     {offset
       c4ha:
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s46t_entry() //  [R1]
         { info_tbl: [(c4iC,
                       label: sat_s46t_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iC:
           if ((Sp + -16) < SpLim) goto c4iD; else goto c4iE;
       c4iD:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4iE:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s46r::I64 = I64[R1 + 24];
           if (_s46r::I64 != 11) goto c4iA; else goto c4iB;
       c4iA:
           R2 = _s46r::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go1_s46m_info(R2, R1) args: 24, res: 0, upd: 24;
       c4iB:
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s46q_entry() //  [R1]
         { info_tbl: [(c4iN,
                       label: sat_s46q_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iN:
           I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
           R1 = ()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 go1_s46m_entry() //  [R2, R1]
         { info_tbl: [(c4iR,
                       label: go1_s46m_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4iR:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c4iV; else goto c4iU;
       c4iV:
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c4iU:
           _s46l::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s46t_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s46q_info;
           P64[Hp - 32] = _s46l::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl3_s46H_entry() //  [R1]
         { info_tbl: [(c4j0,
                       label: lvl3_s46H_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4j0:
           if ((Sp + -16) < SpLim) goto c4j1; else goto c4j2;
       c4j1:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c4j2:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 $s$wa_s481_entry() //  [R3, R2, R1]
         { info_tbl: [(c4jE,
                       label: $s$wa_s481_info
                       rep:HeapRep 2 ptrs 1 nonptrs {
                             Fun {arity: 3 fun_type: ArgSpec 12} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4jE:
           Hp = Hp + 16;
           if (Hp > HpLim) goto c4jI; else goto c4jH;
       c4jI:
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4jH:
           if (%MO_S_Ge_W64(R3, I64[R1 + 21])) goto c4k5; else goto c4k6;
       c4k5:
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = R2;
           R1 = Hp - 7;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4k6:
           _s46A::P64 = P64[R1 + 13];
           _s48a::I64 = %MO_UU_Conv_W32_W64(I32[P64[R1 + 5] + ((R3 << 2) + 16)]);
           if (%MO_S_Lt_W64(_s48a::I64, 65536)) goto c4jZ; else goto c4k0;
       c4jZ:
           I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(_s48a::I64);
           Hp = Hp - 16;
           R3 = R3 + 1;
           R2 = R2 + 1;
           R1 = R1;
           call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4k0:
           _s48d::I64 = _s48a::I64 - 65536;
           I16[(_s46A::P64 + 16) + (R2 << 1)] = %MO_UU_Conv_W64_W16(%MO_S_Shr_W64(_s48d::I64,
                                                                                  10) + 55296);
           I16[(_s46A::P64 + 16) + ((R2 + 1) << 1)] = %MO_UU_Conv_W64_W16(_s48d::I64 & 1023 + 56320);
           Hp = Hp - 16;
           R3 = R3 + 1;
           R2 = R2 + 2;
           R1 = R1;
           call $s$wa_s481_info(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s49l_entry() //  [R1]
         { info_tbl: [(c4hH,
                       label: block_c4hH_info
                       rep:StackRep [False, True, True, True]),
                      (c4hL,
                       label: block_c4hL_info
                       rep:StackRep [False, False, False, True, True, True]),
                      (c4hP,
                       label: block_c4hP_info
                       rep:StackRep [False, False, False, True, True, True]),
                      (c4hX,
                       label: block_c4hX_info
                       rep:StackRep [True, True, False, True, False, True, False, True]),
                      (c4id,
                       label: block_c4id_info
                       rep:StackRep [True, True, True, True, False, True, False, False,
                                     True, False]),
                      (c4je,
                       label: block_c4je_info
                       rep:StackRep [True, True, True, True, True, False, True, False,
                                     False, True, False]),
                      (c4kX,
                       label: sat_s49l_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} }),
                      (c4lj,
                       label: block_c4lj_info
                       rep:StackRep [True, True, False, True, False, False, True, True]),
                      (c4lI,
                       label: block_c4lI_info
                       rep:StackRep [True, True, False, True, False, False, True, True]),
                      (c4m8,
                       label: block_c4m8_info
                       rep:StackRep [False, False, False, True, False, False, True,
                                     False]),
                      (c4md,
                       label: block_c4md_info
                       rep:StackRep [False, True, False, True, False, False, True,
                                     False]),
                      (c4mi,
                       label: block_c4mi_info
                       rep:StackRep [True, True, False, True, False, False, True, False]),
                      (c4o9,
                       label: block_c4o9_info
                       rep:StackRep [True, True, True, False, True, False, False, True,
                                     False]),
                      (c4ob,
                       label: block_c4ob_info
                       rep:StackRep [True, True, True, False, True, False, False, True,
                                     False]),
                      (c4og,
                       label: block_c4og_info
                       rep:StackRep [True, True, False, True, False, False, True, False]),
                      (c4oi,
                       label: block_c4oi_info
                       rep:StackRep [True, True, False, True, False, False, True, False]),
                      (c4on,
                       label: block_c4on_info
                       rep:StackRep [False, True, True, False, True, False, False, True,
                                     False]),
                      (c4os,
                       label: block_c4os_info
                       rep:StackRep [True, True, True, False, True, False, False, True,
                                     False]),
                      (c4pg,
                       label: block_c4pg_info
                       rep:StackRep [])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4kX:
           if ((Sp + -96) < SpLim) goto c4kY; else goto c4kZ;
       c4kY:
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c4kZ:
           _s466::I64 = I64[R1 + 23];
           _s46a::I64 = _s466::I64 + 11;
           if (%MO_S_Lt_W64(_s46a::I64, 0)) goto c4pB; else goto c4pC;
       c4pC:
           if (_s46a::I64 & 4611686018427387904 != 0) goto c4pB; else goto c4l6;
       c4l6:
           I64[Sp - 40] = c4hH;
           _s464::P64 = P64[R1 + 7];
           _s465::I64 = I64[R1 + 15];
           R1 = _s46a::I64 << 1;
           P64[Sp - 32] = _s464::P64;
           I64[Sp - 24] = _s465::I64;
           I64[Sp - 16] = _s466::I64;
           I64[Sp - 8] = _s46a::I64;
           Sp = Sp - 40;
           call stg_newByteArray#(R1) returns to c4hH, args: 8, res: 8, upd: 8;
       c4hH:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c4la; else goto c4l9;
       c4la:
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c4hH, args: 8, res: 8, upd: 8;
       c4l9:
           I64[Hp - 72] = stg_ARR_WORDS_info;
           I64[Hp - 64] = 48;
           I64[Hp - 8] = go1_s46m_info;
           _s46l::P64 = Hp - 72;
           P64[Hp] = _s46l::P64;
           I64[Sp - 16] = c4hL;
           R2 = 0;
           _s46i::P64 = R1;
           R1 = Hp - 7;
           P64[Sp - 8] = _s46l::P64;
           P64[Sp] = _s46i::P64;
           Sp = Sp - 16;
           call go1_s46m_info(R2,
                              R1) returns to c4hL, args: 8, res: 8, upd: 8;
       c4hL:
           I64[Sp] = c4hP;
           R2 = R1;
           call poly_a_r45I_info(R2) returns to c4hP, args: 8, res: 8, upd: 8;
       c4hP:
           _s464::P64 = P64[Sp + 24];
           _s465::I64 = I64[Sp + 32];
           _s46l::P64 = P64[Sp + 8];
           _s46y::I64 = _s465::I64 + I64[Sp + 40];
           _s46E::I64 = 0;
           _s46D::I64 = 0;
           _s46C::I64 = _s465::I64;
           _s46B::I64 = I64[Sp + 48] - 1;
           _s46A::P64 = P64[Sp + 16];
           goto c4hW;
       c4hW:
           Hp = Hp + 24;
           if (Hp > HpLim) goto c4lf; else goto c4le;
       c4lf:
           HpAlloc = 24;
           I64[Sp - 16] = c4hX;
           I64[Sp - 8] = _s46E::I64;
           I64[Sp] = _s46D::I64;
           I64[Sp + 16] = _s46C::I64;
           I64[Sp + 32] = _s46B::I64;
           P64[Sp + 40] = _s46A::P64;
           I64[Sp + 48] = _s46y::I64;
           Sp = Sp - 16;
           call stg_gc_noregs() returns to c4hX, args: 8, res: 8, upd: 8;
       c4hX:
           _s464::P64 = P64[Sp + 40];
           _s46l::P64 = P64[Sp + 24];
           _s46y::I64 = I64[Sp + 64];
           _s46A::P64 = P64[Sp + 56];
           _s46B::I64 = I64[Sp + 48];
           _s46C::I64 = I64[Sp + 32];
           _s46D::I64 = I64[Sp + 16];
           _s46E::I64 = I64[Sp + 8];
           Sp = Sp + 16;
           goto c4hW;
       c4le:
           I64[Hp - 16] = lvl3_s46H_info;
           _s46G::I64 = _s46B::I64 << 1;
           I64[Hp] = _s46G::I64;
           _c4i2::P64 = Hp - 16;
           _s47j::I64 = _s46E::I64;
           _s47i::I64 = _s46D::I64;
           _s47h::I64 = _s46C::I64;
           goto c4ic;
       c4ic:
           Hp = Hp + 48;
           if (Hp > HpLim) goto c4mx; else goto c4mw;
       c4mx:
           HpAlloc = 48;
           I64[Sp - 32] = c4id;
           I64[Sp - 24] = _s47h::I64;
           I64[Sp - 16] = _s47i::I64;
           I64[Sp - 8] = _s47j::I64;
           I64[Sp] = _s46G::I64;
           I64[Sp + 16] = _s46B::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 32;
           call stg_gc_noregs() returns to c4id, args: 8, res: 8, upd: 8;
       c4id:
           _c4i2::P64 = P64[Sp + 80];
           _s464::P64 = P64[Sp + 56];
           _s46l::P64 = P64[Sp + 40];
           _s46y::I64 = I64[Sp + 72];
           _s46A::P64 = P64[Sp + 64];
           _s46B::I64 = I64[Sp + 48];
           _s46G::I64 = I64[Sp + 32];
           _s47h::I64 = I64[Sp + 8];
           _s47i::I64 = I64[Sp + 16];
           _s47j::I64 = I64[Sp + 24];
           Sp = Sp + 32;
           goto c4ic;
       c4mw:
           if (%MO_S_Lt_W64(_s46B::I64,
                            _s47i::I64 + 11)) goto c4pv; else goto c4pw;
       c4pv:
           I64[Hp - 40] = I#_con_info;
           I64[Hp - 32] = _s47j::I64;
           I64[Hp - 24] = I#_con_info;
           I64[Hp - 16] = _s47i::I64;
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s47h::I64;
           I64[Sp - 16] = c4m8;
           R1 = Hp - 7;
           P64[Sp - 8] = Hp - 39;
           P64[Sp] = Hp - 23;
           I64[Sp + 16] = _s46G::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4m8; else goto c4m9;
       c4m9:
           call (I64[R1])(R1) returns to c4m8, args: 8, res: 8, upd: 8;
       c4m8:
           I64[Sp] = c4md;
           _s47a::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s47a::I64;
           if (R1 & 7 != 0) goto c4md; else goto c4me;
       c4me:
           call (I64[R1])(R1) returns to c4md, args: 8, res: 8, upd: 8;
       c4md:
           I64[Sp] = c4mi;
           _s47c::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s47c::I64;
           if (R1 & 7 != 0) goto c4mi; else goto c4mm;
       c4mm:
           call (I64[R1])(R1) returns to c4mi, args: 8, res: 8, upd: 8;
       c4mi:
           I64[Sp] = c4lj;
           _s46M::I64 = I64[R1 + 7];
           R1 = P64[Sp + 64];
           _s46L::I64 = I64[Sp + 8];
           I64[Sp + 8] = _s46M::I64;
           _s46K::I64 = I64[Sp + 16];
           I64[Sp + 16] = _s46L::I64;
           I64[Sp + 64] = _s46K::I64;
           if (R1 & 7 != 0) goto c4lj; else goto c4ll;
       c4ll:
           call (I64[R1])(R1) returns to c4lj, args: 8, res: 8, upd: 8;
       c4lj:
           if (R1 & 7 >= 2) goto u4r4; else goto c4m4;
       u4r4:
           Sp = Sp + 72;
           goto c4pB;
       c4m4:
           _s46G::I64 = I64[Sp + 32];
           if (_s46G::I64 & 4611686018427387904 != 0) goto u4r5; else goto c4lB;
       u4r5:
           Sp = Sp + 72;
           goto c4pB;
       c4pB:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4lB:
           I64[Sp] = c4lI;
           R1 = _s46G::I64 << 1;
           call stg_newByteArray#(R1) returns to c4lI, args: 8, res: 8, upd: 8;
       c4lI:
           _s464::P64 = P64[Sp + 40];
           _s46l::P64 = P64[Sp + 24];
           _s46y::I64 = I64[Sp + 56];
           _s46G::I64 = I64[Sp + 32];
           _s46K::I64 = I64[Sp + 64];
           _s46L::I64 = I64[Sp + 16];
           _s46M::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s46L::I64, 0)) goto c4lT; else goto c4lU;
       c4lT:
           Sp = Sp + 16;
           _s46E::I64 = _s46M::I64;
           _s46D::I64 = _s46L::I64;
           _s46C::I64 = _s46K::I64;
           _s46B::I64 = _s46G::I64 - 1;
           _s46A::P64 = R1;
           goto c4hW;
       c4lU:
           call "ccall" arg hints:  [PtrHint, , PtrHint,
                                     ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 48] + 16, 0, _s46L::I64);
           Sp = Sp + 16;
           _s46E::I64 = _s46M::I64;
           _s46D::I64 = _s46L::I64;
           _s46C::I64 = _s46K::I64;
           _s46B::I64 = _s46G::I64 - 1;
           _s46A::P64 = R1;
           goto c4hW;
       c4pw:
           if (%MO_S_Ge_W64(_s47h::I64,
                            _s46y::I64)) goto c4pr; else goto c4ps;
       c4pr:
           if (_s47i::I64 != 0) goto c4pe; else goto c4ph;
       c4pe:
           I64[Hp - 40] = Text_con_info;
           P64[Hp - 32] = _s46A::P64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s47i::I64;
           _c4pc::P64 = Hp - 39;
           Hp = Hp - 16;
           R1 = _c4pc::P64;
           Sp = Sp + 56;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4ph:
           Hp = Hp - 48;
           I64[Sp + 48] = c4pg;
           R1 = empty_closure;
           Sp = Sp + 48;
           if (R1 & 7 != 0) goto c4pg; else goto c4pi;
       c4pi:
           call (I64[R1])(R1) returns to c4pg, args: 8, res: 8, upd: 8;
       c4pg:
           R1 = R1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4ps:
           _s47q::I64 = %MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + (_s47h::I64 << 1)]);
           if (_s47q::I64 >= 55296) goto c4p7; else goto c4p8;
       c4p7:
           if (_s47q::I64 <= 56319) goto c4p2; else goto c4p3;
       c4p2:
           Hp = Hp - 48;
           _s47t::I64 = _s47h::I64 + 2;
           _s47s::I64 = ((_s47q::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s464::P64 + 16) + ((_s47h::I64 + 1) << 1)]) - 56320) + 65536;
           goto c4jd;
       c4p3:
           Hp = Hp - 48;
           _s47t::I64 = _s47h::I64 + 1;
           _s47s::I64 = _s47q::I64;
           goto c4jd;
       c4p8:
           Hp = Hp - 48;
           _s47t::I64 = _s47h::I64 + 1;
           _s47s::I64 = _s47q::I64;
           goto c4jd;
       c4jd:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4mA; else goto c4mz;
       c4mA:
           HpAlloc = 32;
           I64[Sp - 40] = c4je;
           I64[Sp - 32] = _s47i::I64;
           I64[Sp - 24] = _s47j::I64;
           I64[Sp - 16] = _s47s::I64;
           I64[Sp - 8] = _s47t::I64;
           I64[Sp] = _s46G::I64;
           I64[Sp + 16] = _s46B::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 40;
           call stg_gc_noregs() returns to c4je, args: 8, res: 8, upd: 8;
       c4je:
           _c4i2::P64 = P64[Sp + 88];
           _s464::P64 = P64[Sp + 64];
           _s46l::P64 = P64[Sp + 48];
           _s46y::I64 = I64[Sp + 80];
           _s46A::P64 = P64[Sp + 72];
           _s46B::I64 = I64[Sp + 56];
           _s46G::I64 = I64[Sp + 40];
           _s47i::I64 = I64[Sp + 8];
           _s47j::I64 = I64[Sp + 16];
           _s47s::I64 = I64[Sp + 24];
           _s47t::I64 = I64[Sp + 32];
           Sp = Sp + 40;
           goto c4jd;
       c4mz:
           _s47v::I64 = _s47s::I64;
           if (%MO_S_Lt_W64(_s47s::I64, 44032)) goto c4oH; else goto c4oJ;
       c4oJ:
           if (%MO_S_Gt_W64(_s47v::I64, 55203)) goto c4oH; else goto c4oG;
       c4oH:
           Hp = Hp - 32;
           if (%MO_S_Lt_W64(_s47v::I64, 192)) goto c4o3; else goto c4o4;
       c4o3:
           if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4o0; else goto c4o1;
       c4o0:
           if (_s47j::I64 != 0) goto c4nx; else goto c4ny;
       c4ny:
           _s47j::I64 = 1;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4o1:
           if (_s47j::I64 != 1) goto c4nx; else goto c4nU;
       c4nU:
           if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nW; else goto c4nX;
       c4nW:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nX:
           if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4nR; else goto c4nS;
       c4nR:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nS:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 2;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4o4:
           if (%MO_S_Le_W64(_s47v::I64, 195101)) goto c4ns; else goto c4nt;
       c4ns:
           if (%MO_S_Lt_W64(_s47j::I64, 1)) goto c4nn; else goto c4no;
       c4nn:
           if (_s47j::I64 != 0) goto c4nx; else goto c4mV;
       c4mV:
           _s47j::I64 = 1;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4no:
           if (_s47j::I64 != 1) goto c4nx; else goto c4nh;
       c4nx:
           R1 = lvl2_r45K_closure;
           Sp = Sp + 56;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4nh:
           if (%MO_S_Lt_W64(_s47v::I64, 768)) goto c4nj; else goto c4nk;
       c4nj:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nk:
           if (%MO_S_Gt_W64(_s47v::I64, 125142)) goto c4ne; else goto c4nf;
       c4ne:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 1;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nf:
           _s47j::I64 = 0;
           _s47i::I64 = _s47i::I64 + 2;
           _s47h::I64 = _s47t::I64;
           goto c4ic;
       c4nt:
           R1 = lvl1_r45J_closure;
           Sp = Sp + 56;
           call (I64[R1])(R1) args: 8, res: 0, upd: 8;
       c4oG:
           I64[Hp - 24] = $s$wa_s481_info;
           P64[Hp - 16] = _s46l::P64;
           P64[Hp - 8] = _s46A::P64;
           I64[Hp] = _s47j::I64;
           I64[Sp - 24] = c4o9;
           R3 = 0;
           R2 = _s47i::I64;
           R1 = Hp - 21;
           I64[Sp - 16] = _s47s::I64;
           I64[Sp - 8] = _s47t::I64;
           I64[Sp] = _s46G::I64;
           I64[Sp + 16] = _s46B::I64;
           P64[Sp + 32] = _s46A::P64;
           I64[Sp + 40] = _s46y::I64;
           P64[Sp + 48] = _c4i2::P64;
           Sp = Sp - 24;
           call $s$wa_s481_info(R3,
                                R2,
                                R1) returns to c4o9, args: 8, res: 8, upd: 8;
       c4o9:
           I64[Sp] = c4ob;
           R1 = R1;
           if (R1 & 7 != 0) goto c4ob; else goto c4oc;
       c4oc:
           call (I64[R1])(R1) returns to c4ob, args: 8, res: 8, upd: 8;
       c4ob:
           _s47s::I64 = I64[Sp + 8];
           I64[Sp + 8] = c4og;
           R4 = _s47s::I64;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 56];
           Sp = Sp + 8;
           call $wa_info(R4, R3, R2) returns to c4og, args: 8, res: 8, upd: 8;
       c4og:
           I64[Sp] = c4oi;
           R1 = R1;
           if (R1 & 7 != 0) goto c4oi; else goto c4oj;
       c4oj:
           call (I64[R1])(R1) returns to c4oi, args: 8, res: 8, upd: 8;
       c4oi:
           I64[Sp - 8] = c4on;
           _s48H::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s48H::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto c4on; else goto c4oo;
       c4oo:
           call (I64[R1])(R1) returns to c4on, args: 8, res: 8, upd: 8;
       c4on:
           I64[Sp] = c4os;
           _s48J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s48J::I64;
           if (R1 & 7 != 0) goto c4os; else goto c4oz;
       c4oz:
           call (I64[R1])(R1) returns to c4os, args: 8, res: 8, upd: 8;
       c4os:
           _c4i2::P64 = P64[Sp + 72];
           _s464::P64 = P64[Sp + 48];
           _s46l::P64 = P64[Sp + 32];
           _s46y::I64 = I64[Sp + 64];
           _s46A::P64 = P64[Sp + 56];
           _s46B::I64 = I64[Sp + 40];
           _s46G::I64 = I64[Sp + 24];
           _s47i::I64 = I64[Sp + 8];
           _s47h::I64 = I64[Sp + 16];
           Sp = Sp + 24;
           _s47j::I64 = I64[R1 + 7];
           goto c4ic;
     }
 },
 $wnormalize_entry() //  [R5, R4, R3, R2]
         { info_tbl: [(c4he,
                       label: block_c4he_info
                       rep:StackRep [False, True, True]),
                      (c4qU,
                       label: $wnormalize_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4qU:
           if ((Sp + -32) < SpLim) goto c4qV; else goto c4qW;
       c4qV:
           R1 = $wnormalize_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c4qW:
           I64[Sp - 32] = c4he;
           R1 = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto c4he; else goto c4hf;
       c4hf:
           call (I64[R1])(R1) returns to c4he, args: 8, res: 8, upd: 8;
       c4he:
           if (R1 & 7 != 1) goto c4qR; else goto c4qS;
       c4qR:
           R1 = lvl_r3Nn_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4qS:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4r1; else goto c4r0;
       c4r1:
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c4he, args: 8, res: 8, upd: 8;
       c4r0:
           I64[Hp - 24] = sat_s49l_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R2 = Hp - 23;
           Sp = Sp + 32;
           call runSTRep_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 12:17:05.319043 UTC

[section "data" {
     normalize_closure:
         const normalize_info;
         const 0;
 },
 normalize_entry() //  [R3, R2]
         { info_tbl: [(c4su,
                       label: normalize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4su:
           _s49n::P64 = R3;
           _s49m::P64 = R2;
           goto c4sp;
       c4sp:
           if ((old + 0) - <highSp> < SpLim) goto c4sv; else goto c4sw;
       c4sv:
           R3 = _s49n::P64;
           R2 = _s49m::P64;
           R1 = normalize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4sw:
           goto c4so;
       c4so:
           I64[(young<c4sr> + 8)] = c4sr;
           R1 = _s49n::P64;
           if (R1 & 7 != 0) goto c4sr; else goto c4ss;
       c4ss:
           call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
       c4sr:
           _s49o::P64 = R1;
           _s49p::P64 = P64[_s49o::P64 + 7];
           _s49q::I64 = I64[_s49o::P64 + 15];
           _s49r::I64 = I64[_s49o::P64 + 23];
           R5 = _s49r::I64;
           R4 = _s49q::I64;
           R3 = _s49p::P64;
           R2 = _s49m::P64;
           call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.320267 UTC

{offset
  c4su:
      _s49n::P64 = R3;
      _s49m::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4sv; else goto c4sw;
  c4sv:
      R3 = _s49n::P64;
      R2 = _s49m::P64;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4sw:
      I64[(young<c4sr> + 8)] = c4sr;
      R1 = _s49n::P64;
      if (R1 & 7 != 0) goto c4sr; else goto c4ss;
  c4ss:
      call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
  c4sr:
      _s49o::P64 = R1;
      _s49p::P64 = P64[_s49o::P64 + 7];
      _s49q::I64 = I64[_s49o::P64 + 15];
      _s49r::I64 = I64[_s49o::P64 + 23];
      R5 = _s49r::I64;
      R4 = _s49q::I64;
      R3 = _s49p::P64;
      R2 = _s49m::P64;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 12:17:05.321234 UTC

{offset
  c4su:
      _s49n::P64 = R3;
      _s49m::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4sv; else goto c4sw;
  c4sv:
      R3 = _s49n::P64;
      R2 = _s49m::P64;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4sw:
      I64[(young<c4sr> + 8)] = c4sr;
      R1 = _s49n::P64;
      if (R1 & 7 != 0) goto c4sr; else goto c4ss;
  c4ss:
      call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
  c4sr:
      _s49o::P64 = R1;
      _s49p::P64 = P64[_s49o::P64 + 7];
      _s49q::I64 = I64[_s49o::P64 + 15];
      _s49r::I64 = I64[_s49o::P64 + 23];
      R5 = _s49r::I64;
      R4 = _s49q::I64;
      R3 = _s49p::P64;
      R2 = _s49m::P64;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 12:17:05.322236 UTC

{offset
  c4su:
      _s49n::P64 = R3;
      _s49m::P64 = R2;
      if ((Sp + 8) - 24 < SpLim) goto c4sv; else goto c4sw;
  c4sv:
      R3 = _s49n::P64;
      R2 = _s49m::P64;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4sw:
      I64[Sp - 16] = c4sr;
      R1 = _s49n::P64;
      P64[Sp - 8] = _s49m::P64;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4sr; else goto c4ss;
  c4ss:
      call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
  c4sr:
      _s49m::P64 = P64[Sp + 8];
      _s49o::P64 = R1;
      _s49p::P64 = P64[_s49o::P64 + 7];
      _s49q::I64 = I64[_s49o::P64 + 15];
      _s49r::I64 = I64[_s49o::P64 + 23];
      R5 = _s49r::I64;
      R4 = _s49q::I64;
      R3 = _s49p::P64;
      R2 = _s49m::P64;
      Sp = Sp + 16;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 12:17:05.323041 UTC

{offset
  c4su:
      if ((Sp + -16) < SpLim) goto c4sv; else goto c4sw;
  c4sv:
      R3 = R3;
      R2 = R2;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4sw:
      I64[Sp - 16] = c4sr;
      R1 = R3;
      P64[Sp - 8] = R2;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4sr; else goto c4ss;
  c4ss:
      call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
  c4sr:
      R5 = I64[R1 + 23];
      R4 = I64[R1 + 15];
      R3 = P64[R1 + 7];
      R2 = P64[Sp + 8];
      Sp = Sp + 16;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 12:17:05.323775 UTC

[(c4sr, {$wnormalize_closure}), (c4ss, {$wnormalize_closure}),
 (c4su, {$wnormalize_closure, normalize_closure}),
 (c4sv, {normalize_closure}), (c4sw, {$wnormalize_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 12:17:05.32428 UTC

normalize_entry() //  [R3, R2]
        { info_tbl: [(c4sr,
                      label: block_c4sr_info
                      rep:StackRep [False]),
                     (c4su,
                      label: normalize_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4su:
          if ((Sp + -16) < SpLim) goto c4sv; else goto c4sw;
      c4sv:
          R3 = R3;
          R2 = R2;
          R1 = normalize_closure;
          call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4sw:
          I64[Sp - 16] = c4sr;
          R1 = R3;
          P64[Sp - 8] = R2;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4sr; else goto c4ss;
      c4ss:
          call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
      c4sr:
          R5 = I64[R1 + 23];
          R4 = I64[R1 + 15];
          R3 = P64[R1 + 7];
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 12:17:05.325358 UTC

normalize_entry() //  [R3, R2]
        { info_tbl: [(c4sr,
                      label: block_c4sr_info
                      rep:StackRep [False]),
                     (c4su,
                      label: normalize_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4su:
          if ((Sp + -16) < SpLim) goto c4sv; else goto c4sw;
      c4sv:
          R3 = R3;
          R2 = R2;
          R1 = normalize_closure;
          call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4sw:
          I64[Sp - 16] = c4sr;
          R1 = R3;
          P64[Sp - 8] = R2;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4sr; else goto c4ss;
      c4ss:
          call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
      c4sr:
          R5 = I64[R1 + 23];
          R4 = I64[R1 + 15];
          R3 = P64[R1 + 7];
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 12:17:05.326204 UTC

[section "data" {
     normalize_closure:
         const normalize_info;
         const 0;
 },
 normalize_entry() //  [R3, R2]
         { info_tbl: [(c4sr,
                       label: block_c4sr_info
                       rep:StackRep [False]),
                      (c4su,
                       label: normalize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4su:
           if ((Sp + -16) < SpLim) goto c4sv; else goto c4sw;
       c4sv:
           R3 = R3;
           R2 = R2;
           R1 = normalize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4sw:
           I64[Sp - 16] = c4sr;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4sr; else goto c4ss;
       c4ss:
           call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
       c4sr:
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.326961 UTC

[section "data" {
     normalize_closure:
         const normalize_info;
         const 0;
 },
 normalize_entry() //  [R3, R2]
         { info_tbl: [(c4sr,
                       label: block_c4sr_info
                       rep:StackRep [False]),
                      (c4su,
                       label: normalize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4su:
           if ((Sp + -16) < SpLim) goto c4sv; else goto c4sw;
       c4sv:
           R3 = R3;
           R2 = R2;
           R1 = normalize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4sw:
           I64[Sp - 16] = c4sr;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4sr; else goto c4ss;
       c4ss:
           call (I64[R1])(R1) returns to c4sr, args: 8, res: 8, upd: 8;
       c4sr:
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 12:17:05.329378 UTC

[section "relreadonly" {
     S4g3_srt:
         const patError_closure;
         const array_size_error_closure;
         const empty_closure;
         const lvl1_r45J_closure;
         const lvl2_r45K_closure;
         const lvl_r3Nn_closure;
         const $wnormalize_closure;
         const normalize_closure;
 }]

