
==================== Cmm produced by new codegen ====================
2016-06-25 18:54:13.238192 UTC

[section "data" { __stginit_main@main:Data.Text.NormalizeNative:
 }]


==================== Post CPS Cmm ====================
2016-06-25 18:54:13.239387 UTC

[section "data" { __stginit_main@main:Data.Text.NormalizeNative:
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.240496 UTC

[section "data" { __stginit_main@main:Data.Text.NormalizeNative:
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 18:54:13.24367 UTC

[section "data" {
     lvl_r3LM_closure:
         const lvl_r3LM_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c46r_str:
         I8[] [46,46,47,68,97,116,97,47,84,101,120,116,47,78,111,114,109,97,108,105,122,101,78,97,116,105,118,101,46,104,115,58,40,50,57,44,53,41,45,40,51,48,44,51,53,41,124,99,97,115,101]
 },
 lvl_r3LM_entry() //  [R1]
         { info_tbl: [(c46s,
                       label: lvl_r3LM_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c46s:
           _r3LM::P64 = R1;
           goto c46m;
       c46m:
           if ((old + 0) - <highSp> < SpLim) goto c46t; else goto c46u;
       c46t:
           R1 = _r3LM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46u:
           (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3LM::P64);
           if (_c46o::I64 == 0) goto c46q; else goto c46p;
       c46q:
           call (I64[_r3LM::P64])() args: 8, res: 0, upd: 8;
       c46p:
           I64[(old + 24)] = stg_bh_upd_frame_info;
           I64[(old + 16)] = _c46o::I64;
           R2 = c46r_str;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.245353 UTC

{offset
  c46s:
      _r3LM::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c46t; else goto c46u;
  c46t:
      R1 = _r3LM::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c46u:
      (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3LM::P64);
      if (_c46o::I64 == 0) goto c46q; else goto c46p;
  c46q:
      call (I64[_r3LM::P64])() args: 8, res: 0, upd: 8;
  c46p:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c46o::I64;
      R2 = c46r_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.246648 UTC

{offset
  c46s:
      _r3LM::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c46t; else goto c46u;
  c46t:
      R1 = _r3LM::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c46u:
      (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3LM::P64);
      if (_c46o::I64 == 0) goto c46q; else goto c46p;
  c46q:
      call (I64[_r3LM::P64])() args: 8, res: 0, upd: 8;
  c46p:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c46o::I64;
      R2 = c46r_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.248112 UTC

{offset
  c46s:
      _r3LM::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c46t; else goto c46u;
  c46t:
      R1 = _r3LM::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c46u:
      (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3LM::P64);
      if (_c46o::I64 == 0) goto c46q; else goto c46p;
  c46q:
      call (I64[_r3LM::P64])() args: 8, res: 0, upd: 8;
  c46p:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c46o::I64;
      R2 = c46r_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.249655 UTC

{offset
  c46s:
      if ((Sp + -16) < SpLim) goto c46t; else goto c46u;
  c46t:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c46u:
      (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
      if (_c46o::I64 == 0) goto c46q; else goto c46p;
  c46q:
      call (I64[R1])() args: 8, res: 0, upd: 8;
  c46p:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c46o::I64;
      R2 = c46r_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.250954 UTC

[(c46p, {patError_closure}), (c46q, {}),
 (c46s, {patError_closure}), (c46t, {}), (c46u, {patError_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.252036 UTC

lvl_r3LM_entry() //  [R1]
        { info_tbl: [(c46s,
                      label: lvl_r3LM_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c46s:
          if ((Sp + -16) < SpLim) goto c46t; else goto c46u;
      c46t:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c46u:
          (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c46o::I64 == 0) goto c46q; else goto c46p;
      c46q:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c46p:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c46o::I64;
          R2 = c46r_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.253433 UTC

lvl_r3LM_entry() //  [R1]
        { info_tbl: [(c46s,
                      label: lvl_r3LM_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c46s:
          if ((Sp + -16) < SpLim) goto c46t; else goto c46u;
      c46t:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c46u:
          (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c46o::I64 == 0) goto c46q; else goto c46p;
      c46q:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c46p:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c46o::I64;
          R2 = c46r_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 18:54:13.254758 UTC

[section "data" {
     lvl_r3LM_closure:
         const lvl_r3LM_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c46r_str:
         I8[] [46,46,47,68,97,116,97,47,84,101,120,116,47,78,111,114,109,97,108,105,122,101,78,97,116,105,118,101,46,104,115,58,40,50,57,44,53,41,45,40,51,48,44,51,53,41,124,99,97,115,101]
 },
 lvl_r3LM_entry() //  [R1]
         { info_tbl: [(c46s,
                       label: lvl_r3LM_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c46s:
           if ((Sp + -16) < SpLim) goto c46t; else goto c46u;
       c46t:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46u:
           (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46o::I64 == 0) goto c46q; else goto c46p;
       c46q:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c46p:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46o::I64;
           R2 = c46r_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.256257 UTC

[section "data" {
     lvl_r3LM_closure:
         const lvl_r3LM_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c46r_str:
         I8[] [46,46,47,68,97,116,97,47,84,101,120,116,47,78,111,114,109,97,108,105,122,101,78,97,116,105,118,101,46,104,115,58,40,50,57,44,53,41,45,40,51,48,44,51,53,41,124,99,97,115,101]
 },
 lvl_r3LM_entry() //  [R1]
         { info_tbl: [(c46s,
                       label: lvl_r3LM_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c46s:
           if ((Sp + -16) < SpLim) goto c46t; else goto c46u;
       c46t:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c46u:
           (_c46o::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c46o::I64 == 0) goto c46q; else goto c46p;
       c46q:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c46p:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c46o::I64;
           R2 = c46r_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 18:54:13.261701 UTC

[section "data" {
     poly_a_r3Yq_closure:
         const poly_a_r3Yq_info;
 },
 poly_a_r3Yq_entry() //  [R2]
         { info_tbl: [(c46P,
                       label: poly_a_r3Yq_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c46P:
           _s3YC::P64 = R2;
           goto c46D;
       c46D:
           if ((old + 0) - <highSp> < SpLim) goto c46Q; else goto c46R;
       c46Q:
           R2 = _s3YC::P64;
           R1 = poly_a_r3Yq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46R:
           goto c46C;
       c46C:
           I64[(young<c46F> + 8)] = c46F;
           R1 = _s3YC::P64;
           if (R1 & 7 != 0) goto c46F; else goto c46G;
       c46G:
           call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
       c46F:
           _s3YE::P64 = R1;
           _c46L::P64 = _s3YE::P64 & 7;
           if (_c46L::P64 >= 2) goto c46N; else goto c46O;
       c46N:
           goto c46K;
       c46K:
           _s3YF::P64 = P64[_s3YE::P64 + 6];
           _s3YG::P64 = P64[_s3YE::P64 + 14];
           I64[(young<c46X> + 8)] = c46X;
           R1 = _s3YF::P64;
           call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
       c46X:
           _s3YJ::P64 = R1;
           R2 = _s3YG::P64;
           call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
       c46O:
           goto c46J;
       c46J:
           R1 = ()_closure+1;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.263442 UTC

{offset
  c46P:
      _s3YC::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c46Q; else goto c46R;
  c46Q:
      R2 = _s3YC::P64;
      R1 = poly_a_r3Yq_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c46R:
      I64[(young<c46F> + 8)] = c46F;
      R1 = _s3YC::P64;
      if (R1 & 7 != 0) goto c46F; else goto c46G;
  c46G:
      call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
  c46F:
      _s3YE::P64 = R1;
      _c46L::P64 = _s3YE::P64 & 7;
      if (_c46L::P64 >= 2) goto c46N; else goto c46O;
  c46N:
      _s3YF::P64 = P64[_s3YE::P64 + 6];
      _s3YG::P64 = P64[_s3YE::P64 + 14];
      I64[(young<c46X> + 8)] = c46X;
      R1 = _s3YF::P64;
      call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
  c46X:
      _s3YJ::P64 = R1;
      R2 = _s3YG::P64;
      call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
  c46O:
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.265166 UTC

{offset
  c46P:
      _s3YC::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c46Q; else goto c46R;
  c46Q:
      R2 = _s3YC::P64;
      R1 = poly_a_r3Yq_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c46R:
      I64[(young<c46F> + 8)] = c46F;
      R1 = _s3YC::P64;
      if (R1 & 7 != 0) goto c46F; else goto c46G;
  c46G:
      call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
  c46F:
      _s3YE::P64 = R1;
      _c46L::P64 = _s3YE::P64 & 7;
      if (_c46L::P64 >= 2) goto c46N; else goto c46O;
  c46N:
      _s3YF::P64 = P64[_s3YE::P64 + 6];
      _s3YG::P64 = P64[_s3YE::P64 + 14];
      I64[(young<c46X> + 8)] = c46X;
      R1 = _s3YF::P64;
      call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
  c46X:
      _s3YJ::P64 = R1;
      R2 = _s3YG::P64;
      call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
  c46O:
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.266605 UTC

{offset
  c46P:
      _s3YC::P64 = R2;
      if ((Sp + 8) - 24 < SpLim) goto c46Q; else goto c46R;
  c46Q:
      R2 = _s3YC::P64;
      R1 = poly_a_r3Yq_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c46R:
      I64[Sp - 8] = c46F;
      R1 = _s3YC::P64;
      Sp = Sp - 8;
      if (R1 & 7 != 0) goto c46F; else goto c46G;
  c46G:
      call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
  c46F:
      _s3YE::P64 = R1;
      _c46L::P64 = _s3YE::P64 & 7;
      if (_c46L::P64 >= 2) goto c46N; else goto c46O;
  c46N:
      _s3YF::P64 = P64[_s3YE::P64 + 6];
      _s3YG::P64 = P64[_s3YE::P64 + 14];
      I64[Sp - 8] = c46X;
      R1 = _s3YF::P64;
      P64[Sp] = _s3YG::P64;
      Sp = Sp - 8;
      call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
  c46X:
      _s3YG::P64 = P64[Sp + 8];
      _s3YJ::P64 = R1;
      R2 = _s3YG::P64;
      Sp = Sp + 16;
      call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
  c46O:
      R1 = ()_closure+1;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.270205 UTC

{offset
  c46P:
      if ((Sp + -16) < SpLim) goto c46Q; else goto c46R;
  c46Q:
      R2 = R2;
      R1 = poly_a_r3Yq_closure;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c46R:
      I64[Sp - 8] = c46F;
      R1 = R2;
      Sp = Sp - 8;
      if (R1 & 7 != 0) goto c46F; else goto c46G;
  c46G:
      call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
  c46F:
      if (R1 & 7 >= 2) goto c46N; else goto c46O;
  c46N:
      I64[Sp - 8] = c46X;
      _s3YG::P64 = P64[R1 + 14];
      R1 = P64[R1 + 6];
      P64[Sp] = _s3YG::P64;
      Sp = Sp - 8;
      call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
  c46X:
      R2 = P64[Sp + 8];
      Sp = Sp + 16;
      call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
  c46O:
      R1 = ()_closure+1;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.271722 UTC

[(c46F, {}), (c46G, {}), (c46N, {}), (c46O, {}), (c46P, {}),
 (c46Q, {}), (c46R, {}), (c46X, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.273214 UTC

poly_a_r3Yq_entry() //  [R2]
        { info_tbl: [(c46F,
                      label: block_c46F_info
                      rep:StackRep []),
                     (c46P,
                      label: poly_a_r3Yq_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                     (c46X,
                      label: block_c46X_info
                      rep:StackRep [False])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c46P:
          if ((Sp + -16) < SpLim) goto c46Q; else goto c46R;
      c46Q:
          R2 = R2;
          R1 = poly_a_r3Yq_closure;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c46R:
          I64[Sp - 8] = c46F;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c46F; else goto c46G;
      c46G:
          call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
      c46F:
          if (R1 & 7 >= 2) goto c46N; else goto c46O;
      c46N:
          I64[Sp - 8] = c46X;
          _s3YG::P64 = P64[R1 + 14];
          R1 = P64[R1 + 6];
          P64[Sp] = _s3YG::P64;
          Sp = Sp - 8;
          call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
      c46X:
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
      c46O:
          R1 = ()_closure+1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.274815 UTC

poly_a_r3Yq_entry() //  [R2]
        { info_tbl: [(c46F,
                      label: block_c46F_info
                      rep:StackRep []),
                     (c46P,
                      label: poly_a_r3Yq_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                     (c46X,
                      label: block_c46X_info
                      rep:StackRep [False])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c46P:
          if ((Sp + -16) < SpLim) goto c46Q; else goto c46R;
      c46Q:
          R2 = R2;
          R1 = poly_a_r3Yq_closure;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c46R:
          I64[Sp - 8] = c46F;
          R1 = R2;
          Sp = Sp - 8;
          if (R1 & 7 != 0) goto c46F; else goto c46G;
      c46G:
          call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
      c46F:
          if (R1 & 7 >= 2) goto c46N; else goto c46O;
      c46N:
          I64[Sp - 8] = c46X;
          _s3YG::P64 = P64[R1 + 14];
          R1 = P64[R1 + 6];
          P64[Sp] = _s3YG::P64;
          Sp = Sp - 8;
          call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
      c46X:
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
      c46O:
          R1 = ()_closure+1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 18:54:13.276375 UTC

[section "data" {
     poly_a_r3Yq_closure:
         const poly_a_r3Yq_info;
 },
 poly_a_r3Yq_entry() //  [R2]
         { info_tbl: [(c46F,
                       label: block_c46F_info
                       rep:StackRep []),
                      (c46P,
                       label: poly_a_r3Yq_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                      (c46X,
                       label: block_c46X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c46P:
           if ((Sp + -16) < SpLim) goto c46Q; else goto c46R;
       c46Q:
           R2 = R2;
           R1 = poly_a_r3Yq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46R:
           I64[Sp - 8] = c46F;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto c46F; else goto c46G;
       c46G:
           call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
       c46F:
           if (R1 & 7 >= 2) goto c46N; else goto c46O;
       c46N:
           I64[Sp - 8] = c46X;
           _s3YG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3YG::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
       c46X:
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
       c46O:
           R1 = ()_closure+1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.278026 UTC

[section "data" {
     poly_a_r3Yq_closure:
         const poly_a_r3Yq_info;
 },
 poly_a_r3Yq_entry() //  [R2]
         { info_tbl: [(c46F,
                       label: block_c46F_info
                       rep:StackRep []),
                      (c46P,
                       label: poly_a_r3Yq_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} }),
                      (c46X,
                       label: block_c46X_info
                       rep:StackRep [False])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c46P:
           if ((Sp + -16) < SpLim) goto c46Q; else goto c46R;
       c46Q:
           R2 = R2;
           R1 = poly_a_r3Yq_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c46R:
           I64[Sp - 8] = c46F;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto c46F; else goto c46G;
       c46G:
           call (I64[R1])(R1) returns to c46F, args: 8, res: 8, upd: 8;
       c46F:
           if (R1 & 7 >= 2) goto c46N; else goto c46O;
       c46N:
           I64[Sp - 8] = c46X;
           _s3YG::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s3YG::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) returns to c46X, args: 8, res: 8, upd: 8;
       c46X:
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call poly_a_r3Yq_info(R2) args: 8, res: 0, upd: 8;
       c46O:
           R1 = ()_closure+1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 18:54:13.282635 UTC

[section "data" {
     lvl1_r3Yr_closure:
         const lvl1_r3Yr_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c47d_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,73,110,116,101,114,110,97,108,47,78,111,114,109,97,108,105,122,101,83,116,114,101,97,109,46,104,115,58,40,49,48,50,44,57,41,45,40,49,50,57,44,51,56,41,124,102,117,110,99,116,105,111,110,32,114,101,111,114,100,101,114]
 },
 lvl1_r3Yr_entry() //  [R1]
         { info_tbl: [(c47e,
                       label: lvl1_r3Yr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c47e:
           _r3Yr::P64 = R1;
           goto c478;
       c478:
           if ((old + 0) - <highSp> < SpLim) goto c47f; else goto c47g;
       c47f:
           R1 = _r3Yr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c47g:
           (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Yr::P64);
           if (_c47a::I64 == 0) goto c47c; else goto c47b;
       c47c:
           call (I64[_r3Yr::P64])() args: 8, res: 0, upd: 8;
       c47b:
           I64[(old + 24)] = stg_bh_upd_frame_info;
           I64[(old + 16)] = _c47a::I64;
           R2 = c47d_str;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.284097 UTC

{offset
  c47e:
      _r3Yr::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c47f; else goto c47g;
  c47f:
      R1 = _r3Yr::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c47g:
      (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Yr::P64);
      if (_c47a::I64 == 0) goto c47c; else goto c47b;
  c47c:
      call (I64[_r3Yr::P64])() args: 8, res: 0, upd: 8;
  c47b:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c47a::I64;
      R2 = c47d_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.286285 UTC

{offset
  c47e:
      _r3Yr::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c47f; else goto c47g;
  c47f:
      R1 = _r3Yr::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c47g:
      (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Yr::P64);
      if (_c47a::I64 == 0) goto c47c; else goto c47b;
  c47c:
      call (I64[_r3Yr::P64])() args: 8, res: 0, upd: 8;
  c47b:
      I64[(old + 24)] = stg_bh_upd_frame_info;
      I64[(old + 16)] = _c47a::I64;
      R2 = c47d_str;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.28796 UTC

{offset
  c47e:
      _r3Yr::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c47f; else goto c47g;
  c47f:
      R1 = _r3Yr::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c47g:
      (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, _r3Yr::P64);
      if (_c47a::I64 == 0) goto c47c; else goto c47b;
  c47c:
      call (I64[_r3Yr::P64])() args: 8, res: 0, upd: 8;
  c47b:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c47a::I64;
      R2 = c47d_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.289372 UTC

{offset
  c47e:
      if ((Sp + -16) < SpLim) goto c47f; else goto c47g;
  c47f:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c47g:
      (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                               PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
      if (_c47a::I64 == 0) goto c47c; else goto c47b;
  c47c:
      call (I64[R1])() args: 8, res: 0, upd: 8;
  c47b:
      I64[Sp - 16] = stg_bh_upd_frame_info;
      I64[Sp - 8] = _c47a::I64;
      R2 = c47d_str;
      Sp = Sp - 16;
      call patError_info(R2) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.290408 UTC

[(c47b, {patError_closure}), (c47c, {}),
 (c47e, {patError_closure}), (c47f, {}), (c47g, {patError_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.291331 UTC

lvl1_r3Yr_entry() //  [R1]
        { info_tbl: [(c47e,
                      label: lvl1_r3Yr_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c47e:
          if ((Sp + -16) < SpLim) goto c47f; else goto c47g;
      c47f:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c47g:
          (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c47a::I64 == 0) goto c47c; else goto c47b;
      c47c:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c47b:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c47a::I64;
          R2 = c47d_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.292297 UTC

lvl1_r3Yr_entry() //  [R1]
        { info_tbl: [(c47e,
                      label: lvl1_r3Yr_info
                      rep:HeapRep static { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c47e:
          if ((Sp + -16) < SpLim) goto c47f; else goto c47g;
      c47f:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c47g:
          (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                                   PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
          if (_c47a::I64 == 0) goto c47c; else goto c47b;
      c47c:
          call (I64[R1])() args: 8, res: 0, upd: 8;
      c47b:
          I64[Sp - 16] = stg_bh_upd_frame_info;
          I64[Sp - 8] = _c47a::I64;
          R2 = c47d_str;
          Sp = Sp - 16;
          call patError_info(R2) args: 24, res: 0, upd: 24;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 18:54:13.29349 UTC

[section "data" {
     lvl1_r3Yr_closure:
         const lvl1_r3Yr_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c47d_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,73,110,116,101,114,110,97,108,47,78,111,114,109,97,108,105,122,101,83,116,114,101,97,109,46,104,115,58,40,49,48,50,44,57,41,45,40,49,50,57,44,51,56,41,124,102,117,110,99,116,105,111,110,32,114,101,111,114,100,101,114]
 },
 lvl1_r3Yr_entry() //  [R1]
         { info_tbl: [(c47e,
                       label: lvl1_r3Yr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c47e:
           if ((Sp + -16) < SpLim) goto c47f; else goto c47g;
       c47f:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c47g:
           (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c47a::I64 == 0) goto c47c; else goto c47b;
       c47c:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c47b:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c47a::I64;
           R2 = c47d_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.294642 UTC

[section "data" {
     lvl1_r3Yr_closure:
         const lvl1_r3Yr_info;
         const 0;
         const 0;
         const 0;
 },
 section "readonly" {
     c47d_str:
         I8[] [68,97,116,97,47,85,110,105,99,111,100,101,47,73,110,116,101,114,110,97,108,47,78,111,114,109,97,108,105,122,101,83,116,114,101,97,109,46,104,115,58,40,49,48,50,44,57,41,45,40,49,50,57,44,51,56,41,124,102,117,110,99,116,105,111,110,32,114,101,111,114,100,101,114]
 },
 lvl1_r3Yr_entry() //  [R1]
         { info_tbl: [(c47e,
                       label: lvl1_r3Yr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c47e:
           if ((Sp + -16) < SpLim) goto c47f; else goto c47g;
       c47f:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c47g:
           (_c47a::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c47a::I64 == 0) goto c47c; else goto c47b;
       c47c:
           call (I64[R1])() args: 8, res: 0, upd: 8;
       c47b:
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c47a::I64;
           R2 = c47d_str;
           Sp = Sp - 16;
           call patError_info(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 18:54:13.299 UTC

[section "data" {
     $wnormalize_closure:
         const $wnormalize_info;
         const 0;
 },
 $wnormalize_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 40 updfr_space: Just 8
         }
     {offset
       c47n:
           _r0::P64 = R1;
           _s3YK::P64 = P64[(old + 40)];
           _s3YL::P64 = P64[(old + 32)];
           _s3YM::I64 = I64[(old + 24)];
           _s3YN::I64 = I64[(old + 16)];
           R5 = _s3YN::I64;
           R4 = _s3YM::I64;
           R3 = _s3YL::P64;
           R2 = _s3YK::P64;
           R1 = _r0::P64;
           call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Za_entry() //  [R1]
         { info_tbl: [(c48P,
                       label: sat_s3Za_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c48P:
           _s3Za::P64 = R1;
           goto c48J;
       c48J:
           if ((old + 0) - <highSp> < SpLim) goto c48Q; else goto c48R;
       c48Q:
           R1 = _s3Za::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c48R:
           I64[(old + 24)] = stg_upd_frame_info;
           P64[(old + 16)] = _s3Za::P64;
           _s3Z3::P64 = P64[_s3Za::P64 + 16];
           _s3Z4::I64 = I64[_s3Za::P64 + 24];
           _s3Z8::I64 = _s3Z4::I64;
           if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
       c48N:
           _c48T::I64 = _s3Z8::I64 + 1;
           _s3Z9::I64 = _c48T::I64;
           R2 = _s3Z9::I64;
           R1 = _s3Z3::P64;
           call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
       c48O:
           R1 = []_closure+1;
           call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Z7_entry() //  [R1]
         { info_tbl: [(c490,
                       label: sat_s3Z7_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c490:
           _s3Z7::P64 = R1;
           goto c48X;
       c48X:
           if ((old + 0) - <highSp> < SpLim) goto c491; else goto c492;
       c491:
           R1 = _s3Z7::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c492:
           goto c48W;
       c48W:
           _s3Z2::P64 = P64[_s3Z7::P64 + 7];
           _s3Z4::I64 = I64[_s3Z7::P64 + 15];
           I32[(_s3Z2::P64 + 16) + (_s3Z4::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
           R1 = ()_closure+1;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
     }
 },
 go1_s3Z3_entry() //  [R2, R1]
         { info_tbl: [(c494,
                       label: go1_s3Z3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c494:
           _s3Z4::I64 = R2;
           _s3Z3::P64 = R1;
           goto c48F;
       c48F:
           if ((old + 0) - <highSp> < SpLim) goto c495; else goto c496;
       c496:
           goto c48E;
       c48E:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c498; else goto c497;
       c498:
           HpAlloc = 80;
           goto c495;
       c495:
           R2 = _s3Z4::I64;
           R1 = _s3Z3::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c497:
           _s3Z2::P64 = P64[_s3Z3::P64 + 7];
           I64[Hp - 72] = sat_s3Za_info;
           P64[Hp - 56] = _s3Z3::P64;
           I64[Hp - 48] = _s3Z4::I64;
           _c48H::P64 = Hp - 72;
           I64[Hp - 40] = sat_s3Z7_info;
           P64[Hp - 32] = _s3Z2::P64;
           I64[Hp - 24] = _s3Z4::I64;
           _c48U::P64 = Hp - 39;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = _c48U::P64;
           P64[Hp] = _c48H::P64;
           _c493::P64 = Hp - 14;
           R1 = _c493::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl2_s3Zo_entry() //  [R1]
         { info_tbl: [(c49d,
                       label: lvl2_s3Zo_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c49d:
           _s3Zo::P64 = R1;
           goto c499;
       c499:
           if ((old + 0) - <highSp> < SpLim) goto c49e; else goto c49f;
       c49e:
           R1 = _s3Zo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c49f:
           I64[(old + 24)] = stg_upd_frame_info;
           P64[(old + 16)] = _s3Zo::P64;
           _s3Zn::I64 = I64[_s3Zo::P64 + 16];
           _c49b::I64 = %MO_S_Lt_W64(_s3Zn::I64, 0);
           _s3Zp::I64 = _c49b::I64;
           R1 = I64[Bool_closure_tbl + (_s3Zp::I64 << 3)];
           call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s41h_entry() //  [R1]
         { info_tbl: [(c49g,
                       label: sat_s41h_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c49g:
           _s41h::P64 = R1;
           goto c47A;
       c47A:
           if ((old + 0) - <highSp> < SpLim) goto c49h; else goto c49i;
       c49h:
           R1 = _s41h::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c49i:
           goto c47z;
       c47z:
           _s3YL::P64 = P64[_s41h::P64 + 7];
           _s3YM::I64 = I64[_s41h::P64 + 15];
           _s3YN::I64 = I64[_s41h::P64 + 23];
           _c47C::I64 = _s3YN::I64 + 11;
           _s3YR::I64 = _c47C::I64;
           _c47F::I64 = %MO_S_Lt_W64(_s3YR::I64, 0);
           _s3YS::I64 = _c47F::I64;
           if (_s3YS::I64 >= 1) goto c4dI; else goto c4dJ;
       c4dI:
           goto c4dG;
       c4dG:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4dJ:
           goto c4dF;
       c4dF:
           _c47K::I64 = _s3YR::I64 & 4611686018427387904;
           _s3YU::I64 = _c47K::I64;
           if (_s3YU::I64 != 0) goto c49l; else goto c49p;
       c49l:
           goto c49m;
       c49m:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c49p:
           goto c47P;
       c47P:
           _c47R::I64 = _s3YR::I64 << 1;
           _s3YW::I64 = _c47R::I64;
           I64[(young<c47U> + 8)] = c47U;
           R1 = _s3YW::I64;
           call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
       c47U:
           _s3YZ::P64 = R1;
           Hp = Hp + 80;
           if (Hp > HpLim) goto c49t; else goto c49s;
       c49t:
           HpAlloc = 80;
           goto c49r;
       c49r:
           R1 = _s3YZ::P64;
           call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
       c49s:
           I64[Hp - 72] = stg_ARR_WORDS_info;
           I64[Hp - 64] = 48;
           _s3Z2::P64 = Hp - 72;
           _s3Z2::P64 = _s3Z2::P64;
           _c47W::P64 = Hp - 7;
           I64[Hp - 8] = go1_s3Z3_info;
           P64[Hp] = _s3Z2::P64;
           I64[(young<c47Y> + 8)] = c47Y;
           R2 = 0;
           R1 = _c47W::P64;
           call go1_s3Z3_info(R2,
                              R1) returns to c47Y, args: 8, res: 8, upd: 8;
       c47Y:
           _s3Zb::P64 = R1;
           I64[(young<c482> + 8)] = c482;
           R2 = _s3Zb::P64;
           call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
       c482:
           _s3Ze::P64 = R1;
           _c484::I64 = _s3YM::I64 + _s3YN::I64;
           _s3Zf::I64 = _c484::I64;
           _c4dK::I64 = _s3YR::I64 - 1;
           _s41f::I64 = _c4dK::I64;
           _s3Zl::I64 = 0;
           _s3Zk::I64 = 0;
           _s3Zj::I64 = _s3YM::I64;
           _s3Zi::I64 = _s41f::I64;
           _s3Zh::P64 = _s3YZ::P64;
           goto s3Zg;
       s3Zg:
           goto c489;
       c489:
           Hp = Hp + 24;
           if (Hp > HpLim) goto c49y; else goto c49x;
       c49y:
           HpAlloc = 24;
           goto c49w;
       c49w:
           I64[(young<c48a> + 8)] = c48a;
           call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
       c48a:
           goto c489;
       c49x:
           _c48c::I64 = _s3Zi::I64 * 2;
           _s3Zn::I64 = _c48c::I64;
           I64[Hp - 16] = lvl2_s3Zo_info;
           I64[Hp] = _s3Zn::I64;
           _c48f::P64 = Hp - 16;
           _s400::I64 = _s3Zl::I64;
           _s3ZZ::I64 = _s3Zk::I64;
           _s3ZY::I64 = _s3Zj::I64;
           goto s3ZX;
       s3ZX:
           goto c48p;
       c48p:
           Hp = Hp + 48;
           if (Hp > HpLim) goto c4aQ; else goto c4aP;
       c4aQ:
           HpAlloc = 48;
           goto c4aO;
       c4aO:
           I64[(young<c48q> + 8)] = c48q;
           call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
       c48q:
           goto c48p;
       c4aP:
           _c48s::I64 = _s3ZZ::I64 + 11;
           _s402::I64 = _c48s::I64;
           _c48v::I64 = %MO_S_Lt_W64(_s3Zi::I64, _s402::I64);
           _s403::I64 = _c48v::I64;
           if (_s403::I64 >= 1) goto c4dC; else goto c4dD;
       c4dC:
           goto c4dA;
       c4dA:
           I64[Hp - 40] = I#_con_info;
           I64[Hp - 32] = _s400::I64;
           _c48B::P64 = Hp - 39;
           I64[Hp - 24] = I#_con_info;
           I64[Hp - 16] = _s3ZZ::I64;
           _c48C::P64 = Hp - 23;
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s3ZY::I64;
           _c48D::P64 = Hp - 7;
           _B2::P64 = _c48B::P64;
           _B3::P64 = _c48C::P64;
           _B4::P64 = _c48D::P64;
           goto s3ZW;
       s3ZW:
           goto c4aL;
       c4aL:
           _s3ZO::P64 = _B2::P64;
           _s3ZN::P64 = _B3::P64;
           _s3ZM::P64 = _B4::P64;
           goto s3ZL;
       s3ZL:
           goto c4ap;
       c4ap:
           I64[(young<c4ar> + 8)] = c4ar;
           R1 = _s3ZM::P64;
           if (R1 & 7 != 0) goto c4ar; else goto c4as;
       c4as:
           call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
       c4ar:
           _s3ZQ::P64 = R1;
           _s3ZR::I64 = I64[_s3ZQ::P64 + 7];
           I64[(young<c4aw> + 8)] = c4aw;
           R1 = _s3ZN::P64;
           if (R1 & 7 != 0) goto c4aw; else goto c4ax;
       c4ax:
           call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
       c4aw:
           _s3ZS::P64 = R1;
           _s3ZT::I64 = I64[_s3ZS::P64 + 7];
           I64[(young<c4aB> + 8)] = c4aB;
           R1 = _s3ZO::P64;
           if (R1 & 7 != 0) goto c4aB; else goto c4aF;
       c4aF:
           call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
       c4aB:
           _s3ZU::P64 = R1;
           _s3ZV::I64 = I64[_s3ZU::P64 + 7];
           _s3Zt::I64 = _s3ZV::I64;
           _s3Zs::I64 = _s3ZT::I64;
           _s3Zr::I64 = _s3ZR::I64;
           goto s3Zq;
       s3Zq:
           goto c49z;
       c49z:
           I64[(young<c49C> + 8)] = c49C;
           R1 = _c48f::P64;
           if (R1 & 7 != 0) goto c49C; else goto c49E;
       c49E:
           call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
       c49C:
           _s3Zv::P64 = R1;
           _c4ak::P64 = _s3Zv::P64 & 7;
           if (_c4ak::P64 >= 2) goto c4am; else goto c4an;
       c4am:
           goto c4aj;
       c4aj:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4an:
           goto c4af;
       c4af:
           _c49J::I64 = _s3Zn::I64 & 4611686018427387904;
           _s3Zw::I64 = _c49J::I64;
           if (_s3Zw::I64 != 0) goto c49O; else goto c49U;
       c49O:
           goto c49P;
       c49P:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c49U:
           goto c49V;
       c49V:
           _c49Y::I64 = _s3Zn::I64 << 1;
           _s3Zy::I64 = _c49Y::I64;
           I64[(young<c4a1> + 8)] = c4a1;
           R1 = _s3Zy::I64;
           call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
       c4a1:
           _s3ZB::P64 = R1;
           _c4a4::I64 = %MO_S_Le_W64(_s3Zs::I64, 0);
           _s3ZC::I64 = _c4a4::I64;
           if (_s3ZC::I64 >= 1) goto c4ac; else goto c4ad;
       c4ac:
           goto c4aa;
       c4aa:
           _c4dN::I64 = _s3Zn::I64 - 1;
           _s3ZJ::I64 = _c4dN::I64;
           _s3Zl::I64 = _s3Zt::I64;
           _s3Zk::I64 = _s3Zs::I64;
           _s3Zj::I64 = _s3Zr::I64;
           _s3Zi::I64 = _s3ZJ::I64;
           _s3Zh::P64 = _s3ZB::P64;
           goto s3Zg;
       c4ad:
           goto c4a9;
       c4a9:
           _c4dO::I64 = _s3Zs::I64;
           _s3ZF::I64 = _c4dO::I64;
           _c4dR::I64 = _hs_text_memcpy;
           _c4dS::P64 = _s3ZB::P64 + 16;
           _c4dT::I64 = 0;
           _c4dU::P64 = _s3Zh::P64 + 16;
           _c4dV::I64 = 0;
           _c4dW::I64 = _s3ZF::I64;
           call "ccall" arg hints:  [PtrHint, , PtrHint,
                                     ,]  result hints:  [] (_c4dR::I64)(_c4dS::P64, _c4dT::I64, _c4dU::P64, _c4dV::I64, _c4dW::I64);
           _c4dX::I64 = _s3Zn::I64 - 1;
           _s3ZI::I64 = _c4dX::I64;
           _s3Zl::I64 = _s3Zt::I64;
           _s3Zk::I64 = _s3Zs::I64;
           _s3Zj::I64 = _s3Zr::I64;
           _s3Zi::I64 = _s3ZI::I64;
           _s3Zh::P64 = _s3ZB::P64;
           goto s3Zg;
       c4dD:
           goto c4dw;
       c4dw:
           _c4aR::I64 = %MO_S_Ge_W64(_s3ZY::I64, _s3Zf::I64);
           _s405::I64 = _c4aR::I64;
           if (_s405::I64 >= 1) goto c4dy; else goto c4dz;
       c4dy:
           goto c4du;
       c4du:
           _s415::P64 = _s3Zh::P64;
           _s415::P64 = _s415::P64;
           _s416::I64 = _s3ZZ::I64;
           if (_s416::I64 != 0) goto c4dl; else goto c4do;
       c4dl:
           I64[Hp - 40] = Text_con_info;
           P64[Hp - 32] = _s415::P64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s416::I64;
           _c4dj::P64 = Hp - 39;
           Hp = Hp - 16;
           R1 = _c4dj::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
       c4do:
           Hp = Hp - 48;
           I64[(young<c4dn> + 8)] = c4dn;
           R1 = empty_closure;
           if (R1 & 7 != 0) goto c4dn; else goto c4dp;
       c4dp:
           call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
       c4dn:
           _s418::P64 = R1;
           _s419::P64 = P64[_s418::P64 + 7];
           _s41a::I64 = I64[_s418::P64 + 15];
           _s41b::I64 = I64[_s418::P64 + 23];
           R1 = _s418::P64;
           call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
       c4dz:
           goto c4dc;
       c4dc:
           _c4aW::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
           _s407::I64 = _c4aW::I64;
           _c4cS::I64 = _s407::I64 >= 55296;
           _s40I::I64 = _c4cS::I64;
           if (_s40I::I64 >= 1) goto c4de; else goto c4df;
       c4de:
           goto c4d7;
       c4d7:
           _c4d0::I64 = _s407::I64 <= 56319;
           _s40N::I64 = _c4d0::I64;
           if (_s40N::I64 >= 1) goto c4d9; else goto c4da;
       c4d9:
           goto c4d6;
       c4d6:
           _c4e0::I64 = _s3ZY::I64 + 1;
           _s40S::I64 = _c4e0::I64;
           _c4e3::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s40S::I64 << 1)]);
           _s40T::I64 = _c4e3::I64;
           _c4e6::I64 = _s3ZY::I64 + 2;
           _s412::I64 = _c4e6::I64;
           _c4e9::I64 = _s40T::I64;
           _s40X::I64 = _c4e9::I64;
           _c4ec::I64 = _s40X::I64 - 56320;
           _s40Y::I64 = _c4ec::I64;
           _c4ef::I64 = _s407::I64;
           _s40U::I64 = _c4ef::I64;
           _c4ei::I64 = _s40U::I64 - 55296;
           _s40V::I64 = _c4ei::I64;
           _c4el::I64 = _s40V::I64 << 10;
           _s40W::I64 = _c4el::I64;
           _c4eo::I64 = _s40W::I64 + _s40Y::I64;
           _s40Z::I64 = _c4eo::I64;
           _c4er::I64 = _s40Z::I64 + 65536;
           _s410::I64 = _c4er::I64;
           _c4eu::I64 = _s410::I64;
           _s411::I64 = _c4eu::I64;
           Hp = Hp - 48;
           _s40a::I64 = _s412::I64;
           _s409::I64 = _s411::I64;
           goto s408;
       c4da:
           goto c4d5;
       c4d5:
           _c4ev::I64 = _s3ZY::I64 + 1;
           _s40R::I64 = _c4ev::I64;
           _c4ey::I64 = _s407::I64;
           _s40P::I64 = _c4ey::I64;
           _c4eB::I64 = _s40P::I64;
           _s40Q::I64 = _c4eB::I64;
           Hp = Hp - 48;
           _s40a::I64 = _s40R::I64;
           _s409::I64 = _s40Q::I64;
           goto s408;
       c4df:
           goto c4cX;
       c4cX:
           _c4eC::I64 = _s3ZY::I64 + 1;
           _s40M::I64 = _c4eC::I64;
           _c4eF::I64 = _s407::I64;
           _s40K::I64 = _c4eF::I64;
           _c4eI::I64 = _s40K::I64;
           _s40L::I64 = _c4eI::I64;
           Hp = Hp - 48;
           _s40a::I64 = _s40M::I64;
           _s409::I64 = _s40L::I64;
           goto s408;
       s408:
           goto c4b1;
       c4b1:
           _c4bN::I64 = _s409::I64;
           _s40q::I64 = _c4bN::I64;
           _c4bQ::I64 = %MO_S_Lt_W64(_s40q::I64, 192);
           _s40r::I64 = _c4bQ::I64;
           if (_s40r::I64 >= 1) goto c4cQ; else goto c4cR;
       c4cQ:
           goto c4cO;
       c4cO:
           goto s40c;
       c4cR:
           goto c4cK;
       c4cK:
           _c4bV::I64 = _s409::I64;
           _s40t::I64 = _c4bV::I64;
           _c4bY::I64 = %MO_S_Le_W64(_s40t::I64, 195101);
           _s40u::I64 = _c4bY::I64;
           if (_s40u::I64 >= 1) goto c4cM; else goto c4cN;
       c4cM:
           goto c4cF;
       c4cF:
           _s40w::I64 = _s400::I64;
           if (%MO_S_Lt_W64(_s40w::I64, 1)) goto c4cH; else goto c4cI;
       c4cH:
           if (_s40w::I64 != 0) goto c4c8; else goto c4c9;
       c4c9:
           _c4eJ::I64 = _s3ZZ::I64 + 1;
           _s40y::I64 = _c4eJ::I64;
           _s400::I64 = 1;
           _s3ZZ::I64 = _s40y::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4cI:
           if (_s40w::I64 != 1) goto c4c8; else goto c4cB;
       c4c8:
           R1 = lvl1_r3Yr_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4cB:
           _c4cd::I64 = _s409::I64;
           _s40z::I64 = _c4cd::I64;
           _c4cg::I64 = %MO_S_Lt_W64(_s40z::I64, 768);
           _s40A::I64 = _c4cg::I64;
           if (_s40A::I64 >= 1) goto c4cD; else goto c4cE;
       c4cD:
           goto c4cA;
       c4cA:
           _c4eL::I64 = _s3ZZ::I64 + 1;
           _s40H::I64 = _c4eL::I64;
           _s400::I64 = 0;
           _s3ZZ::I64 = _s40H::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4cE:
           goto c4cw;
       c4cw:
           _c4cl::I64 = _s409::I64;
           _s40C::I64 = _c4cl::I64;
           _c4co::I64 = %MO_S_Gt_W64(_s40C::I64, 125142);
           _s40D::I64 = _c4co::I64;
           if (_s40D::I64 >= 1) goto c4cy; else goto c4cz;
       c4cy:
           goto c4cu;
       c4cu:
           _c4eO::I64 = _s3ZZ::I64 + 1;
           _s40G::I64 = _c4eO::I64;
           _s400::I64 = 0;
           _s3ZZ::I64 = _s40G::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4cz:
           goto c4ct;
       c4ct:
           _c4eP::I64 = _s3ZZ::I64 + 2;
           _s40F::I64 = _c4eP::I64;
           _s400::I64 = 0;
           _s3ZZ::I64 = _s40F::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4cN:
           goto c4c3;
       c4c3:
           goto s40c;
       s40c:
           goto c4b8;
       c4b8:
           _s40e::I64 = _s400::I64;
           if (%MO_S_Lt_W64(_s40e::I64, 1)) goto c4bL; else goto c4bM;
       c4bL:
           if (_s40e::I64 != 0) goto c4bd; else goto c4be;
       c4be:
           _c4eQ::I64 = _s3ZZ::I64 + 1;
           _s40g::I64 = _c4eQ::I64;
           _s400::I64 = 1;
           _s3ZZ::I64 = _s40g::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4bM:
           if (_s40e::I64 != 1) goto c4bd; else goto c4bG;
       c4bd:
           R1 = lvl1_r3Yr_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4bG:
           _c4bi::I64 = _s409::I64;
           _s40h::I64 = _c4bi::I64;
           _c4bl::I64 = %MO_S_Lt_W64(_s40h::I64, 768);
           _s40i::I64 = _c4bl::I64;
           if (_s40i::I64 >= 1) goto c4bI; else goto c4bJ;
       c4bI:
           goto c4bF;
       c4bF:
           _c4eS::I64 = _s3ZZ::I64 + 1;
           _s40p::I64 = _c4eS::I64;
           _s400::I64 = 0;
           _s3ZZ::I64 = _s40p::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4bJ:
           goto c4bB;
       c4bB:
           _c4bq::I64 = _s409::I64;
           _s40k::I64 = _c4bq::I64;
           _c4bt::I64 = %MO_S_Gt_W64(_s40k::I64, 125142);
           _s40l::I64 = _c4bt::I64;
           if (_s40l::I64 >= 1) goto c4bD; else goto c4bE;
       c4bD:
           goto c4bz;
       c4bz:
           _c4eV::I64 = _s3ZZ::I64 + 1;
           _s40o::I64 = _c4eV::I64;
           _s400::I64 = 0;
           _s3ZZ::I64 = _s40o::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
       c4bE:
           goto c4by;
       c4by:
           _c4eW::I64 = _s3ZZ::I64 + 2;
           _s40n::I64 = _c4eW::I64;
           _s400::I64 = 0;
           _s3ZZ::I64 = _s40n::I64;
           _s3ZY::I64 = _s40a::I64;
           goto s3ZX;
     }
 },
 $wnormalize_entry() //  [R5, R4, R3, R2]
         { info_tbl: [(c4f1,
                       label: $wnormalize_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4f1:
           _s3YN::I64 = R5;
           _s3YM::I64 = R4;
           _s3YL::P64 = R3;
           _s3YK::P64 = R2;
           goto c47p;
       c47p:
           if ((old + 0) - <highSp> < SpLim) goto c4f2; else goto c4f3;
       c4f2:
           R1 = $wnormalize_closure;
           P64[(old + 40)] = _s3YK::P64;
           P64[(old + 32)] = _s3YL::P64;
           I64[(old + 24)] = _s3YM::I64;
           I64[(old + 16)] = _s3YN::I64;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c4f3:
           goto c47o;
       c47o:
           I64[(young<c47r> + 8)] = c47r;
           R1 = _s3YK::P64;
           if (R1 & 7 != 0) goto c47r; else goto c47s;
       c47s:
           call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
       c47r:
           _s3YO::P64 = R1;
           _c4f0::P64 = _s3YO::P64 & 7;
           if (_c4f0::P64 != 1) goto c4eY; else goto c4eZ;
       c4eY:
           R1 = lvl_r3LM_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4eZ:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4f8; else goto c4f7;
       c4f8:
           HpAlloc = 32;
           goto c4f6;
       c4f6:
           R1 = _s3YO::P64;
           call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
       c4f7:
           I64[Hp - 24] = sat_s41h_info;
           P64[Hp - 16] = _s3YL::P64;
           I64[Hp - 8] = _s3YM::I64;
           I64[Hp] = _s3YN::I64;
           _c47x::P64 = Hp - 23;
           R2 = _c47x::P64;
           call runSTRep_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.308207 UTC

{offset
  c47n:
      _r0::P64 = R1;
      _s3YK::P64 = P64[(old + 40)];
      _s3YL::P64 = P64[(old + 32)];
      _s3YM::I64 = I64[(old + 24)];
      _s3YN::I64 = I64[(old + 16)];
      R5 = _s3YN::I64;
      R4 = _s3YM::I64;
      R3 = _s3YL::P64;
      R2 = _s3YK::P64;
      R1 = _r0::P64;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.309322 UTC

{offset
  c47n:
      _r0::P64 = R1;
      _s3YK::P64 = P64[(old + 40)];
      _s3YL::P64 = P64[(old + 32)];
      _s3YM::I64 = I64[(old + 24)];
      _s3YN::I64 = I64[(old + 16)];
      R5 = _s3YN::I64;
      R4 = _s3YM::I64;
      R3 = _s3YL::P64;
      R2 = _s3YK::P64;
      R1 = _r0::P64;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.31021 UTC

{offset
  c47n:
      _r0::P64 = R1;
      _s3YK::P64 = P64[Sp];
      _s3YL::P64 = P64[Sp + 8];
      _s3YM::I64 = I64[Sp + 16];
      _s3YN::I64 = I64[Sp + 24];
      R5 = _s3YN::I64;
      R4 = _s3YM::I64;
      R3 = _s3YL::P64;
      R2 = _s3YK::P64;
      R1 = _r0::P64;
      Sp = Sp + 32;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.311356 UTC

{offset
  c47n:
      R5 = I64[Sp + 24];
      R4 = I64[Sp + 16];
      R3 = P64[Sp + 8];
      R2 = P64[Sp];
      R1 = R1;
      Sp = Sp + 32;
      call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.312276 UTC

[(c47n, {$wnormalize_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.313906 UTC

$wnormalize_slow() //  [R1]
        { info_tbl: []
          stack_info: arg_space: 40 updfr_space: Just 8
        }
    {offset
      c47n:
          R5 = I64[Sp + 24];
          R4 = I64[Sp + 16];
          R3 = P64[Sp + 8];
          R2 = P64[Sp];
          R1 = R1;
          Sp = Sp + 32;
          call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.314746 UTC

$wnormalize_slow() //  [R1]
        { info_tbl: []
          stack_info: arg_space: 40 updfr_space: Just 8
        }
    {offset
      c47n:
          R5 = I64[Sp + 24];
          R4 = I64[Sp + 16];
          R3 = P64[Sp + 8];
          R2 = P64[Sp];
          R1 = R1;
          Sp = Sp + 32;
          call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.315886 UTC

{offset
  c48P:
      _s3Za::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c48Q; else goto c48R;
  c48Q:
      R1 = _s3Za::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c48R:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s3Za::P64;
      _s3Z3::P64 = P64[_s3Za::P64 + 16];
      _s3Z4::I64 = I64[_s3Za::P64 + 24];
      _s3Z8::I64 = _s3Z4::I64;
      if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
  c48N:
      _c48T::I64 = _s3Z8::I64 + 1;
      _s3Z9::I64 = _c48T::I64;
      R2 = _s3Z9::I64;
      R1 = _s3Z3::P64;
      call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
  c48O:
      R1 = []_closure+1;
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.317029 UTC

{offset
  c48P:
      _s3Za::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c48Q; else goto c48R;
  c48Q:
      R1 = _s3Za::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c48R:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s3Za::P64;
      _s3Z3::P64 = P64[_s3Za::P64 + 16];
      _s3Z4::I64 = I64[_s3Za::P64 + 24];
      _s3Z8::I64 = _s3Z4::I64;
      if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
  c48N:
      _c48T::I64 = _s3Z8::I64 + 1;
      _s3Z9::I64 = _c48T::I64;
      R2 = _s3Z9::I64;
      R1 = _s3Z3::P64;
      call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
  c48O:
      R1 = []_closure+1;
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.318054 UTC

{offset
  c48P:
      _s3Za::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c48Q; else goto c48R;
  c48Q:
      R1 = _s3Za::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c48R:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = _s3Za::P64;
      _s3Z3::P64 = P64[_s3Za::P64 + 16];
      _s3Z4::I64 = I64[_s3Za::P64 + 24];
      _s3Z8::I64 = _s3Z4::I64;
      if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
  c48N:
      _c48T::I64 = _s3Z8::I64 + 1;
      _s3Z9::I64 = _c48T::I64;
      R2 = _s3Z9::I64;
      R1 = _s3Z3::P64;
      Sp = Sp - 16;
      call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
  c48O:
      R1 = []_closure+1;
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.318965 UTC

{offset
  c48P:
      if ((Sp + -16) < SpLim) goto c48Q; else goto c48R;
  c48Q:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c48R:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = R1;
      _s3Z8::I64 = I64[R1 + 24];
      if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
  c48N:
      R2 = _s3Z8::I64 + 1;
      R1 = P64[R1 + 16];
      Sp = Sp - 16;
      call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
  c48O:
      R1 = []_closure+1;
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.319993 UTC

[(c48N, {go1_s3Z3_closure}), (c48O, {}),
 (c48P, {go1_s3Z3_closure}), (c48Q, {}), (c48R, {go1_s3Z3_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.320827 UTC

sat_s3Za_entry() //  [R1]
        { info_tbl: [(c48P,
                      label: sat_s3Za_info
                      rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c48P:
          if ((Sp + -16) < SpLim) goto c48Q; else goto c48R;
      c48Q:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c48R:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          _s3Z8::I64 = I64[R1 + 24];
          if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
      c48N:
          R2 = _s3Z8::I64 + 1;
          R1 = P64[R1 + 16];
          Sp = Sp - 16;
          call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
      c48O:
          R1 = []_closure+1;
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.321754 UTC

sat_s3Za_entry() //  [R1]
        { info_tbl: [(c48P,
                      label: sat_s3Za_info
                      rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c48P:
          if ((Sp + -16) < SpLim) goto c48Q; else goto c48R;
      c48Q:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c48R:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          _s3Z8::I64 = I64[R1 + 24];
          if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
      c48N:
          R2 = _s3Z8::I64 + 1;
          R1 = P64[R1 + 16];
          Sp = Sp - 16;
          call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
      c48O:
          R1 = []_closure+1;
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.32277 UTC

{offset
  c490:
      _s3Z7::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c491; else goto c492;
  c491:
      R1 = _s3Z7::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c492:
      _s3Z2::P64 = P64[_s3Z7::P64 + 7];
      _s3Z4::I64 = I64[_s3Z7::P64 + 15];
      I32[(_s3Z2::P64 + 16) + (_s3Z4::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.323662 UTC

{offset
  c490:
      _s3Z7::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c491; else goto c492;
  c491:
      R1 = _s3Z7::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c492:
      _s3Z2::P64 = P64[_s3Z7::P64 + 7];
      _s3Z4::I64 = I64[_s3Z7::P64 + 15];
      I32[(_s3Z2::P64 + 16) + (_s3Z4::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
      R1 = ()_closure+1;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.32489 UTC

{offset
  c490:
      _s3Z7::P64 = R1;
      goto c492;
  c492:
      _s3Z2::P64 = P64[_s3Z7::P64 + 7];
      _s3Z4::I64 = I64[_s3Z7::P64 + 15];
      I32[(_s3Z2::P64 + 16) + (_s3Z4::I64 << 2)] = %MO_UU_Conv_W64_W32(0);
      R1 = ()_closure+1;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.325775 UTC

{offset
  c490:
      goto c492;
  c492:
      I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
      R1 = ()_closure+1;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.326627 UTC

[(c490, {}), (c492, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.327343 UTC

sat_s3Z7_entry() //  [R1]
        { info_tbl: [(c490,
                      label: sat_s3Z7_info
                      rep:HeapRep 1 ptrs 1 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c490:
          goto c492;
      c492:
          I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
          R1 = ()_closure+1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.328321 UTC

sat_s3Z7_entry() //  [R1]
        { info_tbl: [(c490,
                      label: sat_s3Z7_info
                      rep:HeapRep 1 ptrs 1 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c490:
          I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
          R1 = ()_closure+1;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.329295 UTC

{offset
  c494:
      _s3Z4::I64 = R2;
      _s3Z3::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c495; else goto c496;
  c496:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c498; else goto c497;
  c498:
      HpAlloc = 80;
      goto c495;
  c495:
      R2 = _s3Z4::I64;
      R1 = _s3Z3::P64;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c497:
      _s3Z2::P64 = P64[_s3Z3::P64 + 7];
      I64[Hp - 72] = sat_s3Za_info;
      P64[Hp - 56] = _s3Z3::P64;
      I64[Hp - 48] = _s3Z4::I64;
      _c48H::P64 = Hp - 72;
      I64[Hp - 40] = sat_s3Z7_info;
      P64[Hp - 32] = _s3Z2::P64;
      I64[Hp - 24] = _s3Z4::I64;
      _c48U::P64 = Hp - 39;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = _c48U::P64;
      P64[Hp] = _c48H::P64;
      _c493::P64 = Hp - 14;
      R1 = _c493::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.330266 UTC

{offset
  c494:
      _s3Z4::I64 = R2;
      _s3Z3::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c495; else goto c496;
  c496:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c498; else goto c497;
  c498:
      HpAlloc = 80;
      goto c495;
  c495:
      R2 = _s3Z4::I64;
      R1 = _s3Z3::P64;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c497:
      _s3Z2::P64 = P64[_s3Z3::P64 + 7];
      I64[Hp - 72] = sat_s3Za_info;
      P64[Hp - 56] = _s3Z3::P64;
      I64[Hp - 48] = _s3Z4::I64;
      _c48H::P64 = Hp - 72;
      I64[Hp - 40] = sat_s3Z7_info;
      P64[Hp - 32] = _s3Z2::P64;
      I64[Hp - 24] = _s3Z4::I64;
      _c48U::P64 = Hp - 39;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = _c48U::P64;
      P64[Hp] = _c48H::P64;
      _c493::P64 = Hp - 14;
      R1 = _c493::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.331271 UTC

{offset
  c494:
      _s3Z4::I64 = R2;
      _s3Z3::P64 = R1;
      goto c496;
  c496:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c498; else goto c497;
  c498:
      HpAlloc = 80;
      goto c495;
  c495:
      R2 = _s3Z4::I64;
      R1 = _s3Z3::P64;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c497:
      _s3Z2::P64 = P64[_s3Z3::P64 + 7];
      I64[Hp - 72] = sat_s3Za_info;
      P64[Hp - 56] = _s3Z3::P64;
      I64[Hp - 48] = _s3Z4::I64;
      _c48H::P64 = Hp - 72;
      I64[Hp - 40] = sat_s3Z7_info;
      P64[Hp - 32] = _s3Z2::P64;
      I64[Hp - 24] = _s3Z4::I64;
      _c48U::P64 = Hp - 39;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = _c48U::P64;
      P64[Hp] = _c48H::P64;
      _c493::P64 = Hp - 14;
      R1 = _c493::P64;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.332466 UTC

{offset
  c494:
      goto c496;
  c496:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c498; else goto c497;
  c498:
      HpAlloc = 80;
      goto c495;
  c495:
      R2 = R2;
      R1 = R1;
      call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
  c497:
      _s3Z2::P64 = P64[R1 + 7];
      I64[Hp - 72] = sat_s3Za_info;
      P64[Hp - 56] = R1;
      I64[Hp - 48] = R2;
      I64[Hp - 40] = sat_s3Z7_info;
      P64[Hp - 32] = _s3Z2::P64;
      I64[Hp - 24] = R2;
      I64[Hp - 16] = :_con_info;
      P64[Hp - 8] = Hp - 39;
      P64[Hp] = Hp - 72;
      R1 = Hp - 14;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.333509 UTC

[(c494, {sat_s3Z7_closure, sat_s3Za_closure}), (c495, {}),
 (c496, {sat_s3Z7_closure, sat_s3Za_closure}),
 (c497, {sat_s3Z7_closure, sat_s3Za_closure}), (c498, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.334803 UTC

go1_s3Z3_entry() //  [R2, R1]
        { info_tbl: [(c494,
                      label: go1_s3Z3_info
                      rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c494:
          goto c496;
      c496:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c498; else goto c497;
      c498:
          HpAlloc = 80;
          goto c495;
      c495:
          R2 = R2;
          R1 = R1;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c497:
          _s3Z2::P64 = P64[R1 + 7];
          I64[Hp - 72] = sat_s3Za_info;
          P64[Hp - 56] = R1;
          I64[Hp - 48] = R2;
          I64[Hp - 40] = sat_s3Z7_info;
          P64[Hp - 32] = _s3Z2::P64;
          I64[Hp - 24] = R2;
          I64[Hp - 16] = :_con_info;
          P64[Hp - 8] = Hp - 39;
          P64[Hp] = Hp - 72;
          R1 = Hp - 14;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.335768 UTC

go1_s3Z3_entry() //  [R2, R1]
        { info_tbl: [(c494,
                      label: go1_s3Z3_info
                      rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c494:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c498; else goto c497;
      c498:
          HpAlloc = 80;
          R2 = R2;
          R1 = R1;
          call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
      c497:
          _s3Z2::P64 = P64[R1 + 7];
          I64[Hp - 72] = sat_s3Za_info;
          P64[Hp - 56] = R1;
          I64[Hp - 48] = R2;
          I64[Hp - 40] = sat_s3Z7_info;
          P64[Hp - 32] = _s3Z2::P64;
          I64[Hp - 24] = R2;
          I64[Hp - 16] = :_con_info;
          P64[Hp - 8] = Hp - 39;
          P64[Hp] = Hp - 72;
          R1 = Hp - 14;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.336773 UTC

{offset
  c49d:
      _s3Zo::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c49e; else goto c49f;
  c49e:
      R1 = _s3Zo::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c49f:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s3Zo::P64;
      _s3Zn::I64 = I64[_s3Zo::P64 + 16];
      _c49b::I64 = %MO_S_Lt_W64(_s3Zn::I64, 0);
      _s3Zp::I64 = _c49b::I64;
      R1 = I64[Bool_closure_tbl + (_s3Zp::I64 << 3)];
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.337664 UTC

{offset
  c49d:
      _s3Zo::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c49e; else goto c49f;
  c49e:
      R1 = _s3Zo::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c49f:
      I64[(old + 24)] = stg_upd_frame_info;
      P64[(old + 16)] = _s3Zo::P64;
      _s3Zn::I64 = I64[_s3Zo::P64 + 16];
      _c49b::I64 = %MO_S_Lt_W64(_s3Zn::I64, 0);
      _s3Zp::I64 = _c49b::I64;
      R1 = I64[Bool_closure_tbl + (_s3Zp::I64 << 3)];
      call (P64[(old + 24)])(R1) args: 24, res: 0, upd: 24;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.338585 UTC

{offset
  c49d:
      _s3Zo::P64 = R1;
      if ((Sp + 8) - 24 < SpLim) goto c49e; else goto c49f;
  c49e:
      R1 = _s3Zo::P64;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c49f:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = _s3Zo::P64;
      _s3Zn::I64 = I64[_s3Zo::P64 + 16];
      _c49b::I64 = %MO_S_Lt_W64(_s3Zn::I64, 0);
      _s3Zp::I64 = _c49b::I64;
      R1 = I64[Bool_closure_tbl + (_s3Zp::I64 << 3)];
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.339585 UTC

{offset
  c49d:
      if ((Sp + -16) < SpLim) goto c49e; else goto c49f;
  c49e:
      R1 = R1;
      call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
  c49f:
      I64[Sp - 16] = stg_upd_frame_info;
      P64[Sp - 8] = R1;
      R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
      Sp = Sp - 16;
      call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.340667 UTC

[(c49d, {}), (c49e, {}), (c49f, {})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.341462 UTC

lvl2_s3Zo_entry() //  [R1]
        { info_tbl: [(c49d,
                      label: lvl2_s3Zo_info
                      rep:HeapRep 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c49d:
          if ((Sp + -16) < SpLim) goto c49e; else goto c49f;
      c49e:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c49f:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.342377 UTC

lvl2_s3Zo_entry() //  [R1]
        { info_tbl: [(c49d,
                      label: lvl2_s3Zo_info
                      rep:HeapRep 1 nonptrs { Thunk })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c49d:
          if ((Sp + -16) < SpLim) goto c49e; else goto c49f;
      c49e:
          R1 = R1;
          call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
      c49f:
          I64[Sp - 16] = stg_upd_frame_info;
          P64[Sp - 8] = R1;
          R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
          Sp = Sp - 16;
          call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.343273 UTC

{offset
  c49g:
      _s41h::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c49h; else goto c49i;
  c49h:
      R1 = _s41h::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c49i:
      _s3YL::P64 = P64[_s41h::P64 + 7];
      _s3YM::I64 = I64[_s41h::P64 + 15];
      _s3YN::I64 = I64[_s41h::P64 + 23];
      _c47C::I64 = _s3YN::I64 + 11;
      _s3YR::I64 = _c47C::I64;
      _c47F::I64 = %MO_S_Lt_W64(_s3YR::I64, 0);
      _s3YS::I64 = _c47F::I64;
      if (_s3YS::I64 >= 1) goto c4dI; else goto c4dJ;
  c4dI:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4dJ:
      _c47K::I64 = _s3YR::I64 & 4611686018427387904;
      _s3YU::I64 = _c47K::I64;
      if (_s3YU::I64 != 0) goto c49l; else goto c49p;
  c49l:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c49p:
      _c47R::I64 = _s3YR::I64 << 1;
      _s3YW::I64 = _c47R::I64;
      I64[(young<c47U> + 8)] = c47U;
      R1 = _s3YW::I64;
      call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c47U:
      _s3YZ::P64 = R1;
      Hp = Hp + 80;
      if (Hp > HpLim) goto c49t; else goto c49s;
  c49t:
      HpAlloc = 80;
      R1 = _s3YZ::P64;
      call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c49s:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      _s3Z2::P64 = Hp - 72;
      _s3Z2::P64 = _s3Z2::P64;
      _c47W::P64 = Hp - 7;
      I64[Hp - 8] = go1_s3Z3_info;
      P64[Hp] = _s3Z2::P64;
      I64[(young<c47Y> + 8)] = c47Y;
      R2 = 0;
      R1 = _c47W::P64;
      call go1_s3Z3_info(R2,
                         R1) returns to c47Y, args: 8, res: 8, upd: 8;
  c47Y:
      _s3Zb::P64 = R1;
      I64[(young<c482> + 8)] = c482;
      R2 = _s3Zb::P64;
      call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
  c482:
      _s3Ze::P64 = R1;
      _c484::I64 = _s3YM::I64 + _s3YN::I64;
      _s3Zf::I64 = _c484::I64;
      _c4dK::I64 = _s3YR::I64 - 1;
      _s41f::I64 = _c4dK::I64;
      _s3Zl::I64 = 0;
      _s3Zk::I64 = 0;
      _s3Zj::I64 = _s3YM::I64;
      _s3Zi::I64 = _s41f::I64;
      _s3Zh::P64 = _s3YZ::P64;
      goto c489;
  c489:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c49y; else goto c49x;
  c49y:
      HpAlloc = 24;
      I64[(young<c48a> + 8)] = c48a;
      call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
  c48a:
      goto c489;
  c49x:
      _c48c::I64 = _s3Zi::I64 * 2;
      _s3Zn::I64 = _c48c::I64;
      I64[Hp - 16] = lvl2_s3Zo_info;
      I64[Hp] = _s3Zn::I64;
      _c48f::P64 = Hp - 16;
      _s400::I64 = _s3Zl::I64;
      _s3ZZ::I64 = _s3Zk::I64;
      _s3ZY::I64 = _s3Zj::I64;
      goto c48p;
  c48p:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4aQ; else goto c4aP;
  c4aQ:
      HpAlloc = 48;
      I64[(young<c48q> + 8)] = c48q;
      call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
  c48q:
      goto c48p;
  c4aP:
      _c48s::I64 = _s3ZZ::I64 + 11;
      _s402::I64 = _c48s::I64;
      _c48v::I64 = %MO_S_Lt_W64(_s3Zi::I64, _s402::I64);
      _s403::I64 = _c48v::I64;
      if (_s403::I64 >= 1) goto c4dC; else goto c4dD;
  c4dC:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s400::I64;
      _c48B::P64 = Hp - 39;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s3ZZ::I64;
      _c48C::P64 = Hp - 23;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s3ZY::I64;
      _c48D::P64 = Hp - 7;
      _B2::P64 = _c48B::P64;
      _B3::P64 = _c48C::P64;
      _B4::P64 = _c48D::P64;
      _s3ZO::P64 = _B2::P64;
      _s3ZN::P64 = _B3::P64;
      _s3ZM::P64 = _B4::P64;
      I64[(young<c4ar> + 8)] = c4ar;
      R1 = _s3ZM::P64;
      if (R1 & 7 != 0) goto c4ar; else goto c4as;
  c4as:
      call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
  c4ar:
      _s3ZQ::P64 = R1;
      _s3ZR::I64 = I64[_s3ZQ::P64 + 7];
      I64[(young<c4aw> + 8)] = c4aw;
      R1 = _s3ZN::P64;
      if (R1 & 7 != 0) goto c4aw; else goto c4ax;
  c4ax:
      call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
  c4aw:
      _s3ZS::P64 = R1;
      _s3ZT::I64 = I64[_s3ZS::P64 + 7];
      I64[(young<c4aB> + 8)] = c4aB;
      R1 = _s3ZO::P64;
      if (R1 & 7 != 0) goto c4aB; else goto c4aF;
  c4aF:
      call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
  c4aB:
      _s3ZU::P64 = R1;
      _s3ZV::I64 = I64[_s3ZU::P64 + 7];
      _s3Zt::I64 = _s3ZV::I64;
      _s3Zs::I64 = _s3ZT::I64;
      _s3Zr::I64 = _s3ZR::I64;
      I64[(young<c49C> + 8)] = c49C;
      R1 = _c48f::P64;
      if (R1 & 7 != 0) goto c49C; else goto c49E;
  c49E:
      call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
  c49C:
      _s3Zv::P64 = R1;
      _c4ak::P64 = _s3Zv::P64 & 7;
      if (_c4ak::P64 >= 2) goto c4am; else goto c4an;
  c4am:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4an:
      _c49J::I64 = _s3Zn::I64 & 4611686018427387904;
      _s3Zw::I64 = _c49J::I64;
      if (_s3Zw::I64 != 0) goto c49O; else goto c49U;
  c49O:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c49U:
      _c49Y::I64 = _s3Zn::I64 << 1;
      _s3Zy::I64 = _c49Y::I64;
      I64[(young<c4a1> + 8)] = c4a1;
      R1 = _s3Zy::I64;
      call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
  c4a1:
      _s3ZB::P64 = R1;
      _c4a4::I64 = %MO_S_Le_W64(_s3Zs::I64, 0);
      _s3ZC::I64 = _c4a4::I64;
      if (_s3ZC::I64 >= 1) goto c4ac; else goto c4ad;
  c4ac:
      _c4dN::I64 = _s3Zn::I64 - 1;
      _s3ZJ::I64 = _c4dN::I64;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3ZJ::I64;
      _s3Zh::P64 = _s3ZB::P64;
      goto c489;
  c4ad:
      _c4dO::I64 = _s3Zs::I64;
      _s3ZF::I64 = _c4dO::I64;
      _c4dR::I64 = _hs_text_memcpy;
      _c4dS::P64 = _s3ZB::P64 + 16;
      _c4dT::I64 = 0;
      _c4dU::P64 = _s3Zh::P64 + 16;
      _c4dV::I64 = 0;
      _c4dW::I64 = _s3ZF::I64;
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] (_c4dR::I64)(_c4dS::P64, _c4dT::I64, _c4dU::P64, _c4dV::I64, _c4dW::I64);
      _c4dX::I64 = _s3Zn::I64 - 1;
      _s3ZI::I64 = _c4dX::I64;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3ZI::I64;
      _s3Zh::P64 = _s3ZB::P64;
      goto c489;
  c4dD:
      _c4aR::I64 = %MO_S_Ge_W64(_s3ZY::I64, _s3Zf::I64);
      _s405::I64 = _c4aR::I64;
      if (_s405::I64 >= 1) goto c4dy; else goto c4dz;
  c4dy:
      _s415::P64 = _s3Zh::P64;
      _s415::P64 = _s415::P64;
      _s416::I64 = _s3ZZ::I64;
      if (_s416::I64 != 0) goto c4dl; else goto c4do;
  c4dl:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s415::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s416::I64;
      _c4dj::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4dj::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4do:
      Hp = Hp - 48;
      I64[(young<c4dn> + 8)] = c4dn;
      R1 = empty_closure;
      if (R1 & 7 != 0) goto c4dn; else goto c4dp;
  c4dp:
      call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
  c4dn:
      _s418::P64 = R1;
      _s419::P64 = P64[_s418::P64 + 7];
      _s41a::I64 = I64[_s418::P64 + 15];
      _s41b::I64 = I64[_s418::P64 + 23];
      R1 = _s418::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4dz:
      _c4aW::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
      _s407::I64 = _c4aW::I64;
      _c4cS::I64 = _s407::I64 >= 55296;
      _s40I::I64 = _c4cS::I64;
      if (_s40I::I64 >= 1) goto c4de; else goto c4df;
  c4de:
      _c4d0::I64 = _s407::I64 <= 56319;
      _s40N::I64 = _c4d0::I64;
      if (_s40N::I64 >= 1) goto c4d9; else goto c4da;
  c4d9:
      _c4e0::I64 = _s3ZY::I64 + 1;
      _s40S::I64 = _c4e0::I64;
      _c4e3::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s40S::I64 << 1)]);
      _s40T::I64 = _c4e3::I64;
      _c4e6::I64 = _s3ZY::I64 + 2;
      _s412::I64 = _c4e6::I64;
      _c4e9::I64 = _s40T::I64;
      _s40X::I64 = _c4e9::I64;
      _c4ec::I64 = _s40X::I64 - 56320;
      _s40Y::I64 = _c4ec::I64;
      _c4ef::I64 = _s407::I64;
      _s40U::I64 = _c4ef::I64;
      _c4ei::I64 = _s40U::I64 - 55296;
      _s40V::I64 = _c4ei::I64;
      _c4el::I64 = _s40V::I64 << 10;
      _s40W::I64 = _c4el::I64;
      _c4eo::I64 = _s40W::I64 + _s40Y::I64;
      _s40Z::I64 = _c4eo::I64;
      _c4er::I64 = _s40Z::I64 + 65536;
      _s410::I64 = _c4er::I64;
      _c4eu::I64 = _s410::I64;
      _s411::I64 = _c4eu::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s412::I64;
      _s409::I64 = _s411::I64;
      goto s408;
  c4da:
      _c4ev::I64 = _s3ZY::I64 + 1;
      _s40R::I64 = _c4ev::I64;
      _c4ey::I64 = _s407::I64;
      _s40P::I64 = _c4ey::I64;
      _c4eB::I64 = _s40P::I64;
      _s40Q::I64 = _c4eB::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s40R::I64;
      _s409::I64 = _s40Q::I64;
      goto s408;
  c4df:
      _c4eC::I64 = _s3ZY::I64 + 1;
      _s40M::I64 = _c4eC::I64;
      _c4eF::I64 = _s407::I64;
      _s40K::I64 = _c4eF::I64;
      _c4eI::I64 = _s40K::I64;
      _s40L::I64 = _c4eI::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s40M::I64;
      _s409::I64 = _s40L::I64;
      goto s408;
  s408:
      _c4bN::I64 = _s409::I64;
      _s40q::I64 = _c4bN::I64;
      _c4bQ::I64 = %MO_S_Lt_W64(_s40q::I64, 192);
      _s40r::I64 = _c4bQ::I64;
      if (_s40r::I64 >= 1) goto s40c; else goto c4cR;
  c4cR:
      _c4bV::I64 = _s409::I64;
      _s40t::I64 = _c4bV::I64;
      _c4bY::I64 = %MO_S_Le_W64(_s40t::I64, 195101);
      _s40u::I64 = _c4bY::I64;
      if (_s40u::I64 < 1) goto s40c; else goto c4cM;
  s40c:
      _s40e::I64 = _s400::I64;
      if (%MO_S_Lt_W64(_s40e::I64, 1)) goto c4bL; else goto c4bM;
  c4bL:
      if (_s40e::I64 != 0) goto c4bd; else goto c4be;
  c4be:
      _c4eQ::I64 = _s3ZZ::I64 + 1;
      _s40g::I64 = _c4eQ::I64;
      _s400::I64 = 1;
      _s3ZZ::I64 = _s40g::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bM:
      if (_s40e::I64 != 1) goto c4bd; else goto c4bG;
  c4bd:
      R1 = lvl1_r3Yr_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4bG:
      _c4bi::I64 = _s409::I64;
      _s40h::I64 = _c4bi::I64;
      _c4bl::I64 = %MO_S_Lt_W64(_s40h::I64, 768);
      _s40i::I64 = _c4bl::I64;
      if (_s40i::I64 >= 1) goto c4bI; else goto c4bJ;
  c4bI:
      _c4eS::I64 = _s3ZZ::I64 + 1;
      _s40p::I64 = _c4eS::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40p::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bJ:
      _c4bq::I64 = _s409::I64;
      _s40k::I64 = _c4bq::I64;
      _c4bt::I64 = %MO_S_Gt_W64(_s40k::I64, 125142);
      _s40l::I64 = _c4bt::I64;
      if (_s40l::I64 >= 1) goto c4bD; else goto c4bE;
  c4bD:
      _c4eV::I64 = _s3ZZ::I64 + 1;
      _s40o::I64 = _c4eV::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40o::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bE:
      _c4eW::I64 = _s3ZZ::I64 + 2;
      _s40n::I64 = _c4eW::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40n::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cM:
      _s40w::I64 = _s400::I64;
      if (%MO_S_Lt_W64(_s40w::I64, 1)) goto c4cH; else goto c4cI;
  c4cH:
      if (_s40w::I64 != 0) goto c4c8; else goto c4c9;
  c4c9:
      _c4eJ::I64 = _s3ZZ::I64 + 1;
      _s40y::I64 = _c4eJ::I64;
      _s400::I64 = 1;
      _s3ZZ::I64 = _s40y::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cI:
      if (_s40w::I64 != 1) goto c4c8; else goto c4cB;
  c4c8:
      R1 = lvl1_r3Yr_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4cB:
      _c4cd::I64 = _s409::I64;
      _s40z::I64 = _c4cd::I64;
      _c4cg::I64 = %MO_S_Lt_W64(_s40z::I64, 768);
      _s40A::I64 = _c4cg::I64;
      if (_s40A::I64 >= 1) goto c4cD; else goto c4cE;
  c4cD:
      _c4eL::I64 = _s3ZZ::I64 + 1;
      _s40H::I64 = _c4eL::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40H::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cE:
      _c4cl::I64 = _s409::I64;
      _s40C::I64 = _c4cl::I64;
      _c4co::I64 = %MO_S_Gt_W64(_s40C::I64, 125142);
      _s40D::I64 = _c4co::I64;
      if (_s40D::I64 >= 1) goto c4cy; else goto c4cz;
  c4cy:
      _c4eO::I64 = _s3ZZ::I64 + 1;
      _s40G::I64 = _c4eO::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40G::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cz:
      _c4eP::I64 = _s3ZZ::I64 + 2;
      _s40F::I64 = _c4eP::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40F::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.347482 UTC

{offset
  c49g:
      _s41h::P64 = R1;
      if ((old + 0) - <highSp> < SpLim) goto c49h; else goto c49i;
  c49h:
      R1 = _s41h::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c49i:
      _s3YL::P64 = P64[_s41h::P64 + 7];
      _s3YM::I64 = I64[_s41h::P64 + 15];
      _s3YN::I64 = I64[_s41h::P64 + 23];
      _c47C::I64 = _s3YN::I64 + 11;
      _s3YR::I64 = _c47C::I64;
      _c47F::I64 = %MO_S_Lt_W64(_s3YR::I64, 0);
      _s3YS::I64 = _c47F::I64;
      if (_s3YS::I64 >= 1) goto c4dI; else goto c4dJ;
  c4dJ:
      _c47K::I64 = _s3YR::I64 & 4611686018427387904;
      _s3YU::I64 = _c47K::I64;
      if (_s3YU::I64 != 0) goto c4dI; else goto c49p;
  c49p:
      _c47R::I64 = _s3YR::I64 << 1;
      _s3YW::I64 = _c47R::I64;
      I64[(young<c47U> + 8)] = c47U;
      R1 = _s3YW::I64;
      call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c47U:
      _s3YZ::P64 = R1;
      Hp = Hp + 80;
      if (Hp > HpLim) goto c49t; else goto c49s;
  c49t:
      HpAlloc = 80;
      R1 = _s3YZ::P64;
      call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c49s:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      _s3Z2::P64 = Hp - 72;
      _s3Z2::P64 = _s3Z2::P64;
      _c47W::P64 = Hp - 7;
      I64[Hp - 8] = go1_s3Z3_info;
      P64[Hp] = _s3Z2::P64;
      I64[(young<c47Y> + 8)] = c47Y;
      R2 = 0;
      R1 = _c47W::P64;
      call go1_s3Z3_info(R2,
                         R1) returns to c47Y, args: 8, res: 8, upd: 8;
  c47Y:
      _s3Zb::P64 = R1;
      I64[(young<c482> + 8)] = c482;
      R2 = _s3Zb::P64;
      call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
  c482:
      _s3Ze::P64 = R1;
      _c484::I64 = _s3YM::I64 + _s3YN::I64;
      _s3Zf::I64 = _c484::I64;
      _c4dK::I64 = _s3YR::I64 - 1;
      _s41f::I64 = _c4dK::I64;
      _s3Zl::I64 = 0;
      _s3Zk::I64 = 0;
      _s3Zj::I64 = _s3YM::I64;
      _s3Zi::I64 = _s41f::I64;
      _s3Zh::P64 = _s3YZ::P64;
      goto c489;
  c489:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c49y; else goto c49x;
  c49y:
      HpAlloc = 24;
      I64[(young<c48a> + 8)] = c48a;
      call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
  c48a:
      goto c489;
  c49x:
      _c48c::I64 = _s3Zi::I64 * 2;
      _s3Zn::I64 = _c48c::I64;
      I64[Hp - 16] = lvl2_s3Zo_info;
      I64[Hp] = _s3Zn::I64;
      _c48f::P64 = Hp - 16;
      _s400::I64 = _s3Zl::I64;
      _s3ZZ::I64 = _s3Zk::I64;
      _s3ZY::I64 = _s3Zj::I64;
      goto c48p;
  c48p:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4aQ; else goto c4aP;
  c4aQ:
      HpAlloc = 48;
      I64[(young<c48q> + 8)] = c48q;
      call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
  c48q:
      goto c48p;
  c4aP:
      _c48s::I64 = _s3ZZ::I64 + 11;
      _s402::I64 = _c48s::I64;
      _c48v::I64 = %MO_S_Lt_W64(_s3Zi::I64, _s402::I64);
      _s403::I64 = _c48v::I64;
      if (_s403::I64 >= 1) goto c4dC; else goto c4dD;
  c4dC:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s400::I64;
      _c48B::P64 = Hp - 39;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s3ZZ::I64;
      _c48C::P64 = Hp - 23;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s3ZY::I64;
      _c48D::P64 = Hp - 7;
      _B2::P64 = _c48B::P64;
      _B3::P64 = _c48C::P64;
      _B4::P64 = _c48D::P64;
      _s3ZO::P64 = _B2::P64;
      _s3ZN::P64 = _B3::P64;
      _s3ZM::P64 = _B4::P64;
      I64[(young<c4ar> + 8)] = c4ar;
      R1 = _s3ZM::P64;
      if (R1 & 7 != 0) goto c4ar; else goto c4as;
  c4as:
      call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
  c4ar:
      _s3ZQ::P64 = R1;
      _s3ZR::I64 = I64[_s3ZQ::P64 + 7];
      I64[(young<c4aw> + 8)] = c4aw;
      R1 = _s3ZN::P64;
      if (R1 & 7 != 0) goto c4aw; else goto c4ax;
  c4ax:
      call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
  c4aw:
      _s3ZS::P64 = R1;
      _s3ZT::I64 = I64[_s3ZS::P64 + 7];
      I64[(young<c4aB> + 8)] = c4aB;
      R1 = _s3ZO::P64;
      if (R1 & 7 != 0) goto c4aB; else goto c4aF;
  c4aF:
      call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
  c4aB:
      _s3ZU::P64 = R1;
      _s3ZV::I64 = I64[_s3ZU::P64 + 7];
      _s3Zt::I64 = _s3ZV::I64;
      _s3Zs::I64 = _s3ZT::I64;
      _s3Zr::I64 = _s3ZR::I64;
      I64[(young<c49C> + 8)] = c49C;
      R1 = _c48f::P64;
      if (R1 & 7 != 0) goto c49C; else goto c49E;
  c49E:
      call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
  c49C:
      _s3Zv::P64 = R1;
      _c4ak::P64 = _s3Zv::P64 & 7;
      if (_c4ak::P64 >= 2) goto c4dI; else goto c4an;
  c4an:
      _c49J::I64 = _s3Zn::I64 & 4611686018427387904;
      _s3Zw::I64 = _c49J::I64;
      if (_s3Zw::I64 != 0) goto c4dI; else goto c49U;
  c4dI:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c49U:
      _c49Y::I64 = _s3Zn::I64 << 1;
      _s3Zy::I64 = _c49Y::I64;
      I64[(young<c4a1> + 8)] = c4a1;
      R1 = _s3Zy::I64;
      call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
  c4a1:
      _s3ZB::P64 = R1;
      _c4a4::I64 = %MO_S_Le_W64(_s3Zs::I64, 0);
      _s3ZC::I64 = _c4a4::I64;
      if (_s3ZC::I64 >= 1) goto c4ac; else goto c4ad;
  c4ac:
      _c4dN::I64 = _s3Zn::I64 - 1;
      _s3ZJ::I64 = _c4dN::I64;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3ZJ::I64;
      _s3Zh::P64 = _s3ZB::P64;
      goto c489;
  c4ad:
      _c4dO::I64 = _s3Zs::I64;
      _s3ZF::I64 = _c4dO::I64;
      _c4dR::I64 = _hs_text_memcpy;
      _c4dS::P64 = _s3ZB::P64 + 16;
      _c4dT::I64 = 0;
      _c4dU::P64 = _s3Zh::P64 + 16;
      _c4dV::I64 = 0;
      _c4dW::I64 = _s3ZF::I64;
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] (_c4dR::I64)(_c4dS::P64, _c4dT::I64, _c4dU::P64, _c4dV::I64, _c4dW::I64);
      _c4dX::I64 = _s3Zn::I64 - 1;
      _s3ZI::I64 = _c4dX::I64;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3ZI::I64;
      _s3Zh::P64 = _s3ZB::P64;
      goto c489;
  c4dD:
      _c4aR::I64 = %MO_S_Ge_W64(_s3ZY::I64, _s3Zf::I64);
      _s405::I64 = _c4aR::I64;
      if (_s405::I64 >= 1) goto c4dy; else goto c4dz;
  c4dy:
      _s415::P64 = _s3Zh::P64;
      _s415::P64 = _s415::P64;
      _s416::I64 = _s3ZZ::I64;
      if (_s416::I64 != 0) goto c4dl; else goto c4do;
  c4dl:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s415::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s416::I64;
      _c4dj::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4dj::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4do:
      Hp = Hp - 48;
      I64[(young<c4dn> + 8)] = c4dn;
      R1 = empty_closure;
      if (R1 & 7 != 0) goto c4dn; else goto c4dp;
  c4dp:
      call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
  c4dn:
      _s418::P64 = R1;
      _s419::P64 = P64[_s418::P64 + 7];
      _s41a::I64 = I64[_s418::P64 + 15];
      _s41b::I64 = I64[_s418::P64 + 23];
      R1 = _s418::P64;
      call (P64[(old + 8)])(R1) args: 8, res: 0, upd: 8;
  c4dz:
      _c4aW::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
      _s407::I64 = _c4aW::I64;
      _c4cS::I64 = _s407::I64 >= 55296;
      _s40I::I64 = _c4cS::I64;
      if (_s40I::I64 >= 1) goto c4de; else goto c4df;
  c4de:
      _c4d0::I64 = _s407::I64 <= 56319;
      _s40N::I64 = _c4d0::I64;
      if (_s40N::I64 >= 1) goto c4d9; else goto c4da;
  c4d9:
      _c4e0::I64 = _s3ZY::I64 + 1;
      _s40S::I64 = _c4e0::I64;
      _c4e3::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s40S::I64 << 1)]);
      _s40T::I64 = _c4e3::I64;
      _c4e6::I64 = _s3ZY::I64 + 2;
      _s412::I64 = _c4e6::I64;
      _c4e9::I64 = _s40T::I64;
      _s40X::I64 = _c4e9::I64;
      _c4ec::I64 = _s40X::I64 - 56320;
      _s40Y::I64 = _c4ec::I64;
      _c4ef::I64 = _s407::I64;
      _s40U::I64 = _c4ef::I64;
      _c4ei::I64 = _s40U::I64 - 55296;
      _s40V::I64 = _c4ei::I64;
      _c4el::I64 = _s40V::I64 << 10;
      _s40W::I64 = _c4el::I64;
      _c4eo::I64 = _s40W::I64 + _s40Y::I64;
      _s40Z::I64 = _c4eo::I64;
      _c4er::I64 = _s40Z::I64 + 65536;
      _s410::I64 = _c4er::I64;
      _c4eu::I64 = _s410::I64;
      _s411::I64 = _c4eu::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s412::I64;
      _s409::I64 = _s411::I64;
      goto s408;
  c4da:
      _c4ev::I64 = _s3ZY::I64 + 1;
      _s40R::I64 = _c4ev::I64;
      _c4ey::I64 = _s407::I64;
      _s40P::I64 = _c4ey::I64;
      _c4eB::I64 = _s40P::I64;
      _s40Q::I64 = _c4eB::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s40R::I64;
      _s409::I64 = _s40Q::I64;
      goto s408;
  c4df:
      _c4eC::I64 = _s3ZY::I64 + 1;
      _s40M::I64 = _c4eC::I64;
      _c4eF::I64 = _s407::I64;
      _s40K::I64 = _c4eF::I64;
      _c4eI::I64 = _s40K::I64;
      _s40L::I64 = _c4eI::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s40M::I64;
      _s409::I64 = _s40L::I64;
      goto s408;
  s408:
      _c4bN::I64 = _s409::I64;
      _s40q::I64 = _c4bN::I64;
      _c4bQ::I64 = %MO_S_Lt_W64(_s40q::I64, 192);
      _s40r::I64 = _c4bQ::I64;
      if (_s40r::I64 >= 1) goto s40c; else goto c4cR;
  c4cR:
      _c4bV::I64 = _s409::I64;
      _s40t::I64 = _c4bV::I64;
      _c4bY::I64 = %MO_S_Le_W64(_s40t::I64, 195101);
      _s40u::I64 = _c4bY::I64;
      if (_s40u::I64 < 1) goto s40c; else goto c4cM;
  s40c:
      _s40e::I64 = _s400::I64;
      if (%MO_S_Lt_W64(_s40e::I64, 1)) goto c4bL; else goto c4bM;
  c4bL:
      if (_s40e::I64 != 0) goto c4bd; else goto c4be;
  c4be:
      _c4eQ::I64 = _s3ZZ::I64 + 1;
      _s40g::I64 = _c4eQ::I64;
      _s400::I64 = 1;
      _s3ZZ::I64 = _s40g::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bM:
      if (_s40e::I64 != 1) goto c4bd; else goto c4bG;
  c4bG:
      _c4bi::I64 = _s409::I64;
      _s40h::I64 = _c4bi::I64;
      _c4bl::I64 = %MO_S_Lt_W64(_s40h::I64, 768);
      _s40i::I64 = _c4bl::I64;
      if (_s40i::I64 >= 1) goto c4bI; else goto c4bJ;
  c4bI:
      _c4eS::I64 = _s3ZZ::I64 + 1;
      _s40p::I64 = _c4eS::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40p::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bJ:
      _c4bq::I64 = _s409::I64;
      _s40k::I64 = _c4bq::I64;
      _c4bt::I64 = %MO_S_Gt_W64(_s40k::I64, 125142);
      _s40l::I64 = _c4bt::I64;
      if (_s40l::I64 >= 1) goto c4bD; else goto c4bE;
  c4bD:
      _c4eV::I64 = _s3ZZ::I64 + 1;
      _s40o::I64 = _c4eV::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40o::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bE:
      _c4eW::I64 = _s3ZZ::I64 + 2;
      _s40n::I64 = _c4eW::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40n::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cM:
      _s40w::I64 = _s400::I64;
      if (%MO_S_Lt_W64(_s40w::I64, 1)) goto c4cH; else goto c4cI;
  c4cH:
      if (_s40w::I64 != 0) goto c4bd; else goto c4c9;
  c4c9:
      _c4eJ::I64 = _s3ZZ::I64 + 1;
      _s40y::I64 = _c4eJ::I64;
      _s400::I64 = 1;
      _s3ZZ::I64 = _s40y::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cI:
      if (_s40w::I64 != 1) goto c4bd; else goto c4cB;
  c4bd:
      R1 = lvl1_r3Yr_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4cB:
      _c4cd::I64 = _s409::I64;
      _s40z::I64 = _c4cd::I64;
      _c4cg::I64 = %MO_S_Lt_W64(_s40z::I64, 768);
      _s40A::I64 = _c4cg::I64;
      if (_s40A::I64 >= 1) goto c4cD; else goto c4cE;
  c4cD:
      _c4eL::I64 = _s3ZZ::I64 + 1;
      _s40H::I64 = _c4eL::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40H::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cE:
      _c4cl::I64 = _s409::I64;
      _s40C::I64 = _c4cl::I64;
      _c4co::I64 = %MO_S_Gt_W64(_s40C::I64, 125142);
      _s40D::I64 = _c4co::I64;
      if (_s40D::I64 >= 1) goto c4cy; else goto c4cz;
  c4cy:
      _c4eO::I64 = _s3ZZ::I64 + 1;
      _s40G::I64 = _c4eO::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40G::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cz:
      _c4eP::I64 = _s3ZZ::I64 + 2;
      _s40F::I64 = _c4eP::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40F::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.353685 UTC

{offset
  c49g:
      _s41h::P64 = R1;
      if ((Sp + 8) - 88 < SpLim) goto c49h; else goto c49i;
  c49h:
      R1 = _s41h::P64;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c49i:
      _s3YL::P64 = P64[_s41h::P64 + 7];
      _s3YM::I64 = I64[_s41h::P64 + 15];
      _s3YN::I64 = I64[_s41h::P64 + 23];
      _c47C::I64 = _s3YN::I64 + 11;
      _s3YR::I64 = _c47C::I64;
      _c47F::I64 = %MO_S_Lt_W64(_s3YR::I64, 0);
      _s3YS::I64 = _c47F::I64;
      if (_s3YS::I64 >= 1) goto c4dI; else goto c4dJ;
  c4dJ:
      _c47K::I64 = _s3YR::I64 & 4611686018427387904;
      _s3YU::I64 = _c47K::I64;
      if (_s3YU::I64 != 0) goto c4dI; else goto c49p;
  c49p:
      _c47R::I64 = _s3YR::I64 << 1;
      _s3YW::I64 = _c47R::I64;
      I64[Sp - 40] = c47U;
      R1 = _s3YW::I64;
      P64[Sp - 32] = _s3YL::P64;
      I64[Sp - 24] = _s3YM::I64;
      I64[Sp - 16] = _s3YN::I64;
      I64[Sp - 8] = _s3YR::I64;
      Sp = Sp - 40;
      call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c47U:
      _s3YL::P64 = P64[Sp + 8];
      _s3YM::I64 = I64[Sp + 16];
      _s3YN::I64 = I64[Sp + 24];
      _s3YR::I64 = I64[Sp + 32];
      _s3YZ::P64 = R1;
      Hp = Hp + 80;
      if (Hp > HpLim) goto c49t; else goto c49s;
  c49t:
      HpAlloc = 80;
      R1 = _s3YZ::P64;
      call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c49s:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      _s3Z2::P64 = Hp - 72;
      _s3Z2::P64 = _s3Z2::P64;
      _c47W::P64 = Hp - 7;
      I64[Hp - 8] = go1_s3Z3_info;
      P64[Hp] = _s3Z2::P64;
      I64[Sp - 8] = c47Y;
      R2 = 0;
      R1 = _c47W::P64;
      P64[Sp] = _s3YZ::P64;
      Sp = Sp - 8;
      call go1_s3Z3_info(R2,
                         R1) returns to c47Y, args: 8, res: 8, upd: 8;
  c47Y:
      _s3YL::P64 = P64[Sp + 16];
      _s3YM::I64 = I64[Sp + 24];
      _s3YN::I64 = I64[Sp + 32];
      _s3YR::I64 = I64[Sp + 40];
      _s3YZ::P64 = P64[Sp + 8];
      _s3Zb::P64 = R1;
      I64[Sp] = c482;
      R2 = _s3Zb::P64;
      call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
  c482:
      _s3YL::P64 = P64[Sp + 16];
      _s3YM::I64 = I64[Sp + 24];
      _s3YN::I64 = I64[Sp + 32];
      _s3YR::I64 = I64[Sp + 40];
      _s3YZ::P64 = P64[Sp + 8];
      _s3Ze::P64 = R1;
      _c484::I64 = _s3YM::I64 + _s3YN::I64;
      _s3Zf::I64 = _c484::I64;
      _c4dK::I64 = _s3YR::I64 - 1;
      _s41f::I64 = _c4dK::I64;
      _s3Zl::I64 = 0;
      _s3Zk::I64 = 0;
      _s3Zj::I64 = _s3YM::I64;
      _s3Zi::I64 = _s41f::I64;
      _s3Zh::P64 = _s3YZ::P64;
      goto c489;
  c489:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c49y; else goto c49x;
  c49y:
      HpAlloc = 24;
      I64[Sp - 16] = c48a;
      I64[Sp - 8] = _s3Zl::I64;
      I64[Sp] = _s3Zk::I64;
      I64[Sp + 8] = _s3Zj::I64;
      I64[Sp + 24] = _s3Zi::I64;
      P64[Sp + 32] = _s3Zh::P64;
      I64[Sp + 40] = _s3Zf::I64;
      Sp = Sp - 16;
      call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
  c48a:
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 56];
      _s3Zh::P64 = P64[Sp + 48];
      _s3Zi::I64 = I64[Sp + 40];
      _s3Zj::I64 = I64[Sp + 24];
      _s3Zk::I64 = I64[Sp + 16];
      _s3Zl::I64 = I64[Sp + 8];
      goto u4f9;
  u4f9:
      Sp = Sp + 16;
      goto c489;
  c49x:
      _c48c::I64 = _s3Zi::I64 * 2;
      _s3Zn::I64 = _c48c::I64;
      I64[Hp - 16] = lvl2_s3Zo_info;
      I64[Hp] = _s3Zn::I64;
      _c48f::P64 = Hp - 16;
      _s400::I64 = _s3Zl::I64;
      _s3ZZ::I64 = _s3Zk::I64;
      _s3ZY::I64 = _s3Zj::I64;
      goto c48p;
  c48p:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4aQ; else goto c4aP;
  c4aQ:
      HpAlloc = 48;
      I64[Sp - 32] = c48q;
      I64[Sp - 24] = _s3ZY::I64;
      I64[Sp - 16] = _s3ZZ::I64;
      I64[Sp - 8] = _s400::I64;
      I64[Sp] = _s3Zn::I64;
      I64[Sp + 8] = _s3Zi::I64;
      P64[Sp + 24] = _s3Zh::P64;
      I64[Sp + 32] = _s3Zf::I64;
      P64[Sp + 40] = _c48f::P64;
      Sp = Sp - 32;
      call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
  c48q:
      _c48f::P64 = P64[Sp + 72];
      _s3YL::P64 = P64[Sp + 48];
      _s3Zf::I64 = I64[Sp + 64];
      _s3Zh::P64 = P64[Sp + 56];
      _s3Zi::I64 = I64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 32];
      _s3ZY::I64 = I64[Sp + 8];
      _s3ZZ::I64 = I64[Sp + 16];
      _s400::I64 = I64[Sp + 24];
      goto u4fa;
  u4fa:
      Sp = Sp + 32;
      goto c48p;
  c4aP:
      _c48s::I64 = _s3ZZ::I64 + 11;
      _s402::I64 = _c48s::I64;
      _c48v::I64 = %MO_S_Lt_W64(_s3Zi::I64, _s402::I64);
      _s403::I64 = _c48v::I64;
      if (_s403::I64 >= 1) goto c4dC; else goto c4dD;
  c4dC:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s400::I64;
      _c48B::P64 = Hp - 39;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s3ZZ::I64;
      _c48C::P64 = Hp - 23;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s3ZY::I64;
      _c48D::P64 = Hp - 7;
      _B2::P64 = _c48B::P64;
      _B3::P64 = _c48C::P64;
      _B4::P64 = _c48D::P64;
      _s3ZO::P64 = _B2::P64;
      _s3ZN::P64 = _B3::P64;
      _s3ZM::P64 = _B4::P64;
      I64[Sp - 16] = c4ar;
      R1 = _s3ZM::P64;
      P64[Sp - 8] = _s3ZO::P64;
      P64[Sp] = _s3ZN::P64;
      I64[Sp + 8] = _s3Zn::I64;
      P64[Sp + 24] = _s3Zh::P64;
      I64[Sp + 32] = _s3Zf::I64;
      P64[Sp + 40] = _c48f::P64;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4ar; else goto c4as;
  c4as:
      call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
  c4ar:
      _c48f::P64 = P64[Sp + 56];
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 48];
      _s3Zh::P64 = P64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 24];
      _s3ZN::P64 = P64[Sp + 16];
      _s3ZO::P64 = P64[Sp + 8];
      _s3ZQ::P64 = R1;
      _s3ZR::I64 = I64[_s3ZQ::P64 + 7];
      I64[Sp] = c4aw;
      R1 = _s3ZN::P64;
      I64[Sp + 16] = _s3ZR::I64;
      if (R1 & 7 != 0) goto c4aw; else goto c4ax;
  c4ax:
      call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
  c4aw:
      _c48f::P64 = P64[Sp + 56];
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 48];
      _s3Zh::P64 = P64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 24];
      _s3ZO::P64 = P64[Sp + 8];
      _s3ZR::I64 = I64[Sp + 16];
      _s3ZS::P64 = R1;
      _s3ZT::I64 = I64[_s3ZS::P64 + 7];
      I64[Sp] = c4aB;
      R1 = _s3ZO::P64;
      I64[Sp + 8] = _s3ZT::I64;
      if (R1 & 7 != 0) goto c4aB; else goto c4aF;
  c4aF:
      call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
  c4aB:
      _c48f::P64 = P64[Sp + 56];
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 48];
      _s3Zh::P64 = P64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 24];
      _s3ZR::I64 = I64[Sp + 16];
      _s3ZT::I64 = I64[Sp + 8];
      _s3ZU::P64 = R1;
      _s3ZV::I64 = I64[_s3ZU::P64 + 7];
      _s3Zt::I64 = _s3ZV::I64;
      _s3Zs::I64 = _s3ZT::I64;
      _s3Zr::I64 = _s3ZR::I64;
      I64[Sp] = c49C;
      R1 = _c48f::P64;
      I64[Sp + 8] = _s3Zt::I64;
      I64[Sp + 16] = _s3Zs::I64;
      I64[Sp + 56] = _s3Zr::I64;
      if (R1 & 7 != 0) goto c49C; else goto c49E;
  c49E:
      call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
  c49C:
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 48];
      _s3Zh::P64 = P64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 24];
      _s3Zr::I64 = I64[Sp + 56];
      _s3Zs::I64 = I64[Sp + 16];
      _s3Zt::I64 = I64[Sp + 8];
      _s3Zv::P64 = R1;
      _c4ak::P64 = _s3Zv::P64 & 7;
      if (_c4ak::P64 >= 2) goto u4fb; else goto c4an;
  u4fb:
      Sp = Sp + 64;
      goto c4dI;
  c4an:
      _c49J::I64 = _s3Zn::I64 & 4611686018427387904;
      _s3Zw::I64 = _c49J::I64;
      if (_s3Zw::I64 != 0) goto u4fc; else goto c49U;
  u4fc:
      Sp = Sp + 64;
      goto c4dI;
  c4dI:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c49U:
      _c49Y::I64 = _s3Zn::I64 << 1;
      _s3Zy::I64 = _c49Y::I64;
      I64[Sp] = c4a1;
      R1 = _s3Zy::I64;
      call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
  c4a1:
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 48];
      _s3Zh::P64 = P64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 24];
      _s3Zr::I64 = I64[Sp + 56];
      _s3Zs::I64 = I64[Sp + 16];
      _s3Zt::I64 = I64[Sp + 8];
      _s3ZB::P64 = R1;
      _c4a4::I64 = %MO_S_Le_W64(_s3Zs::I64, 0);
      _s3ZC::I64 = _c4a4::I64;
      if (_s3ZC::I64 >= 1) goto c4ac; else goto c4ad;
  c4ac:
      _c4dN::I64 = _s3Zn::I64 - 1;
      _s3ZJ::I64 = _c4dN::I64;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3ZJ::I64;
      _s3Zh::P64 = _s3ZB::P64;
      goto u4fd;
  u4fd:
      Sp = Sp + 16;
      goto c489;
  c4ad:
      _c4dO::I64 = _s3Zs::I64;
      _s3ZF::I64 = _c4dO::I64;
      _c4dR::I64 = _hs_text_memcpy;
      _c4dS::P64 = _s3ZB::P64 + 16;
      _c4dT::I64 = 0;
      _c4dU::P64 = _s3Zh::P64 + 16;
      _c4dV::I64 = 0;
      _c4dW::I64 = _s3ZF::I64;
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] (_c4dR::I64)(_c4dS::P64, _c4dT::I64, _c4dU::P64, _c4dV::I64, _c4dW::I64);
      _c4dX::I64 = _s3Zn::I64 - 1;
      _s3ZI::I64 = _c4dX::I64;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3ZI::I64;
      _s3Zh::P64 = _s3ZB::P64;
      goto u4fe;
  u4fe:
      Sp = Sp + 16;
      goto c489;
  c4dD:
      _c4aR::I64 = %MO_S_Ge_W64(_s3ZY::I64, _s3Zf::I64);
      _s405::I64 = _c4aR::I64;
      if (_s405::I64 >= 1) goto c4dy; else goto c4dz;
  c4dy:
      _s415::P64 = _s3Zh::P64;
      _s415::P64 = _s415::P64;
      _s416::I64 = _s3ZZ::I64;
      if (_s416::I64 != 0) goto c4dl; else goto c4do;
  c4dl:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s415::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s416::I64;
      _c4dj::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4dj::P64;
      Sp = Sp + 48;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4do:
      Hp = Hp - 48;
      I64[Sp + 40] = c4dn;
      R1 = empty_closure;
      Sp = Sp + 40;
      if (R1 & 7 != 0) goto c4dn; else goto c4dp;
  c4dp:
      call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
  c4dn:
      _s418::P64 = R1;
      _s419::P64 = P64[_s418::P64 + 7];
      _s41a::I64 = I64[_s418::P64 + 15];
      _s41b::I64 = I64[_s418::P64 + 23];
      R1 = _s418::P64;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4dz:
      _c4aW::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
      _s407::I64 = _c4aW::I64;
      _c4cS::I64 = _s407::I64 >= 55296;
      _s40I::I64 = _c4cS::I64;
      if (_s40I::I64 >= 1) goto c4de; else goto c4df;
  c4de:
      _c4d0::I64 = _s407::I64 <= 56319;
      _s40N::I64 = _c4d0::I64;
      if (_s40N::I64 >= 1) goto c4d9; else goto c4da;
  c4d9:
      _c4e0::I64 = _s3ZY::I64 + 1;
      _s40S::I64 = _c4e0::I64;
      _c4e3::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s40S::I64 << 1)]);
      _s40T::I64 = _c4e3::I64;
      _c4e6::I64 = _s3ZY::I64 + 2;
      _s412::I64 = _c4e6::I64;
      _c4e9::I64 = _s40T::I64;
      _s40X::I64 = _c4e9::I64;
      _c4ec::I64 = _s40X::I64 - 56320;
      _s40Y::I64 = _c4ec::I64;
      _c4ef::I64 = _s407::I64;
      _s40U::I64 = _c4ef::I64;
      _c4ei::I64 = _s40U::I64 - 55296;
      _s40V::I64 = _c4ei::I64;
      _c4el::I64 = _s40V::I64 << 10;
      _s40W::I64 = _c4el::I64;
      _c4eo::I64 = _s40W::I64 + _s40Y::I64;
      _s40Z::I64 = _c4eo::I64;
      _c4er::I64 = _s40Z::I64 + 65536;
      _s410::I64 = _c4er::I64;
      _c4eu::I64 = _s410::I64;
      _s411::I64 = _c4eu::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s412::I64;
      _s409::I64 = _s411::I64;
      goto s408;
  c4da:
      _c4ev::I64 = _s3ZY::I64 + 1;
      _s40R::I64 = _c4ev::I64;
      _c4ey::I64 = _s407::I64;
      _s40P::I64 = _c4ey::I64;
      _c4eB::I64 = _s40P::I64;
      _s40Q::I64 = _c4eB::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s40R::I64;
      _s409::I64 = _s40Q::I64;
      goto s408;
  c4df:
      _c4eC::I64 = _s3ZY::I64 + 1;
      _s40M::I64 = _c4eC::I64;
      _c4eF::I64 = _s407::I64;
      _s40K::I64 = _c4eF::I64;
      _c4eI::I64 = _s40K::I64;
      _s40L::I64 = _c4eI::I64;
      Hp = Hp - 48;
      _s40a::I64 = _s40M::I64;
      _s409::I64 = _s40L::I64;
      goto s408;
  s408:
      _c4bN::I64 = _s409::I64;
      _s40q::I64 = _c4bN::I64;
      _c4bQ::I64 = %MO_S_Lt_W64(_s40q::I64, 192);
      _s40r::I64 = _c4bQ::I64;
      if (_s40r::I64 >= 1) goto s40c; else goto c4cR;
  c4cR:
      _c4bV::I64 = _s409::I64;
      _s40t::I64 = _c4bV::I64;
      _c4bY::I64 = %MO_S_Le_W64(_s40t::I64, 195101);
      _s40u::I64 = _c4bY::I64;
      if (_s40u::I64 < 1) goto s40c; else goto c4cM;
  s40c:
      _s40e::I64 = _s400::I64;
      if (%MO_S_Lt_W64(_s40e::I64, 1)) goto c4bL; else goto c4bM;
  c4bL:
      if (_s40e::I64 != 0) goto c4bd; else goto c4be;
  c4be:
      _c4eQ::I64 = _s3ZZ::I64 + 1;
      _s40g::I64 = _c4eQ::I64;
      _s400::I64 = 1;
      _s3ZZ::I64 = _s40g::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bM:
      if (_s40e::I64 != 1) goto c4bd; else goto c4bG;
  c4bG:
      _c4bi::I64 = _s409::I64;
      _s40h::I64 = _c4bi::I64;
      _c4bl::I64 = %MO_S_Lt_W64(_s40h::I64, 768);
      _s40i::I64 = _c4bl::I64;
      if (_s40i::I64 >= 1) goto c4bI; else goto c4bJ;
  c4bI:
      _c4eS::I64 = _s3ZZ::I64 + 1;
      _s40p::I64 = _c4eS::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40p::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bJ:
      _c4bq::I64 = _s409::I64;
      _s40k::I64 = _c4bq::I64;
      _c4bt::I64 = %MO_S_Gt_W64(_s40k::I64, 125142);
      _s40l::I64 = _c4bt::I64;
      if (_s40l::I64 >= 1) goto c4bD; else goto c4bE;
  c4bD:
      _c4eV::I64 = _s3ZZ::I64 + 1;
      _s40o::I64 = _c4eV::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40o::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bE:
      _c4eW::I64 = _s3ZZ::I64 + 2;
      _s40n::I64 = _c4eW::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40n::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cM:
      _s40w::I64 = _s400::I64;
      if (%MO_S_Lt_W64(_s40w::I64, 1)) goto c4cH; else goto c4cI;
  c4cH:
      if (_s40w::I64 != 0) goto c4bd; else goto c4c9;
  c4c9:
      _c4eJ::I64 = _s3ZZ::I64 + 1;
      _s40y::I64 = _c4eJ::I64;
      _s400::I64 = 1;
      _s3ZZ::I64 = _s40y::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cI:
      if (_s40w::I64 != 1) goto c4bd; else goto c4cB;
  c4bd:
      R1 = lvl1_r3Yr_closure;
      Sp = Sp + 48;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4cB:
      _c4cd::I64 = _s409::I64;
      _s40z::I64 = _c4cd::I64;
      _c4cg::I64 = %MO_S_Lt_W64(_s40z::I64, 768);
      _s40A::I64 = _c4cg::I64;
      if (_s40A::I64 >= 1) goto c4cD; else goto c4cE;
  c4cD:
      _c4eL::I64 = _s3ZZ::I64 + 1;
      _s40H::I64 = _c4eL::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40H::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cE:
      _c4cl::I64 = _s409::I64;
      _s40C::I64 = _c4cl::I64;
      _c4co::I64 = %MO_S_Gt_W64(_s40C::I64, 125142);
      _s40D::I64 = _c4co::I64;
      if (_s40D::I64 >= 1) goto c4cy; else goto c4cz;
  c4cy:
      _c4eO::I64 = _s3ZZ::I64 + 1;
      _s40G::I64 = _c4eO::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40G::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cz:
      _c4eP::I64 = _s3ZZ::I64 + 2;
      _s40F::I64 = _c4eP::I64;
      _s400::I64 = 0;
      _s3ZZ::I64 = _s40F::I64;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.359988 UTC

{offset
  c49g:
      if ((Sp + -80) < SpLim) goto c49h; else goto c49i;
  c49h:
      R1 = R1;
      call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
  c49i:
      _s3YN::I64 = I64[R1 + 23];
      _s3YR::I64 = _s3YN::I64 + 11;
      if (%MO_S_Lt_W64(_s3YR::I64, 0)) goto c4dI; else goto c4dJ;
  c4dJ:
      if (_s3YR::I64 & 4611686018427387904 != 0) goto c4dI; else goto c49p;
  c49p:
      I64[Sp - 40] = c47U;
      _s3YL::P64 = P64[R1 + 7];
      _s3YM::I64 = I64[R1 + 15];
      R1 = _s3YR::I64 << 1;
      P64[Sp - 32] = _s3YL::P64;
      I64[Sp - 24] = _s3YM::I64;
      I64[Sp - 16] = _s3YN::I64;
      I64[Sp - 8] = _s3YR::I64;
      Sp = Sp - 40;
      call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c47U:
      Hp = Hp + 80;
      if (Hp > HpLim) goto c49t; else goto c49s;
  c49t:
      HpAlloc = 80;
      R1 = R1;
      call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
  c49s:
      I64[Hp - 72] = stg_ARR_WORDS_info;
      I64[Hp - 64] = 48;
      I64[Hp - 8] = go1_s3Z3_info;
      P64[Hp] = Hp - 72;
      I64[Sp - 8] = c47Y;
      R2 = 0;
      _s3YZ::P64 = R1;
      R1 = Hp - 7;
      P64[Sp] = _s3YZ::P64;
      Sp = Sp - 8;
      call go1_s3Z3_info(R2,
                         R1) returns to c47Y, args: 8, res: 8, upd: 8;
  c47Y:
      I64[Sp] = c482;
      R2 = R1;
      call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
  c482:
      _s3YL::P64 = P64[Sp + 16];
      _s3YM::I64 = I64[Sp + 24];
      _s3Zf::I64 = _s3YM::I64 + I64[Sp + 32];
      _s3Zl::I64 = 0;
      _s3Zk::I64 = 0;
      _s3Zj::I64 = _s3YM::I64;
      _s3Zi::I64 = I64[Sp + 40] - 1;
      _s3Zh::P64 = P64[Sp + 8];
      goto c489;
  c489:
      Hp = Hp + 24;
      if (Hp > HpLim) goto c49y; else goto c49x;
  c49y:
      HpAlloc = 24;
      I64[Sp - 16] = c48a;
      I64[Sp - 8] = _s3Zl::I64;
      I64[Sp] = _s3Zk::I64;
      I64[Sp + 8] = _s3Zj::I64;
      I64[Sp + 24] = _s3Zi::I64;
      P64[Sp + 32] = _s3Zh::P64;
      I64[Sp + 40] = _s3Zf::I64;
      Sp = Sp - 16;
      call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
  c48a:
      goto u4f9;
  u4f9:
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 56];
      _s3Zh::P64 = P64[Sp + 48];
      _s3Zi::I64 = I64[Sp + 40];
      _s3Zj::I64 = I64[Sp + 24];
      _s3Zk::I64 = I64[Sp + 16];
      _s3Zl::I64 = I64[Sp + 8];
      Sp = Sp + 16;
      goto c489;
  c49x:
      I64[Hp - 16] = lvl2_s3Zo_info;
      _s3Zn::I64 = _s3Zi::I64 << 1;
      I64[Hp] = _s3Zn::I64;
      _c48f::P64 = Hp - 16;
      _s400::I64 = _s3Zl::I64;
      _s3ZZ::I64 = _s3Zk::I64;
      _s3ZY::I64 = _s3Zj::I64;
      goto c48p;
  c48p:
      Hp = Hp + 48;
      if (Hp > HpLim) goto c4aQ; else goto c4aP;
  c4aQ:
      HpAlloc = 48;
      I64[Sp - 32] = c48q;
      I64[Sp - 24] = _s3ZY::I64;
      I64[Sp - 16] = _s3ZZ::I64;
      I64[Sp - 8] = _s400::I64;
      I64[Sp] = _s3Zn::I64;
      I64[Sp + 8] = _s3Zi::I64;
      P64[Sp + 24] = _s3Zh::P64;
      I64[Sp + 32] = _s3Zf::I64;
      P64[Sp + 40] = _c48f::P64;
      Sp = Sp - 32;
      call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
  c48q:
      goto u4fa;
  u4fa:
      _c48f::P64 = P64[Sp + 72];
      _s3YL::P64 = P64[Sp + 48];
      _s3Zf::I64 = I64[Sp + 64];
      _s3Zh::P64 = P64[Sp + 56];
      _s3Zi::I64 = I64[Sp + 40];
      _s3Zn::I64 = I64[Sp + 32];
      _s3ZY::I64 = I64[Sp + 8];
      _s3ZZ::I64 = I64[Sp + 16];
      _s400::I64 = I64[Sp + 24];
      Sp = Sp + 32;
      goto c48p;
  c4aP:
      if (%MO_S_Lt_W64(_s3Zi::I64,
                       _s3ZZ::I64 + 11)) goto c4dC; else goto c4dD;
  c4dC:
      I64[Hp - 40] = I#_con_info;
      I64[Hp - 32] = _s400::I64;
      I64[Hp - 24] = I#_con_info;
      I64[Hp - 16] = _s3ZZ::I64;
      I64[Hp - 8] = I#_con_info;
      I64[Hp] = _s3ZY::I64;
      I64[Sp - 16] = c4ar;
      R1 = Hp - 7;
      P64[Sp - 8] = Hp - 39;
      P64[Sp] = Hp - 23;
      I64[Sp + 8] = _s3Zn::I64;
      P64[Sp + 24] = _s3Zh::P64;
      I64[Sp + 32] = _s3Zf::I64;
      P64[Sp + 40] = _c48f::P64;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4ar; else goto c4as;
  c4as:
      call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
  c4ar:
      I64[Sp] = c4aw;
      _s3ZR::I64 = I64[R1 + 7];
      R1 = P64[Sp + 16];
      I64[Sp + 16] = _s3ZR::I64;
      if (R1 & 7 != 0) goto c4aw; else goto c4ax;
  c4ax:
      call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
  c4aw:
      I64[Sp] = c4aB;
      _s3ZT::I64 = I64[R1 + 7];
      R1 = P64[Sp + 8];
      I64[Sp + 8] = _s3ZT::I64;
      if (R1 & 7 != 0) goto c4aB; else goto c4aF;
  c4aF:
      call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
  c4aB:
      I64[Sp] = c49C;
      _s3Zt::I64 = I64[R1 + 7];
      R1 = P64[Sp + 56];
      _s3Zs::I64 = I64[Sp + 8];
      I64[Sp + 8] = _s3Zt::I64;
      _s3Zr::I64 = I64[Sp + 16];
      I64[Sp + 16] = _s3Zs::I64;
      I64[Sp + 56] = _s3Zr::I64;
      if (R1 & 7 != 0) goto c49C; else goto c49E;
  c49E:
      call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
  c49C:
      if (R1 & 7 >= 2) goto u4fb; else goto c4an;
  u4fb:
      Sp = Sp + 64;
      goto c4dI;
  c4an:
      _s3Zn::I64 = I64[Sp + 24];
      if (_s3Zn::I64 & 4611686018427387904 != 0) goto u4fc; else goto c49U;
  u4fc:
      Sp = Sp + 64;
      goto c4dI;
  c4dI:
      R1 = array_size_error_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c49U:
      I64[Sp] = c4a1;
      R1 = _s3Zn::I64 << 1;
      call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
  c4a1:
      _s3YL::P64 = P64[Sp + 32];
      _s3Zf::I64 = I64[Sp + 48];
      _s3Zn::I64 = I64[Sp + 24];
      _s3Zr::I64 = I64[Sp + 56];
      _s3Zs::I64 = I64[Sp + 16];
      _s3Zt::I64 = I64[Sp + 8];
      if (%MO_S_Le_W64(_s3Zs::I64, 0)) goto c4ac; else goto c4ad;
  c4ac:
      goto u4fd;
  u4fd:
      Sp = Sp + 16;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3Zn::I64 - 1;
      _s3Zh::P64 = R1;
      goto c489;
  c4ad:
      call "ccall" arg hints:  [PtrHint, , PtrHint,
                                ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 40] + 16, 0, _s3Zs::I64);
      goto u4fe;
  u4fe:
      Sp = Sp + 16;
      _s3Zl::I64 = _s3Zt::I64;
      _s3Zk::I64 = _s3Zs::I64;
      _s3Zj::I64 = _s3Zr::I64;
      _s3Zi::I64 = _s3Zn::I64 - 1;
      _s3Zh::P64 = R1;
      goto c489;
  c4dD:
      if (%MO_S_Ge_W64(_s3ZY::I64,
                       _s3Zf::I64)) goto c4dy; else goto c4dz;
  c4dy:
      if (_s3ZZ::I64 != 0) goto c4dl; else goto c4do;
  c4dl:
      I64[Hp - 40] = Text_con_info;
      P64[Hp - 32] = _s3Zh::P64;
      I64[Hp - 24] = 0;
      I64[Hp - 16] = _s3ZZ::I64;
      _c4dj::P64 = Hp - 39;
      Hp = Hp - 16;
      R1 = _c4dj::P64;
      Sp = Sp + 48;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4do:
      Hp = Hp - 48;
      I64[Sp + 40] = c4dn;
      R1 = empty_closure;
      Sp = Sp + 40;
      if (R1 & 7 != 0) goto c4dn; else goto c4dp;
  c4dp:
      call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
  c4dn:
      R1 = R1;
      Sp = Sp + 8;
      call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
  c4dz:
      _s407::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
      if (_s407::I64 >= 55296) goto c4de; else goto c4df;
  c4de:
      if (_s407::I64 <= 56319) goto c4d9; else goto c4da;
  c4d9:
      Hp = Hp - 48;
      _s40a::I64 = _s3ZY::I64 + 2;
      _s409::I64 = ((_s407::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + ((_s3ZY::I64 + 1) << 1)]) - 56320) + 65536;
      goto s408;
  c4da:
      Hp = Hp - 48;
      _s40a::I64 = _s3ZY::I64 + 1;
      _s409::I64 = _s407::I64;
      goto s408;
  c4df:
      Hp = Hp - 48;
      _s40a::I64 = _s3ZY::I64 + 1;
      _s409::I64 = _s407::I64;
      goto s408;
  s408:
      if (%MO_S_Lt_W64(_s409::I64, 192)) goto s40c; else goto c4cR;
  c4cR:
      if (%MO_S_Gt_W64(_s409::I64, 195101)) goto s40c; else goto c4cM;
  s40c:
      if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4bL; else goto c4bM;
  c4bL:
      if (_s400::I64 != 0) goto c4bd; else goto c4be;
  c4be:
      _s400::I64 = 1;
      _s3ZZ::I64 = _s3ZZ::I64 + 1;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bM:
      if (_s400::I64 != 1) goto c4bd; else goto c4bG;
  c4bG:
      if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4bI; else goto c4bJ;
  c4bI:
      _s400::I64 = 0;
      _s3ZZ::I64 = _s3ZZ::I64 + 1;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bJ:
      if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4bD; else goto c4bE;
  c4bD:
      _s400::I64 = 0;
      _s3ZZ::I64 = _s3ZZ::I64 + 1;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4bE:
      _s400::I64 = 0;
      _s3ZZ::I64 = _s3ZZ::I64 + 2;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cM:
      if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4cH; else goto c4cI;
  c4cH:
      if (_s400::I64 != 0) goto c4bd; else goto c4c9;
  c4c9:
      _s400::I64 = 1;
      _s3ZZ::I64 = _s3ZZ::I64 + 1;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cI:
      if (_s400::I64 != 1) goto c4bd; else goto c4cB;
  c4bd:
      R1 = lvl1_r3Yr_closure;
      Sp = Sp + 48;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4cB:
      if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4cD; else goto c4cE;
  c4cD:
      _s400::I64 = 0;
      _s3ZZ::I64 = _s3ZZ::I64 + 1;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cE:
      if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4cy; else goto c4cz;
  c4cy:
      _s400::I64 = 0;
      _s3ZZ::I64 = _s3ZZ::I64 + 1;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
  c4cz:
      _s400::I64 = 0;
      _s3ZZ::I64 = _s3ZZ::I64 + 2;
      _s3ZY::I64 = _s40a::I64;
      goto c48p;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.366613 UTC

[(c47U,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (c47Y,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c482,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c489,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c48a,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c48p,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c48q,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c49g,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (c49h, {}),
 (c49i,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (c49p,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (c49s,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (c49t,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (c49x,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c49y,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c49C,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c49E,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c49U,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4a1,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4ac,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4ad,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4an,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4ar,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4as,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4aw,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4ax,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4aB,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4aF,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4aP,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4aQ,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bd, {lvl1_r3Yr_closure}),
 (c4be,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bD,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bE,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bG,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bI,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bJ,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bL,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4bM,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4c9,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cy,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cz,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cB,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cD,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cE,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cH,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cI,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cM,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4cR,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4d9,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4da,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4de,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4df,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4dl, {}), (c4dn, {}), (c4do, {empty_closure}), (c4dp, {}),
 (c4dy, {empty_closure}),
 (c4dz,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4dC,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4dD,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (c4dI, {array_size_error_closure}),
 (c4dJ,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   go1_s3Z3_closure, lvl2_s3Zo_closure}),
 (s408,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (s40c,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (u4f9,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (u4fa,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (u4fb, {array_size_error_closure}),
 (u4fc, {array_size_error_closure}),
 (u4fd,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure}),
 (u4fe,
  {array_size_error_closure, empty_closure, lvl1_r3Yr_closure,
   lvl2_s3Zo_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.370028 UTC

sat_s41h_entry() //  [R1]
        { info_tbl: [(c47U,
                      label: block_c47U_info
                      rep:StackRep [False, True, True, True]),
                     (c47Y,
                      label: block_c47Y_info
                      rep:StackRep [False, False, True, True, True]),
                     (c482,
                      label: block_c482_info
                      rep:StackRep [False, False, True, True, True]),
                     (c48a,
                      label: block_c48a_info
                      rep:StackRep [True, True, True, False, True, False, True]),
                     (c48q,
                      label: block_c48q_info
                      rep:StackRep [True, True, True, True, True, False, False, True,
                                    False]),
                     (c49g,
                      label: sat_s41h_info
                      rep:HeapRep 1 ptrs 2 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} }),
                     (c49C,
                      label: block_c49C_info
                      rep:StackRep [True, True, True, False, False, True, True]),
                     (c4a1,
                      label: block_c4a1_info
                      rep:StackRep [True, True, True, False, False, True, True]),
                     (c4ar,
                      label: block_c4ar_info
                      rep:StackRep [False, False, True, False, False, True, False]),
                     (c4aw,
                      label: block_c4aw_info
                      rep:StackRep [False, True, True, False, False, True, False]),
                     (c4aB,
                      label: block_c4aB_info
                      rep:StackRep [True, True, True, False, False, True, False]),
                     (c4dn,
                      label: block_c4dn_info
                      rep:StackRep [])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c49g:
          if ((Sp + -80) < SpLim) goto c49h; else goto c49i;
      c49h:
          R1 = R1;
          call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
      c49i:
          _s3YN::I64 = I64[R1 + 23];
          _s3YR::I64 = _s3YN::I64 + 11;
          if (%MO_S_Lt_W64(_s3YR::I64, 0)) goto c4dI; else goto c4dJ;
      c4dJ:
          if (_s3YR::I64 & 4611686018427387904 != 0) goto c4dI; else goto c49p;
      c49p:
          I64[Sp - 40] = c47U;
          _s3YL::P64 = P64[R1 + 7];
          _s3YM::I64 = I64[R1 + 15];
          R1 = _s3YR::I64 << 1;
          P64[Sp - 32] = _s3YL::P64;
          I64[Sp - 24] = _s3YM::I64;
          I64[Sp - 16] = _s3YN::I64;
          I64[Sp - 8] = _s3YR::I64;
          Sp = Sp - 40;
          call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
      c47U:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c49t; else goto c49s;
      c49t:
          HpAlloc = 80;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
      c49s:
          I64[Hp - 72] = stg_ARR_WORDS_info;
          I64[Hp - 64] = 48;
          I64[Hp - 8] = go1_s3Z3_info;
          P64[Hp] = Hp - 72;
          I64[Sp - 8] = c47Y;
          R2 = 0;
          _s3YZ::P64 = R1;
          R1 = Hp - 7;
          P64[Sp] = _s3YZ::P64;
          Sp = Sp - 8;
          call go1_s3Z3_info(R2,
                             R1) returns to c47Y, args: 8, res: 8, upd: 8;
      c47Y:
          I64[Sp] = c482;
          R2 = R1;
          call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
      c482:
          _s3YL::P64 = P64[Sp + 16];
          _s3YM::I64 = I64[Sp + 24];
          _s3Zf::I64 = _s3YM::I64 + I64[Sp + 32];
          _s3Zl::I64 = 0;
          _s3Zk::I64 = 0;
          _s3Zj::I64 = _s3YM::I64;
          _s3Zi::I64 = I64[Sp + 40] - 1;
          _s3Zh::P64 = P64[Sp + 8];
          goto c489;
      c489:
          Hp = Hp + 24;
          if (Hp > HpLim) goto c49y; else goto c49x;
      c49y:
          HpAlloc = 24;
          I64[Sp - 16] = c48a;
          I64[Sp - 8] = _s3Zl::I64;
          I64[Sp] = _s3Zk::I64;
          I64[Sp + 8] = _s3Zj::I64;
          I64[Sp + 24] = _s3Zi::I64;
          P64[Sp + 32] = _s3Zh::P64;
          I64[Sp + 40] = _s3Zf::I64;
          Sp = Sp - 16;
          call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
      c48a:
          goto u4f9;
      u4f9:
          _s3YL::P64 = P64[Sp + 32];
          _s3Zf::I64 = I64[Sp + 56];
          _s3Zh::P64 = P64[Sp + 48];
          _s3Zi::I64 = I64[Sp + 40];
          _s3Zj::I64 = I64[Sp + 24];
          _s3Zk::I64 = I64[Sp + 16];
          _s3Zl::I64 = I64[Sp + 8];
          Sp = Sp + 16;
          goto c489;
      c49x:
          I64[Hp - 16] = lvl2_s3Zo_info;
          _s3Zn::I64 = _s3Zi::I64 << 1;
          I64[Hp] = _s3Zn::I64;
          _c48f::P64 = Hp - 16;
          _s400::I64 = _s3Zl::I64;
          _s3ZZ::I64 = _s3Zk::I64;
          _s3ZY::I64 = _s3Zj::I64;
          goto c48p;
      c48p:
          Hp = Hp + 48;
          if (Hp > HpLim) goto c4aQ; else goto c4aP;
      c4aQ:
          HpAlloc = 48;
          I64[Sp - 32] = c48q;
          I64[Sp - 24] = _s3ZY::I64;
          I64[Sp - 16] = _s3ZZ::I64;
          I64[Sp - 8] = _s400::I64;
          I64[Sp] = _s3Zn::I64;
          I64[Sp + 8] = _s3Zi::I64;
          P64[Sp + 24] = _s3Zh::P64;
          I64[Sp + 32] = _s3Zf::I64;
          P64[Sp + 40] = _c48f::P64;
          Sp = Sp - 32;
          call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
      c48q:
          goto u4fa;
      u4fa:
          _c48f::P64 = P64[Sp + 72];
          _s3YL::P64 = P64[Sp + 48];
          _s3Zf::I64 = I64[Sp + 64];
          _s3Zh::P64 = P64[Sp + 56];
          _s3Zi::I64 = I64[Sp + 40];
          _s3Zn::I64 = I64[Sp + 32];
          _s3ZY::I64 = I64[Sp + 8];
          _s3ZZ::I64 = I64[Sp + 16];
          _s400::I64 = I64[Sp + 24];
          Sp = Sp + 32;
          goto c48p;
      c4aP:
          if (%MO_S_Lt_W64(_s3Zi::I64,
                           _s3ZZ::I64 + 11)) goto c4dC; else goto c4dD;
      c4dC:
          I64[Hp - 40] = I#_con_info;
          I64[Hp - 32] = _s400::I64;
          I64[Hp - 24] = I#_con_info;
          I64[Hp - 16] = _s3ZZ::I64;
          I64[Hp - 8] = I#_con_info;
          I64[Hp] = _s3ZY::I64;
          I64[Sp - 16] = c4ar;
          R1 = Hp - 7;
          P64[Sp - 8] = Hp - 39;
          P64[Sp] = Hp - 23;
          I64[Sp + 8] = _s3Zn::I64;
          P64[Sp + 24] = _s3Zh::P64;
          I64[Sp + 32] = _s3Zf::I64;
          P64[Sp + 40] = _c48f::P64;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4ar; else goto c4as;
      c4as:
          call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
      c4ar:
          I64[Sp] = c4aw;
          _s3ZR::I64 = I64[R1 + 7];
          R1 = P64[Sp + 16];
          I64[Sp + 16] = _s3ZR::I64;
          if (R1 & 7 != 0) goto c4aw; else goto c4ax;
      c4ax:
          call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
      c4aw:
          I64[Sp] = c4aB;
          _s3ZT::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _s3ZT::I64;
          if (R1 & 7 != 0) goto c4aB; else goto c4aF;
      c4aF:
          call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
      c4aB:
          I64[Sp] = c49C;
          _s3Zt::I64 = I64[R1 + 7];
          R1 = P64[Sp + 56];
          _s3Zs::I64 = I64[Sp + 8];
          I64[Sp + 8] = _s3Zt::I64;
          _s3Zr::I64 = I64[Sp + 16];
          I64[Sp + 16] = _s3Zs::I64;
          I64[Sp + 56] = _s3Zr::I64;
          if (R1 & 7 != 0) goto c49C; else goto c49E;
      c49E:
          call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
      c49C:
          if (R1 & 7 >= 2) goto u4fb; else goto c4an;
      u4fb:
          Sp = Sp + 64;
          goto c4dI;
      c4an:
          _s3Zn::I64 = I64[Sp + 24];
          if (_s3Zn::I64 & 4611686018427387904 != 0) goto u4fc; else goto c49U;
      u4fc:
          Sp = Sp + 64;
          goto c4dI;
      c4dI:
          R1 = array_size_error_closure;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c49U:
          I64[Sp] = c4a1;
          R1 = _s3Zn::I64 << 1;
          call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
      c4a1:
          _s3YL::P64 = P64[Sp + 32];
          _s3Zf::I64 = I64[Sp + 48];
          _s3Zn::I64 = I64[Sp + 24];
          _s3Zr::I64 = I64[Sp + 56];
          _s3Zs::I64 = I64[Sp + 16];
          _s3Zt::I64 = I64[Sp + 8];
          if (%MO_S_Le_W64(_s3Zs::I64, 0)) goto c4ac; else goto c4ad;
      c4ac:
          goto u4fd;
      u4fd:
          Sp = Sp + 16;
          _s3Zl::I64 = _s3Zt::I64;
          _s3Zk::I64 = _s3Zs::I64;
          _s3Zj::I64 = _s3Zr::I64;
          _s3Zi::I64 = _s3Zn::I64 - 1;
          _s3Zh::P64 = R1;
          goto c489;
      c4ad:
          call "ccall" arg hints:  [PtrHint, , PtrHint,
                                    ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 40] + 16, 0, _s3Zs::I64);
          goto u4fe;
      u4fe:
          Sp = Sp + 16;
          _s3Zl::I64 = _s3Zt::I64;
          _s3Zk::I64 = _s3Zs::I64;
          _s3Zj::I64 = _s3Zr::I64;
          _s3Zi::I64 = _s3Zn::I64 - 1;
          _s3Zh::P64 = R1;
          goto c489;
      c4dD:
          if (%MO_S_Ge_W64(_s3ZY::I64,
                           _s3Zf::I64)) goto c4dy; else goto c4dz;
      c4dy:
          if (_s3ZZ::I64 != 0) goto c4dl; else goto c4do;
      c4dl:
          I64[Hp - 40] = Text_con_info;
          P64[Hp - 32] = _s3Zh::P64;
          I64[Hp - 24] = 0;
          I64[Hp - 16] = _s3ZZ::I64;
          _c4dj::P64 = Hp - 39;
          Hp = Hp - 16;
          R1 = _c4dj::P64;
          Sp = Sp + 48;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4do:
          Hp = Hp - 48;
          I64[Sp + 40] = c4dn;
          R1 = empty_closure;
          Sp = Sp + 40;
          if (R1 & 7 != 0) goto c4dn; else goto c4dp;
      c4dp:
          call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
      c4dn:
          R1 = R1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4dz:
          _s407::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
          if (_s407::I64 >= 55296) goto c4de; else goto c4df;
      c4de:
          if (_s407::I64 <= 56319) goto c4d9; else goto c4da;
      c4d9:
          Hp = Hp - 48;
          _s40a::I64 = _s3ZY::I64 + 2;
          _s409::I64 = ((_s407::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + ((_s3ZY::I64 + 1) << 1)]) - 56320) + 65536;
          goto s408;
      c4da:
          Hp = Hp - 48;
          _s40a::I64 = _s3ZY::I64 + 1;
          _s409::I64 = _s407::I64;
          goto s408;
      c4df:
          Hp = Hp - 48;
          _s40a::I64 = _s3ZY::I64 + 1;
          _s409::I64 = _s407::I64;
          goto s408;
      s408:
          if (%MO_S_Lt_W64(_s409::I64, 192)) goto s40c; else goto c4cR;
      c4cR:
          if (%MO_S_Gt_W64(_s409::I64, 195101)) goto s40c; else goto c4cM;
      s40c:
          if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4bL; else goto c4bM;
      c4bL:
          if (_s400::I64 != 0) goto c4bd; else goto c4be;
      c4be:
          _s400::I64 = 1;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4bM:
          if (_s400::I64 != 1) goto c4bd; else goto c4bG;
      c4bG:
          if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4bI; else goto c4bJ;
      c4bI:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4bJ:
          if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4bD; else goto c4bE;
      c4bD:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4bE:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 2;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cM:
          if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4cH; else goto c4cI;
      c4cH:
          if (_s400::I64 != 0) goto c4bd; else goto c4c9;
      c4c9:
          _s400::I64 = 1;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cI:
          if (_s400::I64 != 1) goto c4bd; else goto c4cB;
      c4bd:
          R1 = lvl1_r3Yr_closure;
          Sp = Sp + 48;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4cB:
          if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4cD; else goto c4cE;
      c4cD:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cE:
          if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4cy; else goto c4cz;
      c4cy:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cz:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 2;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.374314 UTC

sat_s41h_entry() //  [R1]
        { info_tbl: [(c47U,
                      label: block_c47U_info
                      rep:StackRep [False, True, True, True]),
                     (c47Y,
                      label: block_c47Y_info
                      rep:StackRep [False, False, True, True, True]),
                     (c482,
                      label: block_c482_info
                      rep:StackRep [False, False, True, True, True]),
                     (c48a,
                      label: block_c48a_info
                      rep:StackRep [True, True, True, False, True, False, True]),
                     (c48q,
                      label: block_c48q_info
                      rep:StackRep [True, True, True, True, True, False, False, True,
                                    False]),
                     (c49g,
                      label: sat_s41h_info
                      rep:HeapRep 1 ptrs 2 nonptrs {
                            Fun {arity: 1 fun_type: ArgSpec 3} }),
                     (c49C,
                      label: block_c49C_info
                      rep:StackRep [True, True, True, False, False, True, True]),
                     (c4a1,
                      label: block_c4a1_info
                      rep:StackRep [True, True, True, False, False, True, True]),
                     (c4ar,
                      label: block_c4ar_info
                      rep:StackRep [False, False, True, False, False, True, False]),
                     (c4aw,
                      label: block_c4aw_info
                      rep:StackRep [False, True, True, False, False, True, False]),
                     (c4aB,
                      label: block_c4aB_info
                      rep:StackRep [True, True, True, False, False, True, False]),
                     (c4dn,
                      label: block_c4dn_info
                      rep:StackRep [])]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c49g:
          if ((Sp + -80) < SpLim) goto c49h; else goto c49i;
      c49h:
          R1 = R1;
          call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
      c49i:
          _s3YN::I64 = I64[R1 + 23];
          _s3YR::I64 = _s3YN::I64 + 11;
          if (%MO_S_Lt_W64(_s3YR::I64, 0)) goto c4dI; else goto c4dJ;
      c4dJ:
          if (_s3YR::I64 & 4611686018427387904 != 0) goto c4dI; else goto c49p;
      c49p:
          I64[Sp - 40] = c47U;
          _s3YL::P64 = P64[R1 + 7];
          _s3YM::I64 = I64[R1 + 15];
          R1 = _s3YR::I64 << 1;
          P64[Sp - 32] = _s3YL::P64;
          I64[Sp - 24] = _s3YM::I64;
          I64[Sp - 16] = _s3YN::I64;
          I64[Sp - 8] = _s3YR::I64;
          Sp = Sp - 40;
          call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
      c47U:
          Hp = Hp + 80;
          if (Hp > HpLim) goto c49t; else goto c49s;
      c49t:
          HpAlloc = 80;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
      c49s:
          I64[Hp - 72] = stg_ARR_WORDS_info;
          I64[Hp - 64] = 48;
          I64[Hp - 8] = go1_s3Z3_info;
          P64[Hp] = Hp - 72;
          I64[Sp - 8] = c47Y;
          R2 = 0;
          _s3YZ::P64 = R1;
          R1 = Hp - 7;
          P64[Sp] = _s3YZ::P64;
          Sp = Sp - 8;
          call go1_s3Z3_info(R2,
                             R1) returns to c47Y, args: 8, res: 8, upd: 8;
      c47Y:
          I64[Sp] = c482;
          R2 = R1;
          call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
      c482:
          _s3YL::P64 = P64[Sp + 16];
          _s3YM::I64 = I64[Sp + 24];
          _s3Zf::I64 = _s3YM::I64 + I64[Sp + 32];
          _s3Zl::I64 = 0;
          _s3Zk::I64 = 0;
          _s3Zj::I64 = _s3YM::I64;
          _s3Zi::I64 = I64[Sp + 40] - 1;
          _s3Zh::P64 = P64[Sp + 8];
          goto c489;
      c489:
          Hp = Hp + 24;
          if (Hp > HpLim) goto c49y; else goto c49x;
      c49y:
          HpAlloc = 24;
          I64[Sp - 16] = c48a;
          I64[Sp - 8] = _s3Zl::I64;
          I64[Sp] = _s3Zk::I64;
          I64[Sp + 8] = _s3Zj::I64;
          I64[Sp + 24] = _s3Zi::I64;
          P64[Sp + 32] = _s3Zh::P64;
          I64[Sp + 40] = _s3Zf::I64;
          Sp = Sp - 16;
          call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
      c48a:
          _s3YL::P64 = P64[Sp + 32];
          _s3Zf::I64 = I64[Sp + 56];
          _s3Zh::P64 = P64[Sp + 48];
          _s3Zi::I64 = I64[Sp + 40];
          _s3Zj::I64 = I64[Sp + 24];
          _s3Zk::I64 = I64[Sp + 16];
          _s3Zl::I64 = I64[Sp + 8];
          Sp = Sp + 16;
          goto c489;
      c49x:
          I64[Hp - 16] = lvl2_s3Zo_info;
          _s3Zn::I64 = _s3Zi::I64 << 1;
          I64[Hp] = _s3Zn::I64;
          _c48f::P64 = Hp - 16;
          _s400::I64 = _s3Zl::I64;
          _s3ZZ::I64 = _s3Zk::I64;
          _s3ZY::I64 = _s3Zj::I64;
          goto c48p;
      c48p:
          Hp = Hp + 48;
          if (Hp > HpLim) goto c4aQ; else goto c4aP;
      c4aQ:
          HpAlloc = 48;
          I64[Sp - 32] = c48q;
          I64[Sp - 24] = _s3ZY::I64;
          I64[Sp - 16] = _s3ZZ::I64;
          I64[Sp - 8] = _s400::I64;
          I64[Sp] = _s3Zn::I64;
          I64[Sp + 8] = _s3Zi::I64;
          P64[Sp + 24] = _s3Zh::P64;
          I64[Sp + 32] = _s3Zf::I64;
          P64[Sp + 40] = _c48f::P64;
          Sp = Sp - 32;
          call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
      c48q:
          _c48f::P64 = P64[Sp + 72];
          _s3YL::P64 = P64[Sp + 48];
          _s3Zf::I64 = I64[Sp + 64];
          _s3Zh::P64 = P64[Sp + 56];
          _s3Zi::I64 = I64[Sp + 40];
          _s3Zn::I64 = I64[Sp + 32];
          _s3ZY::I64 = I64[Sp + 8];
          _s3ZZ::I64 = I64[Sp + 16];
          _s400::I64 = I64[Sp + 24];
          Sp = Sp + 32;
          goto c48p;
      c4aP:
          if (%MO_S_Lt_W64(_s3Zi::I64,
                           _s3ZZ::I64 + 11)) goto c4dC; else goto c4dD;
      c4dC:
          I64[Hp - 40] = I#_con_info;
          I64[Hp - 32] = _s400::I64;
          I64[Hp - 24] = I#_con_info;
          I64[Hp - 16] = _s3ZZ::I64;
          I64[Hp - 8] = I#_con_info;
          I64[Hp] = _s3ZY::I64;
          I64[Sp - 16] = c4ar;
          R1 = Hp - 7;
          P64[Sp - 8] = Hp - 39;
          P64[Sp] = Hp - 23;
          I64[Sp + 8] = _s3Zn::I64;
          P64[Sp + 24] = _s3Zh::P64;
          I64[Sp + 32] = _s3Zf::I64;
          P64[Sp + 40] = _c48f::P64;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4ar; else goto c4as;
      c4as:
          call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
      c4ar:
          I64[Sp] = c4aw;
          _s3ZR::I64 = I64[R1 + 7];
          R1 = P64[Sp + 16];
          I64[Sp + 16] = _s3ZR::I64;
          if (R1 & 7 != 0) goto c4aw; else goto c4ax;
      c4ax:
          call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
      c4aw:
          I64[Sp] = c4aB;
          _s3ZT::I64 = I64[R1 + 7];
          R1 = P64[Sp + 8];
          I64[Sp + 8] = _s3ZT::I64;
          if (R1 & 7 != 0) goto c4aB; else goto c4aF;
      c4aF:
          call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
      c4aB:
          I64[Sp] = c49C;
          _s3Zt::I64 = I64[R1 + 7];
          R1 = P64[Sp + 56];
          _s3Zs::I64 = I64[Sp + 8];
          I64[Sp + 8] = _s3Zt::I64;
          _s3Zr::I64 = I64[Sp + 16];
          I64[Sp + 16] = _s3Zs::I64;
          I64[Sp + 56] = _s3Zr::I64;
          if (R1 & 7 != 0) goto c49C; else goto c49E;
      c49E:
          call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
      c49C:
          if (R1 & 7 >= 2) goto u4fb; else goto c4an;
      u4fb:
          Sp = Sp + 64;
          goto c4dI;
      c4an:
          _s3Zn::I64 = I64[Sp + 24];
          if (_s3Zn::I64 & 4611686018427387904 != 0) goto u4fc; else goto c49U;
      u4fc:
          Sp = Sp + 64;
          goto c4dI;
      c4dI:
          R1 = array_size_error_closure;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c49U:
          I64[Sp] = c4a1;
          R1 = _s3Zn::I64 << 1;
          call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
      c4a1:
          _s3YL::P64 = P64[Sp + 32];
          _s3Zf::I64 = I64[Sp + 48];
          _s3Zn::I64 = I64[Sp + 24];
          _s3Zr::I64 = I64[Sp + 56];
          _s3Zs::I64 = I64[Sp + 16];
          _s3Zt::I64 = I64[Sp + 8];
          if (%MO_S_Le_W64(_s3Zs::I64, 0)) goto c4ac; else goto c4ad;
      c4ac:
          Sp = Sp + 16;
          _s3Zl::I64 = _s3Zt::I64;
          _s3Zk::I64 = _s3Zs::I64;
          _s3Zj::I64 = _s3Zr::I64;
          _s3Zi::I64 = _s3Zn::I64 - 1;
          _s3Zh::P64 = R1;
          goto c489;
      c4ad:
          call "ccall" arg hints:  [PtrHint, , PtrHint,
                                    ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 40] + 16, 0, _s3Zs::I64);
          Sp = Sp + 16;
          _s3Zl::I64 = _s3Zt::I64;
          _s3Zk::I64 = _s3Zs::I64;
          _s3Zj::I64 = _s3Zr::I64;
          _s3Zi::I64 = _s3Zn::I64 - 1;
          _s3Zh::P64 = R1;
          goto c489;
      c4dD:
          if (%MO_S_Ge_W64(_s3ZY::I64,
                           _s3Zf::I64)) goto c4dy; else goto c4dz;
      c4dy:
          if (_s3ZZ::I64 != 0) goto c4dl; else goto c4do;
      c4dl:
          I64[Hp - 40] = Text_con_info;
          P64[Hp - 32] = _s3Zh::P64;
          I64[Hp - 24] = 0;
          I64[Hp - 16] = _s3ZZ::I64;
          _c4dj::P64 = Hp - 39;
          Hp = Hp - 16;
          R1 = _c4dj::P64;
          Sp = Sp + 48;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4do:
          Hp = Hp - 48;
          I64[Sp + 40] = c4dn;
          R1 = empty_closure;
          Sp = Sp + 40;
          if (R1 & 7 != 0) goto c4dn; else goto c4dp;
      c4dp:
          call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
      c4dn:
          R1 = R1;
          Sp = Sp + 8;
          call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
      c4dz:
          _s407::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
          if (_s407::I64 >= 55296) goto c4de; else goto c4df;
      c4de:
          if (_s407::I64 <= 56319) goto c4d9; else goto c4da;
      c4d9:
          Hp = Hp - 48;
          _s40a::I64 = _s3ZY::I64 + 2;
          _s409::I64 = ((_s407::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + ((_s3ZY::I64 + 1) << 1)]) - 56320) + 65536;
          goto s408;
      c4da:
          Hp = Hp - 48;
          _s40a::I64 = _s3ZY::I64 + 1;
          _s409::I64 = _s407::I64;
          goto s408;
      c4df:
          Hp = Hp - 48;
          _s40a::I64 = _s3ZY::I64 + 1;
          _s409::I64 = _s407::I64;
          goto s408;
      s408:
          if (%MO_S_Lt_W64(_s409::I64, 192)) goto s40c; else goto c4cR;
      c4cR:
          if (%MO_S_Gt_W64(_s409::I64, 195101)) goto s40c; else goto c4cM;
      s40c:
          if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4bL; else goto c4bM;
      c4bL:
          if (_s400::I64 != 0) goto c4bd; else goto c4be;
      c4be:
          _s400::I64 = 1;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4bM:
          if (_s400::I64 != 1) goto c4bd; else goto c4bG;
      c4bG:
          if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4bI; else goto c4bJ;
      c4bI:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4bJ:
          if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4bD; else goto c4bE;
      c4bD:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4bE:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 2;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cM:
          if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4cH; else goto c4cI;
      c4cH:
          if (_s400::I64 != 0) goto c4bd; else goto c4c9;
      c4c9:
          _s400::I64 = 1;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cI:
          if (_s400::I64 != 1) goto c4bd; else goto c4cB;
      c4bd:
          R1 = lvl1_r3Yr_closure;
          Sp = Sp + 48;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4cB:
          if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4cD; else goto c4cE;
      c4cD:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cE:
          if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4cy; else goto c4cz;
      c4cy:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 1;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
      c4cz:
          _s400::I64 = 0;
          _s3ZZ::I64 = _s3ZZ::I64 + 2;
          _s3ZY::I64 = _s40a::I64;
          goto c48p;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.379516 UTC

{offset
  c4f1:
      _s3YN::I64 = R5;
      _s3YM::I64 = R4;
      _s3YL::P64 = R3;
      _s3YK::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4f2; else goto c4f3;
  c4f2:
      R1 = $wnormalize_closure;
      P64[(old + 40)] = _s3YK::P64;
      P64[(old + 32)] = _s3YL::P64;
      I64[(old + 24)] = _s3YM::I64;
      I64[(old + 16)] = _s3YN::I64;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4f3:
      I64[(young<c47r> + 8)] = c47r;
      R1 = _s3YK::P64;
      if (R1 & 7 != 0) goto c47r; else goto c47s;
  c47s:
      call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c47r:
      _s3YO::P64 = R1;
      _c4f0::P64 = _s3YO::P64 & 7;
      if (_c4f0::P64 != 1) goto c4eY; else goto c4eZ;
  c4eY:
      R1 = lvl_r3LM_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4eZ:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4f8; else goto c4f7;
  c4f8:
      HpAlloc = 32;
      R1 = _s3YO::P64;
      call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c4f7:
      I64[Hp - 24] = sat_s41h_info;
      P64[Hp - 16] = _s3YL::P64;
      I64[Hp - 8] = _s3YM::I64;
      I64[Hp] = _s3YN::I64;
      _c47x::P64 = Hp - 23;
      R2 = _c47x::P64;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.381186 UTC

{offset
  c4f1:
      _s3YN::I64 = R5;
      _s3YM::I64 = R4;
      _s3YL::P64 = R3;
      _s3YK::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4f2; else goto c4f3;
  c4f2:
      R1 = $wnormalize_closure;
      P64[(old + 40)] = _s3YK::P64;
      P64[(old + 32)] = _s3YL::P64;
      I64[(old + 24)] = _s3YM::I64;
      I64[(old + 16)] = _s3YN::I64;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4f3:
      I64[(young<c47r> + 8)] = c47r;
      R1 = _s3YK::P64;
      if (R1 & 7 != 0) goto c47r; else goto c47s;
  c47s:
      call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c47r:
      _s3YO::P64 = R1;
      _c4f0::P64 = _s3YO::P64 & 7;
      if (_c4f0::P64 != 1) goto c4eY; else goto c4eZ;
  c4eY:
      R1 = lvl_r3LM_closure;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4eZ:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4f8; else goto c4f7;
  c4f8:
      HpAlloc = 32;
      R1 = _s3YO::P64;
      call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c4f7:
      I64[Hp - 24] = sat_s41h_info;
      P64[Hp - 16] = _s3YL::P64;
      I64[Hp - 8] = _s3YM::I64;
      I64[Hp] = _s3YN::I64;
      _c47x::P64 = Hp - 23;
      R2 = _c47x::P64;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.38244 UTC

{offset
  c4f1:
      _s3YN::I64 = R5;
      _s3YM::I64 = R4;
      _s3YL::P64 = R3;
      _s3YK::P64 = R2;
      if ((Sp + 8) - 40 < SpLim) goto c4f2; else goto c4f3;
  c4f2:
      R1 = $wnormalize_closure;
      P64[Sp - 32] = _s3YK::P64;
      P64[Sp - 24] = _s3YL::P64;
      I64[Sp - 16] = _s3YM::I64;
      I64[Sp - 8] = _s3YN::I64;
      Sp = Sp - 32;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4f3:
      I64[Sp - 32] = c47r;
      R1 = _s3YK::P64;
      P64[Sp - 24] = _s3YL::P64;
      I64[Sp - 16] = _s3YM::I64;
      I64[Sp - 8] = _s3YN::I64;
      Sp = Sp - 32;
      if (R1 & 7 != 0) goto c47r; else goto c47s;
  c47s:
      call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c47r:
      _s3YL::P64 = P64[Sp + 8];
      _s3YM::I64 = I64[Sp + 16];
      _s3YN::I64 = I64[Sp + 24];
      _s3YO::P64 = R1;
      _c4f0::P64 = _s3YO::P64 & 7;
      if (_c4f0::P64 != 1) goto c4eY; else goto c4eZ;
  c4eY:
      R1 = lvl_r3LM_closure;
      Sp = Sp + 32;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4eZ:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4f8; else goto c4f7;
  c4f8:
      HpAlloc = 32;
      R1 = _s3YO::P64;
      call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c4f7:
      I64[Hp - 24] = sat_s41h_info;
      P64[Hp - 16] = _s3YL::P64;
      I64[Hp - 8] = _s3YM::I64;
      I64[Hp] = _s3YN::I64;
      _c47x::P64 = Hp - 23;
      R2 = _c47x::P64;
      Sp = Sp + 32;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.383768 UTC

{offset
  c4f1:
      if ((Sp + -32) < SpLim) goto c4f2; else goto c4f3;
  c4f2:
      R1 = $wnormalize_closure;
      P64[Sp - 32] = R2;
      P64[Sp - 24] = R3;
      I64[Sp - 16] = R4;
      I64[Sp - 8] = R5;
      Sp = Sp - 32;
      call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
  c4f3:
      I64[Sp - 32] = c47r;
      R1 = R2;
      P64[Sp - 24] = R3;
      I64[Sp - 16] = R4;
      I64[Sp - 8] = R5;
      Sp = Sp - 32;
      if (R1 & 7 != 0) goto c47r; else goto c47s;
  c47s:
      call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c47r:
      if (R1 & 7 != 1) goto c4eY; else goto c4eZ;
  c4eY:
      R1 = lvl_r3LM_closure;
      Sp = Sp + 32;
      call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
  c4eZ:
      Hp = Hp + 32;
      if (Hp > HpLim) goto c4f8; else goto c4f7;
  c4f8:
      HpAlloc = 32;
      R1 = R1;
      call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
  c4f7:
      I64[Hp - 24] = sat_s41h_info;
      P64[Hp - 16] = P64[Sp + 8];
      I64[Hp - 8] = I64[Sp + 16];
      I64[Hp] = I64[Sp + 24];
      R2 = Hp - 23;
      Sp = Sp + 32;
      call runSTRep_info(R2) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.384964 UTC

[(c47r, {lvl_r3LM_closure, sat_s41h_closure}),
 (c47s, {lvl_r3LM_closure, sat_s41h_closure}),
 (c4eY, {lvl_r3LM_closure}),
 (c4eZ, {lvl_r3LM_closure, sat_s41h_closure}),
 (c4f1, {$wnormalize_closure, lvl_r3LM_closure, sat_s41h_closure}),
 (c4f2, {$wnormalize_closure}),
 (c4f3, {lvl_r3LM_closure, sat_s41h_closure}),
 (c4f7, {sat_s41h_closure}),
 (c4f8, {lvl_r3LM_closure, sat_s41h_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.385851 UTC

$wnormalize_entry() //  [R5, R4, R3, R2]
        { info_tbl: [(c47r,
                      label: block_c47r_info
                      rep:StackRep [False, True, True]),
                     (c4f1,
                      label: $wnormalize_info
                      rep:HeapRep static {
                            Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4f1:
          if ((Sp + -32) < SpLim) goto c4f2; else goto c4f3;
      c4f2:
          R1 = $wnormalize_closure;
          P64[Sp - 32] = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
      c4f3:
          I64[Sp - 32] = c47r;
          R1 = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          if (R1 & 7 != 0) goto c47r; else goto c47s;
      c47s:
          call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
      c47r:
          if (R1 & 7 != 1) goto c4eY; else goto c4eZ;
      c4eY:
          R1 = lvl_r3LM_closure;
          Sp = Sp + 32;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4eZ:
          Hp = Hp + 32;
          if (Hp > HpLim) goto c4f8; else goto c4f7;
      c4f8:
          HpAlloc = 32;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
      c4f7:
          I64[Hp - 24] = sat_s41h_info;
          P64[Hp - 16] = P64[Sp + 8];
          I64[Hp - 8] = I64[Sp + 16];
          I64[Hp] = I64[Sp + 24];
          R2 = Hp - 23;
          Sp = Sp + 32;
          call runSTRep_info(R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.387097 UTC

$wnormalize_entry() //  [R5, R4, R3, R2]
        { info_tbl: [(c47r,
                      label: block_c47r_info
                      rep:StackRep [False, True, True]),
                     (c4f1,
                      label: $wnormalize_info
                      rep:HeapRep static {
                            Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4f1:
          if ((Sp + -32) < SpLim) goto c4f2; else goto c4f3;
      c4f2:
          R1 = $wnormalize_closure;
          P64[Sp - 32] = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
      c4f3:
          I64[Sp - 32] = c47r;
          R1 = R2;
          P64[Sp - 24] = R3;
          I64[Sp - 16] = R4;
          I64[Sp - 8] = R5;
          Sp = Sp - 32;
          if (R1 & 7 != 0) goto c47r; else goto c47s;
      c47s:
          call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
      c47r:
          if (R1 & 7 != 1) goto c4eY; else goto c4eZ;
      c4eY:
          R1 = lvl_r3LM_closure;
          Sp = Sp + 32;
          call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
      c4eZ:
          Hp = Hp + 32;
          if (Hp > HpLim) goto c4f8; else goto c4f7;
      c4f8:
          HpAlloc = 32;
          R1 = R1;
          call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
      c4f7:
          I64[Hp - 24] = sat_s41h_info;
          P64[Hp - 16] = P64[Sp + 8];
          I64[Hp - 8] = I64[Sp + 16];
          I64[Hp] = I64[Sp + 24];
          R2 = Hp - 23;
          Sp = Sp + 32;
          call runSTRep_info(R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 18:54:13.388282 UTC

[section "data" {
     $wnormalize_closure:
         const $wnormalize_info;
         const 0;
 },
 $wnormalize_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 40 updfr_space: Just 8
         }
     {offset
       c47n:
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Za_entry() //  [R1]
         { info_tbl: [(c48P,
                       label: sat_s3Za_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c48P:
           if ((Sp + -16) < SpLim) goto c48Q; else goto c48R;
       c48Q:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c48R:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s3Z8::I64 = I64[R1 + 24];
           if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
       c48N:
           R2 = _s3Z8::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
       c48O:
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Z7_entry() //  [R1]
         { info_tbl: [(c490,
                       label: sat_s3Z7_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c490:
           I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
           R1 = ()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 go1_s3Z3_entry() //  [R2, R1]
         { info_tbl: [(c494,
                       label: go1_s3Z3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c494:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c498; else goto c497;
       c498:
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c497:
           _s3Z2::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s3Za_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s3Z7_info;
           P64[Hp - 32] = _s3Z2::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl2_s3Zo_entry() //  [R1]
         { info_tbl: [(c49d,
                       label: lvl2_s3Zo_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c49d:
           if ((Sp + -16) < SpLim) goto c49e; else goto c49f;
       c49e:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c49f:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s41h_entry() //  [R1]
         { info_tbl: [(c47U,
                       label: block_c47U_info
                       rep:StackRep [False, True, True, True]),
                      (c47Y,
                       label: block_c47Y_info
                       rep:StackRep [False, False, True, True, True]),
                      (c482,
                       label: block_c482_info
                       rep:StackRep [False, False, True, True, True]),
                      (c48a,
                       label: block_c48a_info
                       rep:StackRep [True, True, True, False, True, False, True]),
                      (c48q,
                       label: block_c48q_info
                       rep:StackRep [True, True, True, True, True, False, False, True,
                                     False]),
                      (c49g,
                       label: sat_s41h_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} }),
                      (c49C,
                       label: block_c49C_info
                       rep:StackRep [True, True, True, False, False, True, True]),
                      (c4a1,
                       label: block_c4a1_info
                       rep:StackRep [True, True, True, False, False, True, True]),
                      (c4ar,
                       label: block_c4ar_info
                       rep:StackRep [False, False, True, False, False, True, False]),
                      (c4aw,
                       label: block_c4aw_info
                       rep:StackRep [False, True, True, False, False, True, False]),
                      (c4aB,
                       label: block_c4aB_info
                       rep:StackRep [True, True, True, False, False, True, False]),
                      (c4dn,
                       label: block_c4dn_info
                       rep:StackRep [])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c49g:
           if ((Sp + -80) < SpLim) goto c49h; else goto c49i;
       c49h:
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c49i:
           _s3YN::I64 = I64[R1 + 23];
           _s3YR::I64 = _s3YN::I64 + 11;
           if (%MO_S_Lt_W64(_s3YR::I64, 0)) goto c4dI; else goto c4dJ;
       c4dJ:
           if (_s3YR::I64 & 4611686018427387904 != 0) goto c4dI; else goto c49p;
       c49p:
           I64[Sp - 40] = c47U;
           _s3YL::P64 = P64[R1 + 7];
           _s3YM::I64 = I64[R1 + 15];
           R1 = _s3YR::I64 << 1;
           P64[Sp - 32] = _s3YL::P64;
           I64[Sp - 24] = _s3YM::I64;
           I64[Sp - 16] = _s3YN::I64;
           I64[Sp - 8] = _s3YR::I64;
           Sp = Sp - 40;
           call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
       c47U:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c49t; else goto c49s;
       c49t:
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
       c49s:
           I64[Hp - 72] = stg_ARR_WORDS_info;
           I64[Hp - 64] = 48;
           I64[Hp - 8] = go1_s3Z3_info;
           P64[Hp] = Hp - 72;
           I64[Sp - 8] = c47Y;
           R2 = 0;
           _s3YZ::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _s3YZ::P64;
           Sp = Sp - 8;
           call go1_s3Z3_info(R2,
                              R1) returns to c47Y, args: 8, res: 8, upd: 8;
       c47Y:
           I64[Sp] = c482;
           R2 = R1;
           call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
       c482:
           _s3YL::P64 = P64[Sp + 16];
           _s3YM::I64 = I64[Sp + 24];
           _s3Zf::I64 = _s3YM::I64 + I64[Sp + 32];
           _s3Zl::I64 = 0;
           _s3Zk::I64 = 0;
           _s3Zj::I64 = _s3YM::I64;
           _s3Zi::I64 = I64[Sp + 40] - 1;
           _s3Zh::P64 = P64[Sp + 8];
           goto c489;
       c489:
           Hp = Hp + 24;
           if (Hp > HpLim) goto c49y; else goto c49x;
       c49y:
           HpAlloc = 24;
           I64[Sp - 16] = c48a;
           I64[Sp - 8] = _s3Zl::I64;
           I64[Sp] = _s3Zk::I64;
           I64[Sp + 8] = _s3Zj::I64;
           I64[Sp + 24] = _s3Zi::I64;
           P64[Sp + 32] = _s3Zh::P64;
           I64[Sp + 40] = _s3Zf::I64;
           Sp = Sp - 16;
           call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
       c48a:
           _s3YL::P64 = P64[Sp + 32];
           _s3Zf::I64 = I64[Sp + 56];
           _s3Zh::P64 = P64[Sp + 48];
           _s3Zi::I64 = I64[Sp + 40];
           _s3Zj::I64 = I64[Sp + 24];
           _s3Zk::I64 = I64[Sp + 16];
           _s3Zl::I64 = I64[Sp + 8];
           Sp = Sp + 16;
           goto c489;
       c49x:
           I64[Hp - 16] = lvl2_s3Zo_info;
           _s3Zn::I64 = _s3Zi::I64 << 1;
           I64[Hp] = _s3Zn::I64;
           _c48f::P64 = Hp - 16;
           _s400::I64 = _s3Zl::I64;
           _s3ZZ::I64 = _s3Zk::I64;
           _s3ZY::I64 = _s3Zj::I64;
           goto c48p;
       c48p:
           Hp = Hp + 48;
           if (Hp > HpLim) goto c4aQ; else goto c4aP;
       c4aQ:
           HpAlloc = 48;
           I64[Sp - 32] = c48q;
           I64[Sp - 24] = _s3ZY::I64;
           I64[Sp - 16] = _s3ZZ::I64;
           I64[Sp - 8] = _s400::I64;
           I64[Sp] = _s3Zn::I64;
           I64[Sp + 8] = _s3Zi::I64;
           P64[Sp + 24] = _s3Zh::P64;
           I64[Sp + 32] = _s3Zf::I64;
           P64[Sp + 40] = _c48f::P64;
           Sp = Sp - 32;
           call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
       c48q:
           _c48f::P64 = P64[Sp + 72];
           _s3YL::P64 = P64[Sp + 48];
           _s3Zf::I64 = I64[Sp + 64];
           _s3Zh::P64 = P64[Sp + 56];
           _s3Zi::I64 = I64[Sp + 40];
           _s3Zn::I64 = I64[Sp + 32];
           _s3ZY::I64 = I64[Sp + 8];
           _s3ZZ::I64 = I64[Sp + 16];
           _s400::I64 = I64[Sp + 24];
           Sp = Sp + 32;
           goto c48p;
       c4aP:
           if (%MO_S_Lt_W64(_s3Zi::I64,
                            _s3ZZ::I64 + 11)) goto c4dC; else goto c4dD;
       c4dC:
           I64[Hp - 40] = I#_con_info;
           I64[Hp - 32] = _s400::I64;
           I64[Hp - 24] = I#_con_info;
           I64[Hp - 16] = _s3ZZ::I64;
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s3ZY::I64;
           I64[Sp - 16] = c4ar;
           R1 = Hp - 7;
           P64[Sp - 8] = Hp - 39;
           P64[Sp] = Hp - 23;
           I64[Sp + 8] = _s3Zn::I64;
           P64[Sp + 24] = _s3Zh::P64;
           I64[Sp + 32] = _s3Zf::I64;
           P64[Sp + 40] = _c48f::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4ar; else goto c4as;
       c4as:
           call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
       c4ar:
           I64[Sp] = c4aw;
           _s3ZR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3ZR::I64;
           if (R1 & 7 != 0) goto c4aw; else goto c4ax;
       c4ax:
           call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
       c4aw:
           I64[Sp] = c4aB;
           _s3ZT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3ZT::I64;
           if (R1 & 7 != 0) goto c4aB; else goto c4aF;
       c4aF:
           call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
       c4aB:
           I64[Sp] = c49C;
           _s3Zt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           _s3Zs::I64 = I64[Sp + 8];
           I64[Sp + 8] = _s3Zt::I64;
           _s3Zr::I64 = I64[Sp + 16];
           I64[Sp + 16] = _s3Zs::I64;
           I64[Sp + 56] = _s3Zr::I64;
           if (R1 & 7 != 0) goto c49C; else goto c49E;
       c49E:
           call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
       c49C:
           if (R1 & 7 >= 2) goto u4fb; else goto c4an;
       u4fb:
           Sp = Sp + 64;
           goto c4dI;
       c4an:
           _s3Zn::I64 = I64[Sp + 24];
           if (_s3Zn::I64 & 4611686018427387904 != 0) goto u4fc; else goto c49U;
       u4fc:
           Sp = Sp + 64;
           goto c4dI;
       c4dI:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c49U:
           I64[Sp] = c4a1;
           R1 = _s3Zn::I64 << 1;
           call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
       c4a1:
           _s3YL::P64 = P64[Sp + 32];
           _s3Zf::I64 = I64[Sp + 48];
           _s3Zn::I64 = I64[Sp + 24];
           _s3Zr::I64 = I64[Sp + 56];
           _s3Zs::I64 = I64[Sp + 16];
           _s3Zt::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s3Zs::I64, 0)) goto c4ac; else goto c4ad;
       c4ac:
           Sp = Sp + 16;
           _s3Zl::I64 = _s3Zt::I64;
           _s3Zk::I64 = _s3Zs::I64;
           _s3Zj::I64 = _s3Zr::I64;
           _s3Zi::I64 = _s3Zn::I64 - 1;
           _s3Zh::P64 = R1;
           goto c489;
       c4ad:
           call "ccall" arg hints:  [PtrHint, , PtrHint,
                                     ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 40] + 16, 0, _s3Zs::I64);
           Sp = Sp + 16;
           _s3Zl::I64 = _s3Zt::I64;
           _s3Zk::I64 = _s3Zs::I64;
           _s3Zj::I64 = _s3Zr::I64;
           _s3Zi::I64 = _s3Zn::I64 - 1;
           _s3Zh::P64 = R1;
           goto c489;
       c4dD:
           if (%MO_S_Ge_W64(_s3ZY::I64,
                            _s3Zf::I64)) goto c4dy; else goto c4dz;
       c4dy:
           if (_s3ZZ::I64 != 0) goto c4dl; else goto c4do;
       c4dl:
           I64[Hp - 40] = Text_con_info;
           P64[Hp - 32] = _s3Zh::P64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s3ZZ::I64;
           _c4dj::P64 = Hp - 39;
           Hp = Hp - 16;
           R1 = _c4dj::P64;
           Sp = Sp + 48;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4do:
           Hp = Hp - 48;
           I64[Sp + 40] = c4dn;
           R1 = empty_closure;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto c4dn; else goto c4dp;
       c4dp:
           call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
       c4dn:
           R1 = R1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4dz:
           _s407::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
           if (_s407::I64 >= 55296) goto c4de; else goto c4df;
       c4de:
           if (_s407::I64 <= 56319) goto c4d9; else goto c4da;
       c4d9:
           Hp = Hp - 48;
           _s40a::I64 = _s3ZY::I64 + 2;
           _s409::I64 = ((_s407::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + ((_s3ZY::I64 + 1) << 1)]) - 56320) + 65536;
           goto s408;
       c4da:
           Hp = Hp - 48;
           _s40a::I64 = _s3ZY::I64 + 1;
           _s409::I64 = _s407::I64;
           goto s408;
       c4df:
           Hp = Hp - 48;
           _s40a::I64 = _s3ZY::I64 + 1;
           _s409::I64 = _s407::I64;
           goto s408;
       s408:
           if (%MO_S_Lt_W64(_s409::I64, 192)) goto s40c; else goto c4cR;
       c4cR:
           if (%MO_S_Gt_W64(_s409::I64, 195101)) goto s40c; else goto c4cM;
       s40c:
           if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4bL; else goto c4bM;
       c4bL:
           if (_s400::I64 != 0) goto c4bd; else goto c4be;
       c4be:
           _s400::I64 = 1;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4bM:
           if (_s400::I64 != 1) goto c4bd; else goto c4bG;
       c4bG:
           if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4bI; else goto c4bJ;
       c4bI:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4bJ:
           if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4bD; else goto c4bE;
       c4bD:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4bE:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 2;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cM:
           if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4cH; else goto c4cI;
       c4cH:
           if (_s400::I64 != 0) goto c4bd; else goto c4c9;
       c4c9:
           _s400::I64 = 1;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cI:
           if (_s400::I64 != 1) goto c4bd; else goto c4cB;
       c4bd:
           R1 = lvl1_r3Yr_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4cB:
           if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4cD; else goto c4cE;
       c4cD:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cE:
           if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4cy; else goto c4cz;
       c4cy:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cz:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 2;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
     }
 },
 $wnormalize_entry() //  [R5, R4, R3, R2]
         { info_tbl: [(c47r,
                       label: block_c47r_info
                       rep:StackRep [False, True, True]),
                      (c4f1,
                       label: $wnormalize_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4f1:
           if ((Sp + -32) < SpLim) goto c4f2; else goto c4f3;
       c4f2:
           R1 = $wnormalize_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c4f3:
           I64[Sp - 32] = c47r;
           R1 = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto c47r; else goto c47s;
       c47s:
           call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
       c47r:
           if (R1 & 7 != 1) goto c4eY; else goto c4eZ;
       c4eY:
           R1 = lvl_r3LM_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4eZ:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4f8; else goto c4f7;
       c4f8:
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
       c4f7:
           I64[Hp - 24] = sat_s41h_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R2 = Hp - 23;
           Sp = Sp + 32;
           call runSTRep_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.39576 UTC

[section "data" {
     $wnormalize_closure:
         const $wnormalize_info;
         const 0;
 },
 $wnormalize_slow() //  [R1]
         { info_tbl: []
           stack_info: arg_space: 40 updfr_space: Just 8
         }
     {offset
       c47n:
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call $wnormalize_info(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s3Za_entry() //  [R1]
         { info_tbl: [(c48P,
                       label: sat_s3Za_info
                       rep:HeapRep 1 ptrs 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c48P:
           if ((Sp + -16) < SpLim) goto c48Q; else goto c48R;
       c48Q:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c48R:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s3Z8::I64 = I64[R1 + 24];
           if (_s3Z8::I64 != 11) goto c48N; else goto c48O;
       c48N:
           R2 = _s3Z8::I64 + 1;
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go1_s3Z3_info(R2, R1) args: 24, res: 0, upd: 24;
       c48O:
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s3Z7_entry() //  [R1]
         { info_tbl: [(c490,
                       label: sat_s3Z7_info
                       rep:HeapRep 1 ptrs 1 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c490:
           I32[P64[R1 + 7] + ((I64[R1 + 15] << 2) + 16)] = 0 :: W32;
           R1 = ()_closure+1;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 go1_s3Z3_entry() //  [R2, R1]
         { info_tbl: [(c494,
                       label: go1_s3Z3_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 4} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c494:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c498; else goto c497;
       c498:
           HpAlloc = 80;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c497:
           _s3Z2::P64 = P64[R1 + 7];
           I64[Hp - 72] = sat_s3Za_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s3Z7_info;
           P64[Hp - 32] = _s3Z2::P64;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 39;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
     }
 },
 lvl2_s3Zo_entry() //  [R1]
         { info_tbl: [(c49d,
                       label: lvl2_s3Zo_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c49d:
           if ((Sp + -16) < SpLim) goto c49e; else goto c49f;
       c49e:
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c49f:
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(%MO_S_Lt_W64(I64[R1 + 16], 0) << 3) + Bool_closure_tbl];
           Sp = Sp - 16;
           call (P64[Sp])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s41h_entry() //  [R1]
         { info_tbl: [(c47U,
                       label: block_c47U_info
                       rep:StackRep [False, True, True, True]),
                      (c47Y,
                       label: block_c47Y_info
                       rep:StackRep [False, False, True, True, True]),
                      (c482,
                       label: block_c482_info
                       rep:StackRep [False, False, True, True, True]),
                      (c48a,
                       label: block_c48a_info
                       rep:StackRep [True, True, True, False, True, False, True]),
                      (c48q,
                       label: block_c48q_info
                       rep:StackRep [True, True, True, True, True, False, False, True,
                                     False]),
                      (c49g,
                       label: sat_s41h_info
                       rep:HeapRep 1 ptrs 2 nonptrs {
                             Fun {arity: 1 fun_type: ArgSpec 3} }),
                      (c49C,
                       label: block_c49C_info
                       rep:StackRep [True, True, True, False, False, True, True]),
                      (c4a1,
                       label: block_c4a1_info
                       rep:StackRep [True, True, True, False, False, True, True]),
                      (c4ar,
                       label: block_c4ar_info
                       rep:StackRep [False, False, True, False, False, True, False]),
                      (c4aw,
                       label: block_c4aw_info
                       rep:StackRep [False, True, True, False, False, True, False]),
                      (c4aB,
                       label: block_c4aB_info
                       rep:StackRep [True, True, True, False, False, True, False]),
                      (c4dn,
                       label: block_c4dn_info
                       rep:StackRep [])]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c49g:
           if ((Sp + -80) < SpLim) goto c49h; else goto c49i;
       c49h:
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c49i:
           _s3YN::I64 = I64[R1 + 23];
           _s3YR::I64 = _s3YN::I64 + 11;
           if (%MO_S_Lt_W64(_s3YR::I64, 0)) goto c4dI; else goto c4dJ;
       c4dJ:
           if (_s3YR::I64 & 4611686018427387904 != 0) goto c4dI; else goto c49p;
       c49p:
           I64[Sp - 40] = c47U;
           _s3YL::P64 = P64[R1 + 7];
           _s3YM::I64 = I64[R1 + 15];
           R1 = _s3YR::I64 << 1;
           P64[Sp - 32] = _s3YL::P64;
           I64[Sp - 24] = _s3YM::I64;
           I64[Sp - 16] = _s3YN::I64;
           I64[Sp - 8] = _s3YR::I64;
           Sp = Sp - 40;
           call stg_newByteArray#(R1) returns to c47U, args: 8, res: 8, upd: 8;
       c47U:
           Hp = Hp + 80;
           if (Hp > HpLim) goto c49t; else goto c49s;
       c49t:
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c47U, args: 8, res: 8, upd: 8;
       c49s:
           I64[Hp - 72] = stg_ARR_WORDS_info;
           I64[Hp - 64] = 48;
           I64[Hp - 8] = go1_s3Z3_info;
           P64[Hp] = Hp - 72;
           I64[Sp - 8] = c47Y;
           R2 = 0;
           _s3YZ::P64 = R1;
           R1 = Hp - 7;
           P64[Sp] = _s3YZ::P64;
           Sp = Sp - 8;
           call go1_s3Z3_info(R2,
                              R1) returns to c47Y, args: 8, res: 8, upd: 8;
       c47Y:
           I64[Sp] = c482;
           R2 = R1;
           call poly_a_r3Yq_info(R2) returns to c482, args: 8, res: 8, upd: 8;
       c482:
           _s3YL::P64 = P64[Sp + 16];
           _s3YM::I64 = I64[Sp + 24];
           _s3Zf::I64 = _s3YM::I64 + I64[Sp + 32];
           _s3Zl::I64 = 0;
           _s3Zk::I64 = 0;
           _s3Zj::I64 = _s3YM::I64;
           _s3Zi::I64 = I64[Sp + 40] - 1;
           _s3Zh::P64 = P64[Sp + 8];
           goto c489;
       c489:
           Hp = Hp + 24;
           if (Hp > HpLim) goto c49y; else goto c49x;
       c49y:
           HpAlloc = 24;
           I64[Sp - 16] = c48a;
           I64[Sp - 8] = _s3Zl::I64;
           I64[Sp] = _s3Zk::I64;
           I64[Sp + 8] = _s3Zj::I64;
           I64[Sp + 24] = _s3Zi::I64;
           P64[Sp + 32] = _s3Zh::P64;
           I64[Sp + 40] = _s3Zf::I64;
           Sp = Sp - 16;
           call stg_gc_noregs() returns to c48a, args: 8, res: 8, upd: 8;
       c48a:
           _s3YL::P64 = P64[Sp + 32];
           _s3Zf::I64 = I64[Sp + 56];
           _s3Zh::P64 = P64[Sp + 48];
           _s3Zi::I64 = I64[Sp + 40];
           _s3Zj::I64 = I64[Sp + 24];
           _s3Zk::I64 = I64[Sp + 16];
           _s3Zl::I64 = I64[Sp + 8];
           Sp = Sp + 16;
           goto c489;
       c49x:
           I64[Hp - 16] = lvl2_s3Zo_info;
           _s3Zn::I64 = _s3Zi::I64 << 1;
           I64[Hp] = _s3Zn::I64;
           _c48f::P64 = Hp - 16;
           _s400::I64 = _s3Zl::I64;
           _s3ZZ::I64 = _s3Zk::I64;
           _s3ZY::I64 = _s3Zj::I64;
           goto c48p;
       c48p:
           Hp = Hp + 48;
           if (Hp > HpLim) goto c4aQ; else goto c4aP;
       c4aQ:
           HpAlloc = 48;
           I64[Sp - 32] = c48q;
           I64[Sp - 24] = _s3ZY::I64;
           I64[Sp - 16] = _s3ZZ::I64;
           I64[Sp - 8] = _s400::I64;
           I64[Sp] = _s3Zn::I64;
           I64[Sp + 8] = _s3Zi::I64;
           P64[Sp + 24] = _s3Zh::P64;
           I64[Sp + 32] = _s3Zf::I64;
           P64[Sp + 40] = _c48f::P64;
           Sp = Sp - 32;
           call stg_gc_noregs() returns to c48q, args: 8, res: 8, upd: 8;
       c48q:
           _c48f::P64 = P64[Sp + 72];
           _s3YL::P64 = P64[Sp + 48];
           _s3Zf::I64 = I64[Sp + 64];
           _s3Zh::P64 = P64[Sp + 56];
           _s3Zi::I64 = I64[Sp + 40];
           _s3Zn::I64 = I64[Sp + 32];
           _s3ZY::I64 = I64[Sp + 8];
           _s3ZZ::I64 = I64[Sp + 16];
           _s400::I64 = I64[Sp + 24];
           Sp = Sp + 32;
           goto c48p;
       c4aP:
           if (%MO_S_Lt_W64(_s3Zi::I64,
                            _s3ZZ::I64 + 11)) goto c4dC; else goto c4dD;
       c4dC:
           I64[Hp - 40] = I#_con_info;
           I64[Hp - 32] = _s400::I64;
           I64[Hp - 24] = I#_con_info;
           I64[Hp - 16] = _s3ZZ::I64;
           I64[Hp - 8] = I#_con_info;
           I64[Hp] = _s3ZY::I64;
           I64[Sp - 16] = c4ar;
           R1 = Hp - 7;
           P64[Sp - 8] = Hp - 39;
           P64[Sp] = Hp - 23;
           I64[Sp + 8] = _s3Zn::I64;
           P64[Sp + 24] = _s3Zh::P64;
           I64[Sp + 32] = _s3Zf::I64;
           P64[Sp + 40] = _c48f::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4ar; else goto c4as;
       c4as:
           call (I64[R1])(R1) returns to c4ar, args: 8, res: 8, upd: 8;
       c4ar:
           I64[Sp] = c4aw;
           _s3ZR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s3ZR::I64;
           if (R1 & 7 != 0) goto c4aw; else goto c4ax;
       c4ax:
           call (I64[R1])(R1) returns to c4aw, args: 8, res: 8, upd: 8;
       c4aw:
           I64[Sp] = c4aB;
           _s3ZT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s3ZT::I64;
           if (R1 & 7 != 0) goto c4aB; else goto c4aF;
       c4aF:
           call (I64[R1])(R1) returns to c4aB, args: 8, res: 8, upd: 8;
       c4aB:
           I64[Sp] = c49C;
           _s3Zt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           _s3Zs::I64 = I64[Sp + 8];
           I64[Sp + 8] = _s3Zt::I64;
           _s3Zr::I64 = I64[Sp + 16];
           I64[Sp + 16] = _s3Zs::I64;
           I64[Sp + 56] = _s3Zr::I64;
           if (R1 & 7 != 0) goto c49C; else goto c49E;
       c49E:
           call (I64[R1])(R1) returns to c49C, args: 8, res: 8, upd: 8;
       c49C:
           if (R1 & 7 >= 2) goto u4fb; else goto c4an;
       u4fb:
           Sp = Sp + 64;
           goto c4dI;
       c4an:
           _s3Zn::I64 = I64[Sp + 24];
           if (_s3Zn::I64 & 4611686018427387904 != 0) goto u4fc; else goto c49U;
       u4fc:
           Sp = Sp + 64;
           goto c4dI;
       c4dI:
           R1 = array_size_error_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c49U:
           I64[Sp] = c4a1;
           R1 = _s3Zn::I64 << 1;
           call stg_newByteArray#(R1) returns to c4a1, args: 8, res: 8, upd: 8;
       c4a1:
           _s3YL::P64 = P64[Sp + 32];
           _s3Zf::I64 = I64[Sp + 48];
           _s3Zn::I64 = I64[Sp + 24];
           _s3Zr::I64 = I64[Sp + 56];
           _s3Zs::I64 = I64[Sp + 16];
           _s3Zt::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s3Zs::I64, 0)) goto c4ac; else goto c4ad;
       c4ac:
           Sp = Sp + 16;
           _s3Zl::I64 = _s3Zt::I64;
           _s3Zk::I64 = _s3Zs::I64;
           _s3Zj::I64 = _s3Zr::I64;
           _s3Zi::I64 = _s3Zn::I64 - 1;
           _s3Zh::P64 = R1;
           goto c489;
       c4ad:
           call "ccall" arg hints:  [PtrHint, , PtrHint,
                                     ,]  result hints:  [] _hs_text_memcpy(R1 + 16, 0, P64[Sp + 40] + 16, 0, _s3Zs::I64);
           Sp = Sp + 16;
           _s3Zl::I64 = _s3Zt::I64;
           _s3Zk::I64 = _s3Zs::I64;
           _s3Zj::I64 = _s3Zr::I64;
           _s3Zi::I64 = _s3Zn::I64 - 1;
           _s3Zh::P64 = R1;
           goto c489;
       c4dD:
           if (%MO_S_Ge_W64(_s3ZY::I64,
                            _s3Zf::I64)) goto c4dy; else goto c4dz;
       c4dy:
           if (_s3ZZ::I64 != 0) goto c4dl; else goto c4do;
       c4dl:
           I64[Hp - 40] = Text_con_info;
           P64[Hp - 32] = _s3Zh::P64;
           I64[Hp - 24] = 0;
           I64[Hp - 16] = _s3ZZ::I64;
           _c4dj::P64 = Hp - 39;
           Hp = Hp - 16;
           R1 = _c4dj::P64;
           Sp = Sp + 48;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4do:
           Hp = Hp - 48;
           I64[Sp + 40] = c4dn;
           R1 = empty_closure;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto c4dn; else goto c4dp;
       c4dp:
           call (I64[R1])(R1) returns to c4dn, args: 8, res: 8, upd: 8;
       c4dn:
           R1 = R1;
           Sp = Sp + 8;
           call (P64[Sp])(R1) args: 8, res: 0, upd: 8;
       c4dz:
           _s407::I64 = %MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + (_s3ZY::I64 << 1)]);
           if (_s407::I64 >= 55296) goto c4de; else goto c4df;
       c4de:
           if (_s407::I64 <= 56319) goto c4d9; else goto c4da;
       c4d9:
           Hp = Hp - 48;
           _s40a::I64 = _s3ZY::I64 + 2;
           _s409::I64 = ((_s407::I64 + -55296) << 10) + (%MO_UU_Conv_W16_W64(I16[(_s3YL::P64 + 16) + ((_s3ZY::I64 + 1) << 1)]) - 56320) + 65536;
           goto s408;
       c4da:
           Hp = Hp - 48;
           _s40a::I64 = _s3ZY::I64 + 1;
           _s409::I64 = _s407::I64;
           goto s408;
       c4df:
           Hp = Hp - 48;
           _s40a::I64 = _s3ZY::I64 + 1;
           _s409::I64 = _s407::I64;
           goto s408;
       s408:
           if (%MO_S_Lt_W64(_s409::I64, 192)) goto s40c; else goto c4cR;
       c4cR:
           if (%MO_S_Gt_W64(_s409::I64, 195101)) goto s40c; else goto c4cM;
       s40c:
           if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4bL; else goto c4bM;
       c4bL:
           if (_s400::I64 != 0) goto c4bd; else goto c4be;
       c4be:
           _s400::I64 = 1;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4bM:
           if (_s400::I64 != 1) goto c4bd; else goto c4bG;
       c4bG:
           if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4bI; else goto c4bJ;
       c4bI:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4bJ:
           if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4bD; else goto c4bE;
       c4bD:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4bE:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 2;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cM:
           if (%MO_S_Lt_W64(_s400::I64, 1)) goto c4cH; else goto c4cI;
       c4cH:
           if (_s400::I64 != 0) goto c4bd; else goto c4c9;
       c4c9:
           _s400::I64 = 1;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cI:
           if (_s400::I64 != 1) goto c4bd; else goto c4cB;
       c4bd:
           R1 = lvl1_r3Yr_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4cB:
           if (%MO_S_Lt_W64(_s409::I64, 768)) goto c4cD; else goto c4cE;
       c4cD:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cE:
           if (%MO_S_Gt_W64(_s409::I64, 125142)) goto c4cy; else goto c4cz;
       c4cy:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 1;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
       c4cz:
           _s400::I64 = 0;
           _s3ZZ::I64 = _s3ZZ::I64 + 2;
           _s3ZY::I64 = _s40a::I64;
           goto c48p;
     }
 },
 $wnormalize_entry() //  [R5, R4, R3, R2]
         { info_tbl: [(c47r,
                       label: block_c47r_info
                       rep:StackRep [False, True, True]),
                      (c4f1,
                       label: $wnormalize_info
                       rep:HeapRep static {
                             Fun {arity: 4 fun_type: ArgGen [False, False, True, True]} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4f1:
           if ((Sp + -32) < SpLim) goto c4f2; else goto c4f3;
       c4f2:
           R1 = $wnormalize_closure;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c4f3:
           I64[Sp - 32] = c47r;
           R1 = R2;
           P64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto c47r; else goto c47s;
       c47s:
           call (I64[R1])(R1) returns to c47r, args: 8, res: 8, upd: 8;
       c47r:
           if (R1 & 7 != 1) goto c4eY; else goto c4eZ;
       c4eY:
           R1 = lvl_r3LM_closure;
           Sp = Sp + 32;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       c4eZ:
           Hp = Hp + 32;
           if (Hp > HpLim) goto c4f8; else goto c4f7;
       c4f8:
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) returns to c47r, args: 8, res: 8, upd: 8;
       c4f7:
           I64[Hp - 24] = sat_s41h_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = I64[Sp + 24];
           R2 = Hp - 23;
           Sp = Sp + 32;
           call runSTRep_info(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Cmm produced by new codegen ====================
2016-06-25 18:54:13.42129 UTC

[section "data" {
     normalize_closure:
         const normalize_info;
         const 0;
 },
 normalize_entry() //  [R3, R2]
         { info_tbl: [(c4go,
                       label: normalize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4go:
           _s41j::P64 = R3;
           _s41i::P64 = R2;
           goto c4gj;
       c4gj:
           if ((old + 0) - <highSp> < SpLim) goto c4gp; else goto c4gq;
       c4gp:
           R3 = _s41j::P64;
           R2 = _s41i::P64;
           R1 = normalize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4gq:
           goto c4gi;
       c4gi:
           I64[(young<c4gl> + 8)] = c4gl;
           R1 = _s41j::P64;
           if (R1 & 7 != 0) goto c4gl; else goto c4gm;
       c4gm:
           call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
       c4gl:
           _s41k::P64 = R1;
           _s41l::P64 = P64[_s41k::P64 + 7];
           _s41m::I64 = I64[_s41k::P64 + 15];
           _s41n::I64 = I64[_s41k::P64 + 23];
           R5 = _s41n::I64;
           R4 = _s41m::I64;
           R3 = _s41l::P64;
           R2 = _s41i::P64;
           call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.422866 UTC

{offset
  c4go:
      _s41j::P64 = R3;
      _s41i::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4gp; else goto c4gq;
  c4gp:
      R3 = _s41j::P64;
      R2 = _s41i::P64;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4gq:
      I64[(young<c4gl> + 8)] = c4gl;
      R1 = _s41j::P64;
      if (R1 & 7 != 0) goto c4gl; else goto c4gm;
  c4gm:
      call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
  c4gl:
      _s41k::P64 = R1;
      _s41l::P64 = P64[_s41k::P64 + 7];
      _s41m::I64 = I64[_s41k::P64 + 15];
      _s41n::I64 = I64[_s41k::P64 + 23];
      R5 = _s41n::I64;
      R4 = _s41m::I64;
      R3 = _s41l::P64;
      R2 = _s41i::P64;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== Post common block elimination ====================
2016-06-25 18:54:13.423956 UTC

{offset
  c4go:
      _s41j::P64 = R3;
      _s41i::P64 = R2;
      if ((old + 0) - <highSp> < SpLim) goto c4gp; else goto c4gq;
  c4gp:
      R3 = _s41j::P64;
      R2 = _s41i::P64;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4gq:
      I64[(young<c4gl> + 8)] = c4gl;
      R1 = _s41j::P64;
      if (R1 & 7 != 0) goto c4gl; else goto c4gm;
  c4gm:
      call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
  c4gl:
      _s41k::P64 = R1;
      _s41l::P64 = P64[_s41k::P64 + 7];
      _s41m::I64 = I64[_s41k::P64 + 15];
      _s41n::I64 = I64[_s41k::P64 + 23];
      R5 = _s41n::I64;
      R4 = _s41m::I64;
      R3 = _s41l::P64;
      R2 = _s41i::P64;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== Layout Stack ====================
2016-06-25 18:54:13.425191 UTC

{offset
  c4go:
      _s41j::P64 = R3;
      _s41i::P64 = R2;
      if ((Sp + 8) - 24 < SpLim) goto c4gp; else goto c4gq;
  c4gp:
      R3 = _s41j::P64;
      R2 = _s41i::P64;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4gq:
      I64[Sp - 16] = c4gl;
      R1 = _s41j::P64;
      P64[Sp - 8] = _s41i::P64;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4gl; else goto c4gm;
  c4gm:
      call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
  c4gl:
      _s41i::P64 = P64[Sp + 8];
      _s41k::P64 = R1;
      _s41l::P64 = P64[_s41k::P64 + 7];
      _s41m::I64 = I64[_s41k::P64 + 15];
      _s41n::I64 = I64[_s41k::P64 + 23];
      R5 = _s41n::I64;
      R4 = _s41m::I64;
      R3 = _s41l::P64;
      R2 = _s41i::P64;
      Sp = Sp + 16;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== Sink assignments ====================
2016-06-25 18:54:13.426345 UTC

{offset
  c4go:
      if ((Sp + -16) < SpLim) goto c4gp; else goto c4gq;
  c4gp:
      R3 = R3;
      R2 = R2;
      R1 = normalize_closure;
      call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
  c4gq:
      I64[Sp - 16] = c4gl;
      R1 = R3;
      P64[Sp - 8] = R2;
      Sp = Sp - 16;
      if (R1 & 7 != 0) goto c4gl; else goto c4gm;
  c4gm:
      call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
  c4gl:
      R5 = I64[R1 + 23];
      R4 = I64[R1 + 15];
      R3 = P64[R1 + 7];
      R2 = P64[Sp + 8];
      Sp = Sp + 16;
      call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
}


==================== CAFEnv ====================
2016-06-25 18:54:13.427493 UTC

[(c4gl, {$wnormalize_closure}), (c4gm, {$wnormalize_closure}),
 (c4go, {$wnormalize_closure, normalize_closure}),
 (c4gp, {normalize_closure}), (c4gq, {$wnormalize_closure})]


==================== after setInfoTableStackMap ====================
2016-06-25 18:54:13.428284 UTC

normalize_entry() //  [R3, R2]
        { info_tbl: [(c4gl,
                      label: block_c4gl_info
                      rep:StackRep [False]),
                     (c4go,
                      label: normalize_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4go:
          if ((Sp + -16) < SpLim) goto c4gp; else goto c4gq;
      c4gp:
          R3 = R3;
          R2 = R2;
          R1 = normalize_closure;
          call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4gq:
          I64[Sp - 16] = c4gl;
          R1 = R3;
          P64[Sp - 8] = R2;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4gl; else goto c4gm;
      c4gm:
          call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
      c4gl:
          R5 = I64[R1 + 23];
          R4 = I64[R1 + 15];
          R3 = P64[R1 + 7];
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post control-flow optimisations ====================
2016-06-25 18:54:13.429503 UTC

normalize_entry() //  [R3, R2]
        { info_tbl: [(c4gl,
                      label: block_c4gl_info
                      rep:StackRep [False]),
                     (c4go,
                      label: normalize_info
                      rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
          stack_info: arg_space: 8 updfr_space: Just 8
        }
    {offset
      c4go:
          if ((Sp + -16) < SpLim) goto c4gp; else goto c4gq;
      c4gp:
          R3 = R3;
          R2 = R2;
          R1 = normalize_closure;
          call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
      c4gq:
          I64[Sp - 16] = c4gl;
          R1 = R3;
          P64[Sp - 8] = R2;
          Sp = Sp - 16;
          if (R1 & 7 != 0) goto c4gl; else goto c4gm;
      c4gm:
          call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
      c4gl:
          R5 = I64[R1 + 23];
          R4 = I64[R1 + 15];
          R3 = P64[R1 + 7];
          R2 = P64[Sp + 8];
          Sp = Sp + 16;
          call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
    }
}


==================== Post CPS Cmm ====================
2016-06-25 18:54:13.430629 UTC

[section "data" {
     normalize_closure:
         const normalize_info;
         const 0;
 },
 normalize_entry() //  [R3, R2]
         { info_tbl: [(c4gl,
                       label: block_c4gl_info
                       rep:StackRep [False]),
                      (c4go,
                       label: normalize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4go:
           if ((Sp + -16) < SpLim) goto c4gp; else goto c4gq;
       c4gp:
           R3 = R3;
           R2 = R2;
           R1 = normalize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4gq:
           I64[Sp - 16] = c4gl;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4gl; else goto c4gm;
       c4gm:
           call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
       c4gl:
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.431851 UTC

[section "data" {
     normalize_closure:
         const normalize_info;
         const 0;
 },
 normalize_entry() //  [R3, R2]
         { info_tbl: [(c4gl,
                       label: block_c4gl_info
                       rep:StackRep [False]),
                      (c4go,
                       label: normalize_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 8 updfr_space: Just 8
         }
     {offset
       c4go:
           if ((Sp + -16) < SpLim) goto c4gp; else goto c4gq;
       c4gp:
           R3 = R3;
           R2 = R2;
           R1 = normalize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c4gq:
           I64[Sp - 16] = c4gl;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto c4gl; else goto c4gm;
       c4gm:
           call (I64[R1])(R1) returns to c4gl, args: 8, res: 8, upd: 8;
       c4gl:
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wnormalize_info(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2016-06-25 18:54:13.43585 UTC

[section "relreadonly" {
     S46v_srt:
         const patError_closure;
         const array_size_error_closure;
         const empty_closure;
         const lvl1_r3Yr_closure;
         const lvl_r3LM_closure;
         const $wnormalize_closure;
         const normalize_closure;
 }]

